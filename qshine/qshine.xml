<?xml version="1.0"?>
<doc>
    <assembly>
        <name>qshine</name>
    </assembly>
    <members>
        <member name="T:qshine.Audit.AuditActionType">
            <summary>
            Audit action type
            </summary>
        </member>
        <member name="F:qshine.Audit.AuditActionType.Unknow">
            <summary>
            Unknow action
            </summary>
        </member>
        <member name="F:qshine.Audit.AuditActionType.Create">
            <summary>
            Indicates audit object created
            </summary>
        </member>
        <member name="F:qshine.Audit.AuditActionType.Update">
            <summary>
            Indicates audit object updated
            </summary>
        </member>
        <member name="F:qshine.Audit.AuditActionType.Delete">
            <summary>
            Indicates audit object deleted
            </summary>
        </member>
        <member name="T:qshine.Audit.AuditTrail">
            <summary>
            Audit trail contains entity object auditing information.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.EntityName">
            <summary>
            Auditing entity name.
            It is used to classify a particular entity class.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.Id">
            <summary>
            Audit trail unique ID.
            It is audit trail storage record Id.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.Key">
            <summary>
            Entity object key (Id) proeprty value.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.AuditActionType">
            <summary>
            Audit action type enum value.
                Create - Create a new entity object
                Update - Update an entity object
                Delete - Delete an entity object
                
            It indicates the action of data change.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.AuditActionTime">
            <summary>
            When perform the action.
            It should always be UCT time
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.AuditActionBy">
            <summary>
            Who perform the action.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.Machine">
            <summary>
            Name of the computer on which to action.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.Data">
            <summary>
            Data values in JSON format.
            It contains new/old value pair for all value modified properties and values.
            The modified daa could be new proeprty, modified property or deleted proeprty.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditTrail.Addition">
            <summary>
            A collect of proeprty/value pair as addition audit information.
            It could be null
            </summary>
        </member>
        <member name="T:qshine.Audit.AuditValue">
            <summary>
            Audit value contains a proeprty value before and after.
            If the property value 
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditValue.OldValue">
            <summary>
            Original value before change.
            </summary>
        </member>
        <member name="P:qshine.Audit.AuditValue.NewValue">
            <summary>
            New value after changed.
            </summary>
        </member>
        <member name="T:qshine.Audit.EntityAudit`1">
            <summary>
            Entity audit trail service.
            Usuage:
            
             var people = peopleRepository.Load("john");
             var auditAddtion = ContextManager.Current.GetData("auditParameters");
             var auditTrail = new EntityAudit(people, auditAddtion);
             
             people.Some = "changed";
             peopleRepository.Save(people);
             
             auditTrail.AuditUpdate(people);
             
            </summary>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.#ctor(System.String,`0,System.Object)">
            <summary>
            Create entity audit service for particular entity object.
            </summary>
            <param name="entityName">A unique name to identify an entity object.
            The audit object name can utilize for business categorization and usage.
            Use AuditEntityName mapper to customize the audit entity name.
            </param>
            <param name="entity">original entity object</param>
            <param name="additionalInfo">additional audit information to be added into audit trail.
            It is a class object. All object proeprty/value pair will be audited. 
            The additional information could be the request source (agent), url, machine/ip, application environment parameters and any others. 
            </param>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.#ctor(`0,System.Object)">
            <summary>
            Create entity audit service for particular entity object.
            </summary>
            <param name="entity">original entity object</param>
            <param name="additionalInfo">additional information push to audit object for logging</param>
            <remarks>The audit object name is a object type specific name. It can utilize for business categorization and usage.
            Use AuditEntityName mapper to customize the audit entity name.
            </remarks>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.AuditEntityCreate(`0)">
            <summary>
            Request to capture a new object audit information in audit trail
            </summary>
            <param name="entity">new auditable object</param>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.AuditEntityUpdate(`0)">
            <summary>
            Request to capture updated object information in audit trail
            </summary>
            <param name="entity">auditable object updated</param>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.AuditEntityDelete(`0)">
            <summary>
            Request to capture audit information for object deletion
            </summary>
            <param name="entity">deleted auditable object</param>
        </member>
        <member name="P:qshine.Audit.EntityAudit`1.EventBusName">
            <summary>
            Get/set event bus name.
            The default event bus name is ebus.AuditTrail.
            </summary>
        </member>
        <member name="M:qshine.Audit.EntityAudit`1.LogAuditTrail(qshine.Audit.AuditActionType,`0,`0)">
            <summary>
            Log audit entity audit trail.
            It will get the difference of original and updated entity values 
            and send the difference to audit trail logger through an event bus.
            </summary>
            <param name="action">Action of the entity.
            AuditActionType.Create: Create a new entity. The oldEntity could be null.
            AuditActionType.Update: Update an entity. The oldEntity is original one and newEntity is updated one.
            AuditActionType.Delete: Delete an entity. The oldEntity could be null, the newEntity is the entity to be deleted.
            </param>
            <param name="oldEntity">original entity. it is null when action is Create.</param>
            <param name="newEntity">new updated entity.</param>
            <remarks>
            The application can pass the addition audit information associate to the entity.
            </remarks>
        </member>
        <member name="P:qshine.Audit.EntityAudit`1.AuditEventBus">
            <summary>
            Get audit event bus for audit trail message publish.
            </summary>
        </member>
        <member name="T:qshine.Audit.IAuditable">
            <summary>
            Auditable entity interface
            </summary>
        </member>
        <member name="P:qshine.Audit.IAuditable.CreatedOn">
            <summary>
            When the entity created. Always use utc date.
            </summary>
        </member>
        <member name="P:qshine.Audit.IAuditable.CreatedBy">
            <summary>
            Who created entity
            </summary>
        </member>
        <member name="P:qshine.Audit.IAuditable.UpdatedOn">
            <summary>
            When the entity updated. Always use utc date.
            </summary>
        </member>
        <member name="P:qshine.Audit.IAuditable.UpdatedBy">
            <summary>
            Who updated the entity
            </summary>
        </member>
        <member name="T:qshine.Caching.CacheInfo">
            <summary>
            Cache entity object information
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.Key">
            <summary>
            Gets/Sets cache key. The cache key is a unique value for a cache entity object.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.Duration">
            <summary>
            Gets or sets cache time duration.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.CacheService">
            <summary>
            Gets/Sets a cache service for the cache entity
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.DependencyTags">
            <summary>
            Dependency tags is a list of tags associated to a cacheobject.
            The application can invalid cacheable objects by any tag.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheInfo.Priority">
            <summary>
            Gets or sets the priority for keeping the cache entry in the cache
            </summary>
        </member>
        <member name="T:qshine.Caching.CacheObject`1">
            <summary>
            Cacheable object. 
            A cacheable object is a given type of object loaded from data source and cached in cache store for a period of time.
            If the cacheable object expired or got reset the data will be loaded from source again.
            The reset can be triggered through a cache object change monitor which can track the source data change.
            </summary>
        </member>
        <member name="M:qshine.Caching.CacheObject`1.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.ExpirationTimeSpan">
            <summary>
            Get/Set cache time expiration time interval.
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.CacheKey">
            <summary>
            Get/set cache key
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.Priority">
            <summary>
            Get/set cache object priority
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.LoadSourceData">
            <summary>
            Load source data
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.Value">
            <summary>
            Get cached value
            </summary>
        </member>
        <member name="P:qshine.Caching.CacheObject`1.DependencyTags">
            <summary>
            A comma separate tags associate to group of cacheable objects.
            The cache monitor can reset a group of cacheable objects by the cache tag.
            For example, 
            A cacheobject's CacheTags = "Person,Location" means Reset tag Person or Location could cause this cacheobject got reset.
            </summary>
        </member>
        <member name="T:qshine.Caching.CacheDataChangedMonitor">
            <summary>
            A base class of cache object source data change montor.
            The change monitor raise event when cacheable object source data changed.
            The derived data change monitor class need pass cache key(s) or cache tag(s) values into data change event to reset the corresponding cache objects.
            
            </summary>
        </member>
        <member name="E:qshine.Caching.CacheDataChangedMonitor.DataChangedHandler">
            <summary>
            Data changed event handler
            The cache object can add handler to the monitor
            </summary>
        </member>
        <member name="M:qshine.Caching.CacheDataChangedMonitor.OnDataChanged(qshine.Caching.CacheDataChangedEventArgs)">
            <summary>
            Raise data changed event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:qshine.Caching.CacheDataChangedMonitor.InvalidCacheKeys(System.String[])">
            <summary>
            The derived class need call this method to invalid cacheable objects by the cache key when the source data changed.
            </summary>
            <param name="cacheKeys">A list of cache keys</param>
        </member>
        <member name="M:qshine.Caching.CacheDataChangedMonitor.InvalidCacheTags(System.String[])">
            <summary>
            The derived class need call this method to invalid cacheable objects by the cache dependency tag when the source data changed.
            </summary>
            <param name="dependencyTags">A list of cache tags</param>
        </member>
        <member name="T:qshine.Caching.CacheDataChangedEventArgs">
            <summary>
            Cache source data changed event arguments
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheDataChangedEventArgs.CacheKeys">
            <summary>
            A list of cache keys affected by source data change.
            When the source data changed, the cached data by listed cache keys need be reset.
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheDataChangedEventArgs.DependencyTags">
            <summary>
            A list of cache key tags affected by source data change.
            When teh source data changed, the cached data associated with cache tags need be reset.
            </summary>
        </member>
        <member name="T:qshine.Caching.ICacheProvider">
            <summary>
            Cache provider interface.
            </summary>
        </member>
        <member name="M:qshine.Caching.ICacheProvider.Create(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a cache instance.
            </summary>
            <returns>The cache instance.</returns>
        </member>
        <member name="M:qshine.Caching.ICacheProvider.Create">
            <summary>
            Create a default cache instance.
            </summary>
            <returns>The default cache instance</returns>
        </member>
        <member name="T:qshine.Caching.CacheItemPriority">
            <summary>
            Cache item priority enumlation
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.Low">
            <summary>
            cache item has the lowest level Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.BelowNormal">
            <summary>
            cache item has the BelowNormal level Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.Normal">
            <summary>
            cache item has the Normal level Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.AboveNormal">
            <summary>
            cache item has the AboveNormal level Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.High">
            <summary>
            cache item has the High level Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.NotRemovable">
            <summary>
            cache item has the NotRemovable Priority
            </summary>
        </member>
        <member name="F:qshine.Caching.CacheItemPriority.Default">
            <summary>
            cache item has the Default Priority
            </summary>
        </member>
        <member name="T:qshine.Caching.MemoryCacheProvider">
            <summary>
            In-memory cache implementation
            </summary>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.#ctor">
            <summary>
            Memory cache provider
            </summary>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wrap .NET MemoryCache instance.
            </summary>
            <returns>Create .NET MemoryCache wrap instance.</returns>
            <param name="name">Name of the cache store.</param>
            <param name="limitMegabytes">Limit megabytes. If the value is 0, the system will manage
            their own memory based on the amount of memory that is installed on the computer.</param>
            <param name="physicalMemoryLimitPercentage">The percentage of physical memory that the cache can use, expressed as an integer value from 1 to 100. 
            The default is zero, which indicates that MemoryCache instances manage their own memory based on the amount of memory that is installed on the computer.</param>
            <param name="pollingInterval">Polling interval in minutes. The cached item will be removed after polling interval time. The default value is 0 indicates 2 minutes</param>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Get(System.String)">
            <summary>
            Get cached item by given key.
            </summary>
            <returns>Retrieved cached value. If no value found it returns null.</returns>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Set(System.String,System.Object,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan},qshine.Caching.CacheItemPriority)">
            <summary>
            Adds or replaces the specified entry to the cache by a key
            </summary>
            <param name="key">The cache key used to reference the item</param>
            <param name="value">The entry value</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. 
            To avoid possible issues with local time such as changes from standard time to daylight saving time, 
            use UtcNow instead of Now for this parameter value. If you are using absolute expiration, the slidingExpiration
            parameter must be set to null.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time
            at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed 
            from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration 
            parameter must be set to DateTime.MaxValue.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Remove(System.String)">
            <summary>
            Removes the specified item from the cache
            </summary>
            <param name="key">The identifier for the cache item to remove</param>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Clear">
            <summary>
            Clear cache store
            </summary>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by the key is in the cache</returns>
        </member>
        <member name="M:qshine.Caching.MemoryCacheProvider.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:qshine.MemoryCacheStore"/> object.
            </summary>
            <remarks>Call <see cref="M:qshine.Caching.MemoryCacheProvider.Dispose"/> when you are finished using the <see cref="T:qshine.MemoryCacheStore"/>. The
            <see cref="M:qshine.Caching.MemoryCacheProvider.Dispose"/> method leaves the <see cref="T:qshine.MemoryCacheStore"/> in an unusable state. After
            calling <see cref="M:qshine.Caching.MemoryCacheProvider.Dispose"/>, you must release all references to the <see cref="T:qshine.MemoryCacheStore"/> so
            the garbage collector can reclaim the memory that the <see cref="T:qshine.MemoryCacheStore"/> was occupying.</remarks>
        </member>
        <member name="T:qshine.Caching.ICache">
            <summary>
            Cache interface
            </summary>
        </member>
        <member name="M:qshine.Caching.ICache.Get(System.String)">
            <summary>
            Get cached item by given key.
            </summary>
            <returns>Retrieved cached value. If no value found it returns null.</returns>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:qshine.Caching.ICache.Set(System.String,System.Object,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan},qshine.Caching.CacheItemPriority)">
            <summary>
            Adds or replaces the specified entry to the cache by a key
            </summary>
            <param name="key">The cache key used to reference the item</param>
            <param name="value">The entry value</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. 
            To avoid possible issues with local time such as changes from standard time to daylight saving time, 
            use UtcNow instead of Now for this parameter value. If you are using absolute expiration, the slidingExpiration
            parameter must be set to null.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time
            at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed 
            from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration 
            parameter must be set to null.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
        </member>
        <member name="M:qshine.Caching.ICache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:qshine.Caching.ICache.Remove(System.String)">
            <summary>
            Removes the specified item from the cache
            </summary>
            <param name="key">The identifier for the cache item to remove</param>
        </member>
        <member name="M:qshine.Caching.ICache.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by the key is in the cache</returns>
        </member>
        <member name="T:qshine.Caching.Cache">
            <summary>
            It provides cache service for the application caching.
            Each cacheable object could be temporarily stored in one of the cache store by the cache key. 
            The cache key is used to lookup up a cache provider through environment provider name pattern matching.
            The cache provider instance can be plugged through environment configure setting or by code directly.
            
            Using code inject a cache provider instance for the key cacheable object
            <![CDATA[
                
                ICache cache = new MemoryCacheStore();
                ApplicationEnvironment.Default.MapProvider<ICache>("unitTestCache*", cache);
                
                var testObject1 = Cache.GetOrSet("unitTestCache.key1", ()=>{return MyUnitTetstLoadData();}, TimeSpan.FromMinutes(5));
                
            ]]>
            </summary>
        </member>
        <member name="M:qshine.Caching.Cache.MappedCacheProvider(System.String)">
            <summary>
            Get cache service
            </summary>
            <param name="key">cache key</param>
            <returns>return ICache instance</returns>
        </member>
        <member name="M:qshine.Caching.Cache.TryGet(System.String,System.Object@)">
            <summary>
            Try to get cacheable value by cache key.
            </summary>
            <param name="key">cache key</param>
            <param name="value">return cacheable value</param>
            <returns>Return true if the cacheable value found</returns>
        </member>
        <member name="M:qshine.Caching.Cache.Get(System.String)">
            <summary>
            Get cached item by given key.
            </summary>
            <returns>Retrieved cached value. If no value found it returns null.</returns>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:qshine.Caching.Cache.Set(System.String,System.Object,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Adds or replaces the specified entry to the cache by a key
            </summary>
            <param name="key">The cache key used to reference the item</param>
            <param name="value">The entry value</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. 
            To avoid possible issues with local time such as changes from standard time to daylight saving time, 
            use UtcNow instead of Now for this parameter value. If you are using absolute expiration, the slidingExpiration
            parameter must be set to null.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time
            at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed 
            from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration 
            parameter must be set to null.</param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
        </member>
        <member name="M:qshine.Caching.Cache.Set(System.String,System.Object)">
            <summary>
            Cache keyed value
            </summary>
            <param name="key">Cache key</param>
            <param name="value">Cached value</param>
        </member>
        <member name="M:qshine.Caching.Cache.Set(System.String,System.Object,System.TimeSpan,System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Cache keyed value for a given time
            </summary>
            <param name="key">cache key</param>
            <param name="value">value to be cached</param>
            <param name="slidingExpiration">Timespan </param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority"></param>
        </member>
        <member name="M:qshine.Caching.Cache.Set(System.String,System.Object,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Cache keyed value with more parameters
            </summary>
            <param name="key">Cache key</param>
            <param name="value">Cached value</param>
            <param name="absoluteExpiration">Cache expiration time</param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority"></param>
        </member>
        <member name="M:qshine.Caching.Cache.GetOrSet(System.String,System.Func{System.Object},System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Get cached object by given key.
            If the cacheable object is not cached, it will load and cache data.
            </summary>
            <param name="key">Cache key</param>
            <param name="dataLoader">cacheable data loader</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. 
            To avoid possible issues with local time such as changes from standard time to daylight saving time, 
            use UtcNow instead of Now for this parameter value. If you are using absolute expiration, the slidingExpiration
            parameter must be set to null.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time
            at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed 
            from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration 
            parameter must be set to null.</param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
            <returns>Returns cached data.</returns>
        </member>
        <member name="M:qshine.Caching.Cache.GetOrSet(System.String,System.Func{System.Object},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Get cached object by given key.
            If the cacheable object is not cached, it will load and cache data.
            </summary>
            <param name="key">Cache key</param>
            <param name="dataLoader">cacheable data loader</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. 
            To avoid possible issues with local time such as changes from standard time to daylight saving time, 
            use UtcNow instead of Now for this parameter value. If you are using absolute expiration, the slidingExpiration
            parameter must be set to null.</param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
            <returns>Returns cached data.</returns>
        </member>
        <member name="M:qshine.Caching.Cache.GetOrSet(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.String},qshine.Caching.CacheItemPriority)">
            <summary>
            Get cached object by given key.
            If the cacheable object is not cached, it will load and cache data.
            </summary>
            <param name="key">Cache key</param>
            <param name="dataLoader">cacheable data loader</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time
            at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed 
            from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration 
            parameter must be set to null.</param>
            <param name="dependencyTags">A list of tags associate to the cache object. It is a dependent tag.
            When the cache object source data changed, the source data change monitor will raise change event with dependencyTags to reset the cache object.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the
            CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost 
            are removed from the cache before objects with a higher cost.</param>
            <returns>Returns cached data.</returns>
        </member>
        <member name="M:qshine.Caching.Cache.Remove(System.String)">
            <summary>
            Removes the specified item from the cache
            </summary>
            <param name="key">The identifier for the cache item to remove</param>
        </member>
        <member name="M:qshine.Caching.Cache.Clear">
            <summary>
            Clear current cache store.
            </summary>
        </member>
        <member name="M:qshine.Caching.Cache.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by the key is in the cache</returns>
        </member>
        <member name="M:qshine.Caching.Cache.RegisterDataChangeMonitor(qshine.Caching.CacheDataChangedMonitor)">
            <summary>
            Register a cache object source data change monitor.
            A Data Change Monitor can monitor source data change.
            If the source data changed an data change event will be raised.
            The registered event handlers will get notified to invalid the cache object.
            </summary>
        </member>
        <member name="F:qshine.Caching.Cache._cacheMonitors">
            <summary>
            Store all cache data change monitor
            </summary>
        </member>
        <member name="F:qshine.Caching.Cache._cacheEntitys">
            <summary>
            Map cache key to tags
            </summary>
        </member>
        <member name="M:qshine.Caching.Cache.CacheMonitorHandler(System.Object,qshine.Caching.CacheDataChangedEventArgs)">
            <summary>
            Generic cache monitor handler.
            The monitor handler will clean cache by cache keys or cache tags.
            </summary>
            <param name="monitor">cache monitor instance</param>
            <param name="args">cache monitor argument.</param>
        </member>
        <member name="M:qshine.ApplicationAssemblyResolver.Resolve(System.String)">
            <summary>
            Resolve dotnet core dependence from given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.ApplicationEnvironment">
            <summary>
            Application Environment public static service
            </summary>
            <summary>
            Service class to manage application environment configuration to support plugable components.
            Each application usually has a single ApplicationEnvironment instance to manage different set of configuration files for different running environments.
            Only current run-time environment appreciated plugable components and environment settings will be loaded into application as default behaviour. 
            The behaviour could be changed by application environment manager  .
            
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.Default">
            <summary>
            Get default application environment
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.Build(System.String,qshine.EnvironmentInitializationOption)">
            <summary>
            Build default environment
            </summary>
            <param name="configFile">configuration file.</param>
            <param name="options">configuration options.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.#ctor(qshine.Configuration.ApplicationEnvironmentContext)">
            <summary>
            Ctor:: build application environment by enironment context.
            </summary>
            <param name="context">Application environment context</param>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.Name">
            <summary>
            Name of the application environment
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.EnvironmentConfigure">
            <summary>
            Get Environment Configure setting
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.Item(System.String)">
            <summary>
            Gets configure setting value by a given key
            </summary>
            <param name="key">specifies an application environment setting key</param>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.ConnectionStrings">
            <summary>
            Get connection strings
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.PlugableAssemblies">
            <summary>
            Get environment pluggable assembly collection.
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironment.Services">
            <summary>
            Get pluggable component services
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.Startup``1">
            <summary>
            It will invoke all instances that implemented type T interface or base class.
            The type T constructor()
            </summary>
            <typeparam name="T">An interface or base class for start up class implementation.</typeparam>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.GetConfigFilePathIfAny(System.String)">
            <summary>
            Gets the first config file path searching through all config folders.
            </summary>
            <returns>The config file path if any or null.</returns>
            <param name="configFileName">Config file name.</param>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.PlugComponent(qshine.PluggableComponent)">
            <summary>
            Add a pluggable component into application environment
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.PlugComponent``2(System.String,qshine.IocInstanceScope,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <typeparam name="IT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="scope"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironment.PlugComponent(System.Type,System.Type,System.String,qshine.IocInstanceScope,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="interfaceType"></param>
            <param name="classType"></param>
            <param name="name"></param>
            <param name="scope"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:qshine.Configuration.ApplicationEnvironment._logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="T:qshine.Configuration.ApplicationEnvironmentBuilder">
            <summary>
            Build application environment instance
            </summary>
            <example>
            <![CDATA[
                
                var options = new EnvironmentInitializationOption {
                    OverwriteConnectionString = true
                };
                var builder = new ApplicationEnvironmentBuilder();
                
                builder
                    .Config((appContext, config)=>{
                        config.LoadConfigFile("app.config", options);
                        config.AddCommandLine(args);
                        appContext.PlugableAssemblyFilter((assembly)=>{
                                return assembly.FullName.Contains("MyService.P1"));
                            }
                        })
                    .Build()
                    .AddComponent<IMyService, MyService>()
                    .AddComponent<IMyService, MyService2>(name)
                    .AddComponent<IMyService, MyService3>(name, arg1,arg2,arg3)
                    .StartUp<Bootstrapper>()
            
            
            ]]>
            
                ApplicationEnvironment(1) => EnvironmentConfigure(*)
                ApplicationEnvironmentContext(1) ==> EnvironmentConfigure(1)
                ApplicationEnvironmentBuilder(1) ==> ApplicationEnvironmentContext(as parameter)
                PlugableAssembly => assembly
                PlugableComponent => Type, assembly, instance
                
            </example>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.#ctor">
            <summary>
            Build default ApplicationEnvironment.
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.#ctor(System.String)">
            <summary>
            Build a named ApplicationEnvironment.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.#ctor(qshine.Configuration.ApplicationEnvironmentContext)">
            <summary>
            Build ApplicationEnvironment with given application environment context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.Configure(System.Action{qshine.Configuration.ApplicationEnvironmentContext,qshine.Configuration.EnvironmentConfigure})">
            <summary>
            Configure application environment
            </summary>
            <param name="configureSetting">application environment configure delegate</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.Build">
            <summary>
            Build applicationEnvironment
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.AddConfigure(qshine.Configuration.IConfigurationStore)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.LoadComponents">
            <summary>
            Load components from application configuration file
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.LoadModules">
            <summary>
            Load modules from application configuration file
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.LoadModule(qshine.PluggableComponent)">
            <summary>
            Try to load a module.
            </summary>
            <param name="module">Module is a plugin component that will be auto loaded through application eenvironment.
            The module initialization could be implemented in type constructor or type static constructor (If initialization call only once.).
            </param>
            <remarks>
            The module must have a public constructor without parameter. 
            </remarks>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.ApplicationAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Resolve assembly location when lookup type by a qualified type name.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.LoadBinaryFiles">
            <summary>
            Add all assembly files from binary folders into application environment.
            The AssemblyResolveHandler try to resolve assembly from those files.
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.SafeLoadAssembly(System.String)">
            <summary>
            Load assembly from plugin folder
            </summary>
            <param name="path">path of plugin component</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.LoadRuntimeComponents">
            <summary>
            Load application components from runtime location to application environment.
            Those components types could be resolved directly from run-time.
            The mapped runtime application components will be part of accessable types for plugable application environment.
            It will not include most system or common share components.
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentBuilder.#cctor">
            <summary>
            Static ctor:: pre-initialization when first touch the ApplicationEnvironmentBuilder component
            </summary>
        </member>
        <member name="T:qshine.Configuration.ApplicationEnvironmentContext">
            <summary>
            Application environment context.
            The running application could have more than one application environment settings.
            Same named application environments shared same application environment context.
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentContext.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.EnvironmentConfigure">
            <summary>
            Application environment configure setting
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.Properties">
            <summary>
            Context properties
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.RuntimeAssemblies">
            <summary>
            Get/Set Runtime Assemblies.
            The default runtime assemblies is from AppDomain.CurrentDomain.GetAssemblies() 
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.PlugableAssemblyFilter">
            <summary>
            A delegate to filter out non-plugable assemblies from RuntimeAssemblies.
            The delegate returns true if it is a plugable (service) assembly.
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.PlugableAssemblies">
            <summary>
            Plugable assemblies
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.Name">
            <summary>
            Get application environment context name
            </summary>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.Default">
            <summary>
            Get default application environment context
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentContext.GetContext(System.String)">
            <summary>
            Get named application environment context
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:qshine.Configuration.ApplicationEnvironmentContext.ContextStore">
            <summary>
            Get/Set current environment context store.
            The default current environment context store is Static Context store. It allows single current application environment.
            You may want to have a different context store to have current application environment based on different context. 
            In this case you can implement a special EnvironmentContextStore.
            The EnvironmentContextStore need be set in application Startup before ApplicationEnvironment.Boot()
            </summary>
        </member>
        <member name="F:qshine.Configuration.ApplicationEnvironmentContext.environmentContextStoreName">
            <summary>
            Default environment context store name.
            </summary>
        </member>
        <member name="M:qshine.Configuration.ApplicationEnvironmentContext.IsPlugableAssembly(System.Reflection.Assembly)">
            <summary>
            Determine whether an assembly could be a plugable (service) assembly
            </summary>
            <param name="assembly">assembly object</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.ConfigurationException">
            <summary>
            application Environment Configuration Exception
            </summary>
        </member>
        <member name="P:qshine.Configuration.ConfigurationException.InnerErrorMessages">
            <summary>
            Gete a list of Exception
            </summary>
        </member>
        <member name="T:qshine.Configuration.ConfigurationStore.XmlConfigurationLoader">
            <summary>
            EnvironmentConfigure extension to Load XML formatted configure files
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationLoader.LoadConfigFile(qshine.Configuration.EnvironmentConfigure,System.String,qshine.EnvironmentInitializationOption)">
            <summary>
            Load XML formatted application configure files
            </summary>
            <param name="config">environment configure instance</param>
            <param name="rootConfigFile">root configure file path. such as app.config</param>
            <param name="options">configuration setting options</param>
        </member>
        <member name="T:qshine.Configuration.ConfigurationStore.XmlConfigurationStore">
            <summary>
            Implement .NET framework formatted application environment configure files 
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.#ctor(qshine.Configuration.EnvironmentConfigure)">
            <summary>
            Create XmlConfigurationStore instance
            </summary>
            <param name="environmentConfigure"></param>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.LoadConfig(System.String,qshine.EnvironmentInitializationOption)">
            <summary>
            Load specific config file with options
            </summary>
            <param name="rootConfigFile"> root configure file path</param>
            <param name="option">EnvironmentInitializationOption object to indicate how to load the the config files.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.LoadConfig(System.String)">
            <summary>
            Load specific config file. If the config file is not specified, use default config file
            </summary>
            <param name="configFile">configure file path.</param>
            <returns>Environment configure instance</returns>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.LoadDbConnectionStrings(System.Configuration.ConnectionStringsSection)">
            <summary>
            Load connection strings
            </summary>
            <param name="section">ConnectionStrings section</param>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.LoadEnvironmentSection(qshine.Configuration.EnvironmentSection)">
            <summary>
            Load environment section
            </summary>
            <param name="section">Application Environment section</param>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.ResolveBinaryFolders(System.String)">
            <summary>
            Add configured binary folders in binary components search path.
            The available binary folders could be:
            1. [given binary folder] ex: bin. Usually, add common non-version specific component
            2. [given binary folder]/[qshine version folder] ex: bin/2.1. Usually, add qshine extension components
            3. [given binary folder]/[Microsoft .NET version folder] ex: bin/net461 or bin/netcoreapp2.1. Usually, add components built with specific .NET library
            4. [given binary folder]/[cpu architecture folder] ex: bin/x86 or bin/x64. Usually, add 3rd-party plug-in components
            The x86 only components should be in x86 folder.
            The x64 only components should be in x64 folder.
            The Any CPU components should be in bin folder directly.
            5. [given binary folder]/[os folder] ex: bin/win or bin/linux.
            6. [given binary folder]/[one of above folder]/[one of above folder]/...
            </summary>
            <param name="binFolder">binary folder entry</param>
            <remark>
            The binary folder may contain any level of below type sub-folder. Only matched folder dlls will be loaded
             binary Folder --
                   |-- qshine version folder: 1.0, 2.1
                   |-- cpu-architecture folder: x86, x64, arm, arm64
                   |-- target framework moniker folder: net461, netcoreapp2.1
                   |-- os folder: win, linux, osx
                   |
            </remark>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.UnifiedFullPath(System.String,System.String)">
            <summary>
            Return absolute path for a specified path. 
            If the specified path is a relative path, the absolute path is the combination of specified folder and relative path.
            </summary>
            <param name="folder">Specifies a folder for full path</param>
            <param name="path">Full path or relative path</param>
            <returns></returns>
        </member>
        <member name="P:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.LibraryVersion">
            <summary>
            qshine library version
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlConfigurationStore.GetLibraryVersionPaths">
            <summary>
            Get qshine library version paths.
            bin/1
            bin/1.2
            bin/1.2.3
            </summary>
            <returns>The version paths.</returns>
        </member>
        <member name="T:qshine.Configuration.ConfigurationStore.XmlDbProviderFactoriesSection">
            <summary>
            Parse system.data section for DbProviderFactories
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlDbProviderFactoriesSection.#ctor(System.String)">
            <summary>
            Ctor::
            </summary>
            <param name="rawXml"></param>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlDbProviderFactoriesSection.Parse">
            <summary>
            Build DbProviderFactories
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlDbProviderFactoriesSection.RegisterDbProviderFactory(System.String,System.String)">
            <summary>
            Register DbProviderFactories for .NET CORE.
            .NET CORE doesn't implement the factory register.
            We have to add piece of code here to make it compatiable with >NET framework
            </summary>
        </member>
        <member name="T:qshine.Configuration.ConfigurationStore.XmlDiagnosticsSection">
            <summary>
            configure system.diagnostics section parser for default TraceLogger provider
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlDiagnosticsSection.#ctor(System.String)">
            <summary>
            Ctor::
            </summary>
            <param name="rawXml"></param>
        </member>
        <member name="M:qshine.Configuration.ConfigurationStore.XmlDiagnosticsSection.Parse">
            <summary>
            Parse system.diagnostics section
            </summary>
        </member>
        <member name="T:qshine.Configuration.ConnectionStringElement">
            <summary>
            Connection string element class
            </summary>
        </member>
        <member name="P:qshine.Configuration.ConnectionStringElement.Name">
            <summary>
            Connection string setting name
            </summary>
        </member>
        <member name="P:qshine.Configuration.ConnectionStringElement.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:qshine.Configuration.ConnectionStringElement.ProviderName">
            <summary>
            Connection string provider
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.#ctor(System.String,System.String)">
            <summary>
            Ctor::
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Ctor::
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.Equals(qshine.Configuration.ConnectionStringElement)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.op_Equality(qshine.Configuration.ConnectionStringElement,qshine.Configuration.ConnectionStringElement)">
            <summary>
            Compare two string elements
            </summary>
            <param name="left">left connection string element</param>
            <param name="right">right connection string element</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConnectionStringElement.op_Inequality(qshine.Configuration.ConnectionStringElement,qshine.Configuration.ConnectionStringElement)">
            <summary>
            operator !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.ConnectionStrings">
            <summary>
            Connection string element collection class
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConnectionStrings.AddOrUpdate(qshine.Configuration.ConnectionStringElement)">
            <summary>
            Add or replace connection string element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:qshine.Configuration.ConnectionStrings.ContainsKey(System.String)">
            <summary>
            Check a named connection exists
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.ConnectionStrings.Remove(System.String)">
            <summary>
            Remove a named connection element
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:qshine.Configuration.ConnectionStrings.Item(System.String)">
            <summary>
            Get named connection string element.
            </summary>
            <param name="name"></param>
            <returns>a named connection string element.
            return null if named connection string element is not found.</returns>
        </member>
        <member name="P:qshine.Configuration.ConnectionStrings.Item(System.Int32)">
            <summary>
            Get connection string element by index order.
            </summary>
            <param name="index">index order</param>
            <returns>a indexed connection string element.
            return null if connection string element is not existing.</returns>
        </member>
        <member name="P:qshine.Configuration.ConnectionStrings.Count">
            <summary>
            Get number of connection string elements 
            </summary>
        </member>
        <member name="M:qshine.Configuration.ConnectionStrings.Clear">
            <summary>
            Clear all connections
            </summary>
        </member>
        <member name="T:qshine.Configuration.IConfigurationStore">
            <summary>
            Application environment configuration store interface,
            </summary>
        </member>
        <member name="M:qshine.Configuration.IConfigurationStore.LoadConfig(qshine.EnvironmentInitializationOption)">
            <summary>
            Load EnvironmentConfigure data from specific formatted config file store. 
            </summary>
            <param name="option">EnvironmentInitializationOption object to indicate how to load the the config files.</param>
            <returns>Environment configure instance</returns>
        </member>
        <member name="T:qshine.Configuration.Map">
             <summary>
             A named map collection is a list of key value pair associated with a particular name.
            The name usually is a tag to group or categorize a set of value mapping.
            Each value mapping item represets a key associated with a meaningful value.
            
            For example, an interface type name can be used to group a set of interface type implementations.
            One mapping item could be used to map a namespace to a particular interface implementation.
            
             </summary>
        </member>
        <member name="P:qshine.Configuration.Map.Name">
            <summary>
            Map name or category.
            Example, "qshine.Messaging.IEventBusFactory" represents a collection of event bus factory class implementations.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Map.Default">
            <summary>
            Specifies a default map item value.
            A map collection only list a number of map items. This default value will be selected if map key is not in the collection.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Map.Items">
            <summary>
            Key/Value pair map items
            The Key could be a regular expression pattern used to match given key map item.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Map.Item(System.String)">
            <summary>
            Get/Set map item value
            </summary>
        </member>
        <member name="M:qshine.Configuration.Map.MatchKeyValue(System.String)">
            <summary>
            Match key to one of map collection item.
            </summary>
            <param name="key">A key value to be match</param>
            <returns>Returns a matched mapping item or default value if nothing found.
            The default value could be null or empty if the default value is not set.</returns>
        </member>
        <member name="M:qshine.Configuration.Map.ContainsKey(System.String)">
            <summary>
            Check whether a map key exists
            </summary>
            <param name="key"></param>
            <returns>true if map contains the key</returns>
        </member>
        <member name="P:qshine.Configuration.Map.Count">
            <summary>
            Get number of map item
            </summary>
        </member>
        <member name="M:qshine.Configuration.Map.GetMapName(System.Type)">
            <summary>
            Get Map name by the type.
            </summary>
            <param name="type">Type of component</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.MappedComponents">
            <summary>
            The Mapped Components is a service component collection.
            User can get service component by
            1. By service interface type.
            2. By service interface type and provider name defined in configure setting.
            3. By service interface type and provider mapping name in configure setting.
            
            Using mapping name to find a provider is a most flexible way to work with pluggable component.
            The mapping name could be a business object related name or tag.
            </summary>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.#ctor(qshine.Configuration.EnvironmentConfigure)">
            <summary>
            Create a mapped components instance
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetProvider``1">
            <summary>
            Get a specific interfaced type provider. 
            The provider must be inherited from IProvider.
            If plugged more than one provider, a default provider will be return.
            </summary>
            <typeparam name="T">Specifies provider interface type or base type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetProvider``1(System.String)">
            <summary>
            Get a named service provider
            </summary>
            <typeparam name="T">Specifies provider interface type or base type.</typeparam>
            <param name="name">Component name.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetProvider(System.Type,System.String)">
            <summary>
            Get a specific interface type provider. The provider must be inherited from IProvider.
            If the provider name is specified it create an instance from named provider or mapped name provider.
            Get default or first interface provider if the name is not specified or doesn't match to the provider name or map key.
            Provider configure setting map sample:
            <![CDATA[
                <maps name="providerTypeName" default="providerName1">
                    <add key="mapKey" value="providerName" />
                </maps>
                <components>
                    <component name="providerName1" interface="Ixxx" type="xxx" />
                    <component name="providerName" interface="Ixxx" type="xxx2" />
                </components>
            ]]>        /// </summary>
            <param name="providerInterface">Specifies provider interface type or base type.</param>
            <param name="name">Provider name or provider mapping name.</param>
            <returns>Returns a interface type implementation instance.</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetProviderByName``1(System.String)">
            <summary>
            Get provider by provider name.
            Returns null if the specified provider name is not found.
            </summary>
            <typeparam name="T">Type of provider</typeparam>
            <param name="providerName">provider name</param>
            <returns>Returns named provider.</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetComponentByName(System.Type,System.String)">
            <summary>
            Get component by component name
            </summary>
            <param name="interfaceType">type of component interface</param>
            <param name="componentName">Component name</param>
            <returns>Returns named component or null if name is not found.</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetProviders``1">
            <summary>
            Get all given type of providers from configured components
            </summary>
            <typeparam name="T">type of provider interface</typeparam>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetComponent``1(System.String)">
            <summary>
            Get a specific interface type component instance.
            If the component name is specified it create instance from named component.
            Get default or first typed component if the name is not specified.
            </summary>
            <typeparam name="T">The interface type of the component.</typeparam>
            <param name="name">The component name defined in component setting configure. If name is blank, it will try to get default or first component listed in configure setting.</param>
            <returns>returns typed component instance</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetComponent(System.Type,System.String)">
            <summary>
            Create a specific interface type component instance.
            If the component name is specified it create instance from named component.
            Get default or first typed component if the name is not specified.
            </summary>
            <param name="interfaceType">The interface type of the component.</param>
            <param name="name">The component name defined in component setting configure. If name is blank, it will try to get default or first component listed in configure setting.</param>
            <returns>returns typed component instance object</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetPluggableComponent(System.Type,System.String)">
            <summary>
            Get a named interface type plugin component.
            If the name is not specified, it returns default or first typed component.
            The name could be a component provider name or component mapping key name or matched mapping item.
            </summary>
            <param name="interfaceType">Specifies component interface type</param>
            <param name="name">Specifies the component name. If the name is blank, it returns default typed component or the first valid component from the component list.
            if plugin associated to a map collection, the name parameter can be a map key.
            </param>
            <returns>Returns a named or default pluggable component.</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetComponentMap(System.Type)">
            <summary>
            Get the component map by component interface type
            </summary>
            <param name="componentType">interface type of the component</param>
            <returns>Returns type specific component map or null if the mapping is not found.</returns>
        </member>
        <member name="M:qshine.Configuration.MappedComponents.GetEnvironmentMap(System.String)">
            <summary>
            Get map by name from environment configure
            </summary>
            <param name="mapName">map name</param>
            <returns>return a environment map or null if mapping is not found</returns>
        </member>
        <member name="T:qshine.Configuration.PluggableAssemblyCollection">
            <summary>
            Pluggable assembly collection
            </summary>
        </member>
        <member name="F:qshine.Configuration.PluggableAssemblyCollection._pluggableAssemblies">
            <summary>
            pluggable assemblies
            </summary>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.Add(System.String,qshine.PluggableAssembly)">
            <summary>
            Add a pluggable assembly into the collection
            </summary>
            <param name="name">simple assembly name</param>
            <param name="assembly">Pluggable assembly compoenent (may not loaded yet)</param>
            <returns>returns true if assembly added into the collection</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.Contains(System.String)">
            <summary>
            Determines whether the pluggable assembly in the collection.
            </summary>
            <param name="name">The pluggable assembly name.</param>
            <returns>return true if the assembly exists in the collection.</returns>
        </member>
        <member name="P:qshine.Configuration.PluggableAssemblyCollection.Item(System.String)">
            <summary>
            Get pluggable assembly by name
            </summary>
            <param name="name">The pluggable assembly name.</param>
            <returns>Returns a pluggable assembly by name. Or, returns null if the assembly not found.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.GetAssembly(System.String)">
            <summary>
            Get assembly from assembly collection
            </summary>
            <param name="assemblyName">simple assembly name</param>
            <returns>Loaded Assembly</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.SafeGetInterfacedTypes(System.Type)">
            <summary>
            Find all types which implemented a specific interface or base class type from all loaded assemblies. 
            </summary>
            <param name="interfaceType">Specifies interface or base class type.</param>
            <returns>A list of implementation class types.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.GetType(System.String)">
            <summary>
            Gets the type by the type name. The type name could be a qualified type name accessible by the application environment.
            The application environment could contain plugable assembly.
            </summary>
            <returns>The named type.</returns>
            <param name="typeName">Type name.</param>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.GetType(System.String,System.String,System.Boolean)">
            <summary>
            Get type by given assembly name and object type name from a pluggable assembly Map.
            To avoid pluggable component dll hell, it only allow one version be loaded for pluggable assembly.
            </summary>
            <param name="assemblyName">Simple assembly name. </param>
            <param name="typeName">Simple type name.</param>
            <param name="throwError">throw exception if it is true.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableAssemblyCollection.GetTypeByName(System.String)">
            <summary>
            Get type by type name. It finds first found type from assembly Map
            </summary>
            <param name="typeName">Simple type name.</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.PluggableComponentCollection">
            <summary>
            Pluggable component collection
            </summary>
        </member>
        <member name="F:qshine.Configuration.PluggableComponentCollection._pluggableComponents">
            <summary>
            pluggable assemblies
            </summary>
        </member>
        <member name="P:qshine.Configuration.PluggableComponentCollection.Count">
            <summary>
            Count the number of components.
            </summary>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.Add(System.String,qshine.PluggableComponent)">
            <summary>
            Add a pluggable assembly into the collection
            </summary>
            <param name="name">simple assembly name</param>
            <param name="assembly">Pluggable assembly compoenent (may not loaded yet)</param>
            <returns>returns true if assembly added into the collection</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.Contains(System.String)">
            <summary>
            Determines whether the pluggable assembly in the collection.
            </summary>
            <param name="name">The pluggable assembly name.</param>
            <returns>return true if the assembly exists in the collection.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.Clear">
            <summary>
            Clear all pluggable components from the collection
            </summary>
        </member>
        <member name="P:qshine.Configuration.PluggableComponentCollection.Item(System.String)">
            <summary>
            Get pluggable assembly by name
            </summary>
            <param name="name">The pluggable assembly name.</param>
            <returns>Returns a pluggable assembly by name. Or, returns null if the assembly not found.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddTransien``2(System.String)">
            <summary>
            Register a given interface type with its implementation class.
            </summary>
            <typeparam name="IT">Interface type</typeparam>
            <typeparam name="T">implementation class</typeparam>
            <param name="name">service name</param>
            <returns>It returns true when the component registered sucessfully.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddTransien``2">
            <summary>
            Register a transient service
            </summary>
            <typeparam name="IT">Service interface type</typeparam>
            <typeparam name="T">Service class type</typeparam>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddTransien(System.String,System.Type,System.Type)">
            <summary>
            Register a transient service
            </summary>
            <param name="name">Service name</param>
            <param name="interfaceType">Service interface type</param>
            <param name="implementationType">Service implementation class type</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddSingleton``2(System.String)">
            <summary>
            Register a signleton service
            </summary>
            <typeparam name="IT">Interface type</typeparam>
            <typeparam name="T">implementation class</typeparam>
            <param name="name">service name</param>
            <returns>It returns true when the component registered sucessfully.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddSingleton``2">
            <summary>
            Register a signleton service
            </summary>
            <typeparam name="IT">Service interface type</typeparam>
            <typeparam name="T">Service class type</typeparam>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddSingleton(System.String,System.Type,System.Type)">
            <summary>
            Register a signleton service
            </summary>
            <param name="name">Service name</param>
            <param name="interfaceType">Service interface type</param>
            <param name="implementationType">Service implementation class type</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddService``2(System.String,qshine.IocInstanceScope,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Register a service component
            </summary>
            <typeparam name="IT">Service interface type</typeparam>
            <typeparam name="T">Service class type</typeparam>
            <param name="name">name of the component</param>
            <param name="scope">component lifetime scope</param>
            <param name="args">service component constructor arguments</param>
            <returns>It returns true when the component registered sucessfully.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.AddService(System.String,System.Type,System.Type,qshine.IocInstanceScope,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Register a service component
            </summary>
            <param name="interfaceType">Service interface type</param>
            <param name="classType">Service component class type</param>
            <param name="name">name of the component</param>
            <param name="scope">component lifetime scope</param>
            <param name="args">service component constructor arguments</param>
            <returns>It returns true when the component registered sucessfully.</returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.GetServices``1">
            <summary>
            Get all valid services from pluggable component collection
            </summary>
            <typeparam name="T">Type of component interface</typeparam>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a collection of a specified type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.Configuration.PluggableComponentCollection.GetAutoName(System.String)">
            <summary>
            Generate a key name automatimatically.
            </summary>
            <param name="baseName"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.Setting.NamedKeyValueElementCollection">
            <summary>
            Key value element collection.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.NamedKeyValueElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get element key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedKeyValueElementCollection.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedKeyValueElementCollection.Default">
            <summary>
            Gets the default property.
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.ComponentElement">
            <summary>
            Component configuration element
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.ComponentElement.InterfaceType">
            <summary>
            Gets or sets the type of the interface.
            </summary>
            <value>The type of the interface.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.ComponentElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.ComponentElement.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.ComponentElement.Parameters">
            <summary>
            Gets the parameters collection.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.ComponentElement.Default">
            <summary>
            Get the default property
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.ComponentElementCollection">
            <summary>
            Component element collection
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ComponentElementCollection.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.ConfigurationElementCollection`1">
            <summary>
            Configuration element collection.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.#ctor">
            <summary>
            default construct for none-named element collection
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.#ctor(System.String)">
            <summary>
            constructor for named element collection
            </summary>
            <param name="name">Element name</param>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.CollectionProperty(System.String)">
            <summary>
            Get collection property value
            </summary>
            <param name="name">attribute name</param>
            <returns></returns>
        </member>
        <member name="P:qshine.Configuration.Setting.ConfigurationElementCollection`1.Item(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="P:qshine.Configuration.Setting.ConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets/Sets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.IndexOf(`0)">
            <summary>
            Retrieve the index of the configuration element
            </summary>
            <param name="element">selected configuration element</param>
            <returns>The index of the specified element</returns>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:qshine.Configuration.Setting.ConfigurationElementCollection`1.CollectionType">
            <summary>
            Specifies the type of a <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>object.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.ConfigurationElementCollection`1.ElementName">
            <summary>
            override the element name
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.GetEnumerator">
            <summary>
            implement the Enumerator interface
            </summary>
            <returns>return a list</returns>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:qshine.Configuration.Setting.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:qshine.Configuration.Setting.EnvironmentElement">
            <summary>
            Application environment element.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.EnvironmentElement.Path">
            <summary>
            Gets or sets the config.
            </summary>
            <value>The config.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.EnvironmentElement.Bin">
            <summary>
            Gets or sets the bin.
            </summary>
            <value>The bin.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.EnvironmentElement.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:qshine.Configuration.Setting.EnvironmentElementCollection">
            <summary>
            application environment element collection.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.EnvironmentElementCollection.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.KeyValueElement">
            <summary>
            Key valye element
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.KeyValueElement.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:qshine.Configuration.Setting.KeyValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:qshine.Configuration.Setting.KeyValueElementCollection`1">
            <summary>
            Key value element collection.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.KeyValueElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Ctro.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Configuration.Setting.ModuleElementCollection">
            <summary>
            Module element collection
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ModuleElementCollection.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> where the name is the key to a collection.
            </summary>
        </member>
        <member name="F:qshine.Configuration.Setting.NamedConfigurationElement.nameProperty">
            <summary>
            Name of the property that holds the name of <see cref="T:qshine.Configuration.Setting.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:qshine.Configuration.Setting.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:qshine.Configuration.Setting.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="T:qshine.Configuration.Setting.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:qshine.Configuration.Setting.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:qshine.Configuration.Setting.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="M:qshine.Configuration.Setting.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:qshine.Configuration.Setting.NamedTypeElement">
            <summary>
            Named type element
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedTypeElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:qshine.Configuration.Setting.NamedValueElement">
            <summary>
            name/value/type pair configuration element
            
            <![CDATA[
            	&lt;add name="abc" value="xyz" type="o.b.c" /&gt;
            ]]>
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedValueElement.Value">
            <summary>
            Define a value attribute for a named element <see cref="T:qshine.Configuration.Setting.NamedValueElement"/>.
            </summary>
        </member>
        <member name="P:qshine.Configuration.Setting.NamedValueElement.Type">
            <summary>
            Define a type attribute for a named element <see cref="T:qshine.Configuration.Setting.NamedValueElement"/>.
            </summary>
        </member>
        <member name="T:qshine.Configuration.Setting.ParameterElementCollection">
            <summary>
            Parameter element collection.
            <parameter name="name1" value="value1" type="type1"/>
            
            </summary>
        </member>
        <member name="M:qshine.Configuration.Setting.ParameterElementCollection.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="T:qshine.Configuration.EnvironmentConfigure">
            <summary>
            Plugable environment configure class
            </summary>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.Clear">
            <summary>
            Clear all configure setting
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.AppSettings">
            <summary>
            Get/Set Application setting key/value pair
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.ConfigureFolders">
            <summary>
            Get/Set configure folders.
            The configure folders contains all configure files and plugable components to be used by the application.
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.ConfigFiles">
            <summary>
            named configuration files found in Configuration folders.
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.AssemblyFolders">
            <summary>
            Get/Set plugable components binary assembly folder.
            The folders contain all assemblies to be loaded by configure files.
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.Environments">
            <summary>
            Get/Set named environment configures.
            Each environment target to one specific application setting. Such as DEV, QA, UA
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.Components">
            <summary>
            Get/Set named components configure
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.Modules">
            <summary>
            Get/Set named modules configure
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.Maps">
            <summary>
            Get/Set named maps configure
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.ConnectionStrings">
            <summary>
            Get/Set Connection strings
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentConfigure.BuildErrorHandler">
            <summary>
            Get/Set ApplicationEnvironment build error and warning handler.
            As default, all build error will be ignored and error will be logged through default Logger.
            
            The Builder error and warning handler take two arguments:
                arg1 - error or warning code
                arg2 - error message.
            </summary>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.AddEnvironment(qshine.Configuration.Setting.EnvironmentElement,System.Boolean)">
            <summary>
            Adds named environment setting.
            </summary>
            <returns>The environment.</returns>
            <param name="environment">Environment element.</param>
            <param name="overLoad">allow overload setting if set it to <c>true</c>. Otherwise, keep previous named one</param>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.AddComponent(qshine.Configuration.Setting.ComponentElement,System.Boolean)">
            <summary>
            Adds the component.
            </summary>
            <returns>The component.</returns>
            <param name="component">Component.</param>
            <param name="overWrite">If set to <c>true</c> overwrite exists component.</param>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.AddModule(qshine.PluggableComponent,System.Boolean)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="module">Module.</param>
            <param name="overWrite">If set to <c>true</c> overwrite existing module.</param>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.AddConnectionString(qshine.Configuration.ConnectionStringElement,System.Boolean)">
            <summary>
            Add or replace connection string element
            </summary>
            <param name="c">connection string element</param>
            <param name="overWrite">overwrite existing connection string if set to <c>true</c></param>
        </member>
        <member name="M:qshine.Configuration.EnvironmentConfigure.AddMap(System.String,System.String,qshine.Configuration.Setting.KeyValueElement,System.Boolean)">
            <summary>
            Adds the map.
            </summary>
            <returns>The map.</returns>
            <param name="name">map collection name</param>
            <param name="defaultKey">default map key within a map collection</param>
            <param name="map">key/value map.</param>
            <param name="overWrite">If set to <c>true</c> overwrite existing module.</param>
        </member>
        <member name="T:qshine.Configuration.EnvironmentSection">
            <summary>
            configuration environment section
            </summary>
        </member>
        <member name="F:qshine.Configuration.EnvironmentSection.EnvironmentsAttributeName">
            <summary>
            environment attribute name
            </summary>
        </member>
        <member name="F:qshine.Configuration.EnvironmentSection.ComponentsAttributeName">
            <summary>
            component attribute name
            </summary>
        </member>
        <member name="F:qshine.Configuration.EnvironmentSection.ModulesAttributeName">
            <summary>
            module attribute name
            </summary>
        </member>
        <member name="F:qshine.Configuration.EnvironmentSection.AppSettingsAttributeName">
            <summary>
            appsetting attribute name
            </summary>
        </member>
        <member name="F:qshine.Configuration.EnvironmentSection.MapsAttributeName">
            <summary>
            map attribute name
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentSection.Environments">
            <summary>
            Get the environment collection
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentSection.Components">
            <summary>
            Gets the component collection
            </summary>
            <value>The components.</value>
        </member>
        <member name="P:qshine.Configuration.EnvironmentSection.Modules">
            <summary>
            Get the module collection
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentSection.AppSettings">
            <summary>
            Get the appsetting collection
            </summary>
        </member>
        <member name="P:qshine.Configuration.EnvironmentSection.Maps">
            <summary>
            Get the map collection
            </summary>
        </member>
        <member name="T:qshine.Configuration.NamedValue">
            <summary>
            Named value.
            </summary>
        </member>
        <member name="P:qshine.Configuration.NamedValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:qshine.Configuration.NamedValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:qshine.EnvironmentInitializationOption">
            <summary>
            Options for ApplicationEnvironment initialization
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.OverwriteConnectionString">
            <summary>
            Option to overwrite named connection string from later loaded configure file.
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.OverwriteAppSetting">
            <summary>
            Option to overwrite key/value pair from later loaded configure file.
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.OverwriteComponent">
            <summary>
            Option to overwrite later loaded named component
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.OverwriteModule">
            <summary>
            Option to overwrite later loaded named module
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.OverwriteMap">
            <summary>
            Option to overwrite later loaded named maps
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.ThrowException">
            <summary>
            Option to throw exception for any error. 
            If the option is not set, only fatal error will be thrown. 
            The non-fatal error will be hold in property InnerException.
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.Logger">
            <summary>
            Specifies a new Logger.
            The default logger instance for load application configure
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.IsCandidateAssembly">
            <summary>
            Specifies a custom function used to find the candidate assemblies.
            The unwanted pluggable assemblies should be filtered out. 
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.RuntimeComponents">
            <summary>
            Specifies a system run-time assemblies get from current application.
            As default, the RuntimeComponents will be get from AppDomain. For many reasons, those components may not be able to load from AppDomain.
            In this case, the application need manually load them into this property before build the ApplicationEnvironment.
            </summary>
        </member>
        <member name="P:qshine.EnvironmentInitializationOption.InnerException">
            <summary>
            Hold non-fatal exceptions occurred during application environment initialization.
            The application can ignore those invalid plug-in components. 
            Try to set ThrowException option to true if the application want to throw exception for any error.
            </summary>
        </member>
        <member name="T:qshine.ContextStoreType">
            <summary>
            Context store type
            </summary>
        </member>
        <member name="F:qshine.ContextStoreType.Static">
            <summary>
            Static context across entire application.
            It is same as static variable
            </summary>
        </member>
        <member name="F:qshine.ContextStoreType.ThreadLocal">
            <summary>
            Local thread static context within same thread.
            Each thread maintain its own context.
            It is same as ThreadStatic variable.
            </summary>
        </member>
        <member name="F:qshine.ContextStoreType.CallContext">
            <summary>
            Call static context within same call execution path through its child threads.
            The context value set in parent thread will be shared by child thread.
            
            </summary>
        </member>
        <member name="T:qshine.StaticContextStore">
            <summary>
            Wrap a static key/valye pair
            This context shared data globally.
            </summary>
        </member>
        <member name="M:qshine.StaticContextStore.GetData(System.String)">
            <summary>
            Gets the context data.
            </summary>
            <returns>The data.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.StaticContextStore.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:qshine.StaticContextStore.FreeData(System.String)">
            <summary>
            Frees the data.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:qshine.StaticContextStore.ContextType">
            <summary>
            Gets the name of the context type.
            </summary>
            <value>The name of the context type.</value>
        </member>
        <member name="T:qshine.CommonDbDataTypeMapper">
            <summary>
            Common database data type mapper
            </summary>
        </member>
        <member name="P:qshine.CommonDbDataTypeMapper.SupportedProviderNames">
            <summary>
            Common database data type mapper for all database provider.
            This name could be a wildcard (*) or a supportted database provider name.
            </summary>
        </member>
        <member name="M:qshine.CommonDbDataTypeMapper.MapToNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map common Db parameter type and value to a database specific native type and value
            </summary>
            <param name="common">common db parameter</param>
            <param name="native">native parameter</param>
        </member>
        <member name="M:qshine.CommonDbDataTypeMapper.MapFromNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map supported provider specific native dbtype and value to common data type and value.
            </summary>
            <param name="native">native parameter</param>
            <param name="common">common parameter</param>
            <returns>returns true if the parameter get mapped.</returns>
        </member>
        <member name="T:qshine.ConditionalSql">
            <summary>
            Define a conditional sql statement to be executed based on other selection sql result
            </summary>
            <example>
            var conditionalSql = new ConditionalSql {
                Sql = "create sequence A",
                ConditionSql = "select 1 from user_sequence where sequence_name = 'A'",
                Condition = (result) => result!="1"
            };
            dbClient.Sql(conditionalSql);
            
            It will create a sequence A if it doesn't exist.
            
            </example>
        </member>
        <member name="M:qshine.ConditionalSql.#ctor(System.String)">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:qshine.ConditionalSql.#ctor(System.String,qshine.DbParameters)">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:qshine.ConditionalSql.#ctor(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
            <param name="conditionalSql"></param>
            <param name="condition"></param>
        </member>
        <member name="M:qshine.ConditionalSql.#ctor(qshine.DbSqlStatement,qshine.DbSqlStatement,System.Func{System.String,System.Boolean})">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
            <param name="conditionalSql"></param>
            <param name="condition"></param>
        </member>
        <member name="M:qshine.ConditionalSql.#ctor(System.Collections.Generic.List{qshine.DbSqlStatement},qshine.DbSqlStatement,System.Func{System.String,System.Boolean})">
            <summary>
            Ctro.
            </summary>
            <param name="sqls"></param>
            <param name="conditionalSql"></param>
            <param name="condition"></param>
        </member>
        <member name="P:qshine.ConditionalSql.Sqls">
            <summary>
            Execution Sql
            </summary>
        </member>
        <member name="P:qshine.ConditionalSql.ConditionSql">
            <summary>
            Single result selection SQL statement. 
            The result will be used to determine whether a Sql to be executed.
            </summary>
        </member>
        <member name="P:qshine.ConditionalSql.Condition">
            <summary>
            A condition to be evaluated to against ConditionalSql result.
            </summary>
        </member>
        <member name="T:qshine.DbSqlStatement">
            <summary>
            Sql statement
            </summary>
        </member>
        <member name="M:qshine.DbSqlStatement.#ctor(System.String)">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:qshine.DbSqlStatement.#ctor(System.String,qshine.DbParameters)">
            <summary>
            Ctro.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:qshine.DbSqlStatement.#ctor(System.Data.CommandType,System.String,qshine.DbParameters)">
            <summary>
            Ctro.
            </summary>
            <param name="commandType"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:qshine.DbSqlStatement.CommandType">
            <summary>
            Statement command type
            </summary>
        </member>
        <member name="P:qshine.DbSqlStatement.Sql">
            <summary>
            Sql statement or store procedure/function
            </summary>
        </member>
        <member name="P:qshine.DbSqlStatement.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:qshine.DbSqlStatement.Result">
            <summary>
            Statement result
            </summary>
        </member>
        <member name="T:qshine.IDbTypeMapper">
            <summary>
            Database type mapper interface
            </summary>
        </member>
        <member name="P:qshine.IDbTypeMapper.SupportedProviderNames">
            <summary>
            List all supportted database provider names. 
            Using wildcard to match partail provider name.(*)
            </summary>
        </member>
        <member name="M:qshine.IDbTypeMapper.MapToNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map common data type and value to supported provider specific native dbtype and value
            </summary>
            <param name="common">common parameter</param>
            <param name="native">native parameter</param>
            <returns>returns true if the parameter get mapped.</returns>
        </member>
        <member name="M:qshine.IDbTypeMapper.MapFromNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map supported provider specific native dbtype and value to common data type and value.
            </summary>
            <param name="native">native parameter</param>
            <param name="common">common parameter</param>
            <returns>returns true if the parameter get mapped.</returns>
        </member>
        <member name="T:qshine.DbTypeMapper">
            <summary>
            It provides a custom database data type mapper between C# type, common DbType and native DbType for parameterize Sql.
            User can define data type mapper if a data type behavior is not match teh default behavior.
            </summary>
        </member>
        <member name="M:qshine.DbTypeMapper.#ctor(System.String)">
            <summary>
            Construct DbTypeMapper for particualr database provider.
            Note: data mapper is provider specific. All the mapper defined for particular database provider will be combine togather.
            </summary>
            <param name="dbProviderName">common data provider name from DbProviderFactory</param>
        </member>
        <member name="M:qshine.DbTypeMapper.MapDataType(System.Type,System.Func{System.Type,System.Data.DbType})">
            <summary>
            Map a C# data type to common DbType
            </summary>
            <param name="dataType">an object data type to be mapped to DbType.</param>
            <param name="mapper">A custom map handler to convert data type to DbType </param>
        </member>
        <member name="M:qshine.DbTypeMapper.MapDataType(qshine.CommonDbParameter,System.Func{System.Type,System.Data.DbType})">
            <summary>
            Map Common DbType to native DbType from datap rovider
            </summary>
            <param name="parameter"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:qshine.Data.NoSql.NoSqlHelper">
            <summary>
            Helper class to deal with NoSql database
            See NoSQL reference:http://nosql-database.org/
            </summary>
        </member>
        <member name="T:qshine.database.SqlDDLDatabase">
            <summary>
            Database Sql DDL
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLDatabase.#ctor(qshine.Database)">
            <summary>
            Ctro.
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:qshine.database.SqlDDLDatabase.Database">
            <summary>
            Get Database property
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLDatabase.Tables">
            <summary>
            Get DDLs for table creation
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLDatabase.AddTable(qshine.database.SqlDDLTable)">
            <summary>
            Add table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.database.SqlDDLIndex">
            <summary>
            Index information
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLIndex.TableName">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLIndex.IndexName">
            <summary>
            Index Name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLIndex.IndexColumns">
            <summary>
            Comma separated column names
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLIndex.IsUnique">
            <summary>
            Indicates a unique index
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLIndex.HashCode">
            <summary>
            Get hash code of the index DDL
            </summary>
        </member>
        <member name="T:qshine.database.SqlDialectStandard">
            <summary>
            Implement Sql statement syntax provider.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.#ctor(System.String)">
            <summary>
            Construct a database standard SQL dialect.
            Other database SQL dialect could inhert from this Dialect and override the non-standard SQL statements.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.ParameterPrefix">
            <summary>
            standard named parameter prefix symbol
            </summary>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.CreateDatabase">
            <summary>
            Creates a database based on given connection string.
            </summary>
            <returns><c>true</c>, if database was created, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.DatabaseExists">
            <summary>
            Check database instance exists.
            </summary>
            <returns><c>true</c>, if database exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.CanCreate">
            <summary>
            Gets a value indicating whether a database can be created.
            Some database only can be created by DBA.
            </summary>
            <value><c>true</c> if can create; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.AutoUniqueIndex">
            <summary>
            Indicates an unique index created automatically if the column has unique constraint
            </summary>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.EnableOutlineCheckConstraint">
            <summary>
            Indicates whether an outline check constraint used for table column creation.
            If it is enabled the actual CHECK constraint need be implemented in TableCreateAdditionSqls()
            </summary>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.EnableInlineFKConstraint">
            <summary>
            Indicates whether an inline Foreign key reference constraint used for table column creation.
            If it is enabled the actual FK constraint need be implemented in TableInlineConstraintClause
            </summary>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.EnableInlineUniqueConstraint">
            <summary>
            Indicates whether an inline Unique key constraint used for table column creation.
            If it is enabled the column Unique Key constraint need be implemented in TableInlineConstraintClause
            </summary>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.EnableDefaultConstraint">
            <summary>
            Indicates whether a constraint name used for table column default value.
            If it is enabled a default value constraint name will be added in column default clause.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableExistSql(System.String)">
            <summary>
            Get a SQL statement to check table exists.
            </summary>
            <param name="tableName">table name</param>
            <returns></returns>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.ColumnAutoIncrementKeyword">
            <summary>
            Get a keyword to set Auto-increment column
            </summary>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnDefaultKeyword(System.String)">
            <summary>
            Get a keyword to set column default value
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnReferenceKeyword(qshine.database.SqlDDLColumn)">
            <summary>
            Get a keyword from column for Foreign key references.
            </summary>
            <param name="reference">format of column reference constraint.
            The format could be:
                otherTableName:Column.
            or 
                otherTableName(column)
            or
                references otherTableName(column)
            </param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableRenameClause(System.String,System.String)">
            <summary>
            Get a SQL clause to rename a table 
            </summary>
            <param name="oldTableName">table name to be changed</param>
            <param name="newTableName">new table name</param>
            <returns>return rename table statement ex:"rename table [oldtable] to [newtable]"</returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRenameClause(System.String,System.String,System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a sql clause to rename a column and set new column definition
            </summary>
            <param name="tableName">table name</param>
            <param name="oldColumnName">old column name</param>
            <param name="newColumnName">column definition</param>
            <param name="column">column information. Not use in base class.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a sql clause to add a new column
            </summary>
            <param name="tableName">table name</param>
            <param name="column">column definition</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnChangeTypeClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a sql clause to change column data type
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddPKClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get column PK creation clause
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemovePKClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get column PK remove clause
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddUniqueClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get column unique adding clause
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveUniqueClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a list of DDL statements to remove column unique key.
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddIndexClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a conditional sql to add column index
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveIndexClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a consitional sql to remove column index
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddReferenceClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get conditional sql to create a column FK
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveReferenceClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get a conditional sql to remove column FK
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.InlineFKConstraint(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get inline FK constraint sql
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.InlineUniqueConstraint(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get inline column unique key constraint sql.
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddConstraintClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get conditional sql to create column constraint
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveConstraintClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get conditional sql to remove column constraint
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnNotNullClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get sql to add column value not null constraint
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnNullClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get sql to set column value nullable
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnModifyDefaultClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get sql to set column default value
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddDefaultClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get sql to set column default value
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveDefaultClause(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get sql to remove column default value
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnAddAutoIncrementClauses(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get conditional sqls to set column auto-increment
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnRemoveAutoIncrementClauses(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get conditional sqls to remove column auto-increment
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.CreateIndexClause(qshine.database.SqlDDLIndex)">
            <summary>
            Get create index sql statement
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ToNativeValue(System.Object)">
            <summary>
            Convert an object value to database native literals.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ToNativeDBType(System.String,System.Int32,System.Int32)">
            <summary>
            Transfer C# DbType to native database column type name.
            </summary>
            <param name="dbType">DbType name</param>
            <param name="size">size of character or number precision (total number of digits)</param>
            <param name="scale">number scale (digits to the right of the decimal point)</param>
            <returns>Native database column type name.</returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ToSqlCondition(System.String,System.String,System.Object)">
            <summary>
            Make sql condition clause
            </summary>
            <param name="columnName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableCreateSqls(qshine.database.SqlDDLTable)">
            <summary>
            Create a new table schema
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableInlineConstraintClause(qshine.database.SqlDDLTable)">
            <summary>
            Add table creation inline constraint clauses in the end of table creation section
            </summary>
            <param name="table"></param>
            <returns>inline constraints </returns>
            <remarks>It is useful to add additional statements in end of table creation sql statement</remarks>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableCreateAdditionSqls(qshine.database.SqlDDLTable)">
            <summary>
            Add additional sql statements after table creation statement
            </summary>
            <param name="table"></param>
            <returns>Return additional sqls for table creation</returns>
            <remarks>
            It is useful to create a trigger for oracle PK column auto_increment and others
            </remarks>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.TableUpdateSqls(qshine.database.SqlDDLTable)">
            <summary>
            Get table update statement.
            </summary>
            <returns>table update statement</returns>
            <param name="table">Table.</param>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.GetPKConstraintName(System.String,System.String)">
            <summary>
            Get PK constraint name
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.FormatCommandSqlLine(System.String,System.Object[])">
            <summary>
            Format sql command
            </summary>
            <param name="format"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ColumnDefinition(qshine.database.SqlDDLColumn)">
            <summary>
            Build column definition statement
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.ToNativeDBType(System.Data.DbType,System.Int32,System.Int32)">
            <summary>
            Transfer C# DbType to native database column type name.
            </summary>
            <param name="dbType">DbType name</param>
            <param name="size">size of character or number precision (total number of digits)</param>
            <param name="scale">number scale (digits to the right of the decimal point)</param>
            <returns>Native database column type name.</returns>
        </member>
        <member name="P:qshine.database.SqlDialectStandard.LastErrorMessage">
            <summary>
            Get last non faltal error message
            </summary>
        </member>
        <member name="M:qshine.database.SqlDialectStandard.AnalyseTableChange(qshine.database.SqlDDLTable,qshine.database.TrackingTable)">
            <summary>
            Analyse the table structure and get table and column modified information
            </summary>
            <returns>true, if the table structure changed</returns>
            <param name="table">Table structure.</param>
            <param name="trackingTable">Tracking table information.</param>
        </member>
        <member name="T:qshine.database.TrackingName">
            <summary>
            Tracking table name change class.
            </summary>
        </member>
        <member name="P:qshine.database.TrackingName.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:qshine.database.TrackingName.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:qshine.database.TrackingName.ObjectType">
            <summary>
            Gets or sets the type of database object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:qshine.database.TrackingName.ObjectId">
            <summary>
            Gets or sets the id of the object.
            </summary>
            <value>The Id of the object.</value>
        </member>
        <member name="P:qshine.database.TrackingName.ObjectName">
            <summary>
            Gets or sets the name of the object.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:qshine.database.TrackingName.HashCode">
            <summary>
            Gets or sets the hash code.
            </summary>
            <value>The hash code.</value>
        </member>
        <member name="P:qshine.database.TrackingName.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:qshine.database.TrackingName.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>The created on.</value>
        </member>
        <member name="T:qshine.database.ISqlDialect">
            <summary>
            Native database SQL dialect interface
            </summary>
        </member>
        <member name="M:qshine.database.ISqlDialect.DatabaseExists">
            <summary>
            Check database instance exists.
            </summary>
            <returns><c>true</c>, if database exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:qshine.database.ISqlDialect.CreateDatabase">
            <summary>
            Creates a database based on given connection string.
            </summary>
            <returns><c>true</c>, if database was created, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:qshine.database.ISqlDialect.TableExistSql(System.String)">
            <summary>
            Get a SQL statement to check table exists.
            </summary>
            <param name="tableName">table name</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.ISqlDialect.TableRenameClause(System.String,System.String)">
            <summary>
            Get a SQL statement to rename a table 
            </summary>
            <param name="oldTableName">table name to be changed</param>
            <param name="newTableName">new table name</param>
            <returns>return rename table statement ex:"rename table [oldtable] to [newtable]"</returns>
        </member>
        <member name="M:qshine.database.ISqlDialect.TableCreateSqls(qshine.database.SqlDDLTable)">
            <summary>
            Get Sql statements to create a new table.
            It is a collection of sql commands
            </summary>
            <returns>Get table creation statement</returns>
            <param name="table">Table.</param>
            <example>
            CREATE TABLE {
                C1 VARCHAR2(20) NOT NULL UNIQUE PRIMARY KEY,
                C2 NUMBER
            };
            ...
            </example>
        </member>
        <member name="M:qshine.database.ISqlDialect.AnalyseTableChange(qshine.database.SqlDDLTable,qshine.database.TrackingTable)">
            <summary>
            Analyse the table structure and get table and column modified information.
            The TableUpdateSql is based on analysis result.
            </summary>
            <returns>true, if the table structure changed</returns>
            <param name="table">Table structure.</param>
            <param name="trackingTable">Tracking table information.</param>
            <remarks>This method will update the SqlDDLTable "table" status.</remarks>
        </member>
        <member name="M:qshine.database.ISqlDialect.TableUpdateSqls(qshine.database.SqlDDLTable)">
            <summary>
            Get Sql statements for table structure update.
            Sql statement is based on table change analysis result. 
            Call AnalyseTableChange() before perform TableUpdateSql.
            </summary>
            <returns>table update statement</returns>
            <param name="table">Table.</param>
        </member>
        <member name="P:qshine.database.ISqlDialect.CanCreate">
            <summary>
            Gets a value indicating whether a database can be created.
            Some database only can be created by DBA.
            </summary>
            <value><c>true</c> if can create; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.database.ISqlDialect.ParameterPrefix">
            <summary>
            Get named parameter prefix symbol. 
            Standard SQL use "@" as parameter prefix in SQL statement. Ex: select * from t1 where id=@p1.
            </summary>
        </member>
        <member name="P:qshine.database.ISqlDialect.AutoUniqueIndex">
            <summary>
            Indicates an unique index created automatically if the column has unique constraint
            </summary>
        </member>
        <member name="P:qshine.database.ISqlDialect.EnableOutlineCheckConstraint">
            <summary>
            Indicates using outline constraints instead of inline column constraint 
            </summary>
        </member>
        <member name="M:qshine.database.ISqlDialect.ToNativeDBType(System.String,System.Int32,System.Int32)">
            <summary>
            Transfer C# DbType string to native database column type name.
            </summary>
            <param name="dbType"></param>
            <param name="size">size of character or number precision (total number of digits)</param>
            <param name="scale">number scale (digits to the right of the decimal point)</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.ISqlDialect.ToSqlCondition(System.String,System.String,System.Object)">
            <summary>
            Get Sql condition 
            </summary>
            <param name="columnName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:qshine.database.ISqlDialect.LastErrorMessage">
            <summary>
            Gets the last error message.
            </summary>
            <value>The last error message.</value>
        </member>
        <member name="T:qshine.database.ISqlDialectProvider">
            <summary>
            Native Sql database interface
            </summary>
        </member>
        <member name="M:qshine.database.ISqlDialectProvider.GetSqlDialect(System.String)">
            <summary>
            Gets the database SQL Dialect instance.
            </summary>
            <returns>The instance of SqlDialect.</returns>
            <param name="connectionString">Db connection string.</param>
        </member>
        <member name="T:qshine.database.SqlDDLBuilder">
            <summary>
            Sql database structure management class.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.#ctor(qshine.database.SqlDDLDatabase,qshine.database.ISqlDialectProvider)">
            <summary>
            Create a new SqlDDLBuilder instance for given database using specific sql dialect provider
            </summary>
            <param name="database">Specifies a database instance to be built</param>
            <param name="sqlDialectProvider">Specifies a SQL dialect provider</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.#ctor(System.String)">
            <summary>
            Create a new SqlDDLBuilder instance for given database connection (configure name) using default sql dialect provider
            </summary>
            <param name="connectionStringName">Specifies a database connection string configure name. 
            The configed database connectionstring contains DB provider name and connection string.</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.#ctor(qshine.Database)">
            <summary>
            Create a new SqlDDLBuilder instance for given database using default sql dialect provider
            </summary>
            <param name="database">Database connection and provider</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:qshine.database.SqlDDLBuilder.Database">
            <summary>
            Sql DDL Database
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLBuilder.ConnectionStringName">
            <summary>
            Gets database connection string.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:qshine.database.SqlDDLBuilder.TrackingTable">
            <summary>
            Get tracking table
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.Build(qshine.Specification.Validator,System.Boolean)">
            <summary>
            Build database instance from registered tables.
            The builder will analyze the table structure to generate and perform table structure DDL statements.
            </summary>
            <returns>It returns true if database build sucessfully. Otherwise, it returns false with LastErrorMessage.
            A full action log will be generated in Log information level through Log configuration.
            </returns>
            <param name="validator">Validator to hold error messages</param>
            <param name="createNewDatabase">Indicates whether a new database should be created. If the flag is true it will only create new database if the given database is not existing.</param>
        </member>
        <member name="P:qshine.database.SqlDDLBuilder.DBClient">
            <summary>
            Get database client instance for database access.
            DBClient access database through .NET ADO.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.TryUpdateTable(qshine.database.SqlDDLTable)">
            <summary>
            Try to update table structure if it has any change.
            </summary>
            <param name="table">Table.</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.RenameAndUpdateTable(qshine.database.SqlDDLTable,qshine.database.TrackingTable)">
            <summary>
            Rename and update table structure if it has any change.
            </summary>
            <param name="table">Table.</param>
            <param name="trackingTable">The table tracking information</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.RenameTableName(System.String,System.String)">
            <summary>
            Renames the name of the table.
            </summary>
            <param name="oldTableName">Old table name.</param>
            <param name="newTableName">New table name.</param>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.CreateTable(qshine.database.SqlDDLTable)">
            <summary>
            Create a table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLBuilder.UpdateTable(qshine.database.SqlDDLTable,qshine.database.TrackingTable)">
            <summary>
            Update table schema
            </summary>
            <param name="table">table definition</param>
            <param name="trackingTable">tracking table information</param>
            <returns></returns>
        </member>
        <member name="T:qshine.database.SqlReservedWord">
            <summary>
            Sql reserved keyword.
            </summary>
        </member>
        <member name="M:qshine.database.SqlReservedWord.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="P:qshine.database.SqlReservedWord.SysDate">
            <summary>
            Get current date
            </summary>
        </member>
        <member name="P:qshine.database.SqlReservedWord.IsSysDate">
            <summary>
            Is sysdate
            </summary>
        </member>
        <member name="M:qshine.database.SqlReservedWord.ToString">
            <summary>
            Get a internal reserved keyword statement.
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.database.SqlDDL">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.database.SqlDDLColumn">
            <summary>
            Table column structure.
            </summary>
            <remarks>
            A column unique internal id will be created to identify each column in the table.
            The column internal id is the column sequence number start from 1.
            To keep Table structure consistency each column order should not be changed after it created if the table column use auto internal id.
            Otherwise, explictly define an internal id for each column.
            
            </remarks>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Table">
            <summary>
            Table instance
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLColumn.#ctor(System.String)">
            <summary>
            Ctro.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Name">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.DbType">
            <summary>
            column data type
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Size">
            <summary>
            Number precision or characters size
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Scale">
            <summary>
            Number scale
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.DefaultValue">
            <summary>
            Defines column default value
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.AllowNull">
            <summary>
            Indicates a null or not null constraint
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Comments">
            <summary>
            Column comments
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Reference">
            <summary>
            Indicates a column foreign key reference constraint 
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLColumn.ToReferenceClause">
            <summary>
            Get FK sql clause
            </summary>
            <returns></returns>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsUnique">
            <summary>
            INdicates a unique constraint column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsPK">
            <summary>
            Indicates a PK column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.CheckConstraint">
            <summary>
            Column check constraint attribute
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.AutoIncrease">
            <summary>
            Indicates a auto increment id. It is usually for PK column.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsIndex">
            <summary>
            Indicates an auto index column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.Version">
            <summary>
            Increase version number if any column attribute changed
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.InternalId">
            <summary>
            Internal column id to tracking column uniqueness.
            It can be generated automatically if no column removed and new column added sequentially.
            Assign a unique unmber explictly if you need remove column or re-order the column in table structure.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.HashCode">
            <summary>
            A hash code to identify column data
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.ColumnNameHistory">
            <summary>
            Get column name change history
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.PreviousColumn">
            <summary>
            Previous column information from tracking column table.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsDirty">
            <summary>
            The Column attribute changed.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsReferenceChanged">
            <summary>
            Indicates FK changed (added or removed)
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.IsNew">
            <summary>
            Indicates a new column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedModifyType">
            <summary>
            Need issue a column type change sql
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRename">
            <summary>
            Need issue a sql to rename the column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddAutoIncrease">
            <summary>
            Need issue a sql to add column auto-increasement
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveAutoIncrease">
            <summary>
            Need issue a sql to remove column auto-increasement
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddIndex">
            <summary>
            Need issue a sql to add an index
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveIndex">
            <summary>
            Need issue a sql to remove an index
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddUnique">
            <summary>
            Need issue a sql to add unique key
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveUnique">
            <summary>
            Need issue a sql to remove unique key
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddPK">
            <summary>
            Need issue a sql to add PK.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemovePK">
            <summary>
            Need issue a sql to remove a PK.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveDefault">
            <summary>
            Need issue a sql to remove default value
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddDefault">
            <summary>
            Need issue a sql to add default value.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedModifyDefault">
            <summary>
            Need issue a sql to modify default value.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedNull">
            <summary>
            Need issue a nullable column sql
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedNotNull">
            <summary>
            Need issue a sql to set column not null constraint.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveConstraint">
            <summary>
            Need issue a sql to remove the column constraint.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddConstraint">
            <summary>
            Need issue a sql to add column constraint.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedModifyConstraint">
            <summary>
            Need issue a sql to modify constraint.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedRemoveReference">
            <summary>
            Need issue a sql to remove Fk.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedAddReference">
            <summary>
            Need issue a sql to add FK.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.NeedModifyReference">
            <summary>
            Need issue a sql to modify FK.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLColumn.TempColumnName">
            <summary>
            Store a temp name
            </summary>
        </member>
        <member name="T:qshine.database.SqlDDLTable">
            <summary>
            Defines table structure and structure change.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLTable.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="tableName">table name.</param>
            <param name="category">table business category.</param>
            <param name="comments">table comments and description</param>
            <param name="tableSpace">table strage tablespace location name</param>
            <param name="indexTableSpace">table index storage tablespace location name</param>
            <param name="version">table version name</param>
            <param name="schemaName">table schema name</param>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddPKColumn(System.String,System.Data.DbType,System.Int32,System.Boolean,System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Adds the PK Column.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dbType">Db type.</param>
            <param name="size">Size.</param>
            <param name="defaultValue">Default value.</param>
            <param name="allowNull">If set to <c>true</c> allow null.</param>
            <param name="autoIncrease">Auto increase number. -1 means not auto increase</param>
            <param name="version">current version number</param>
            <param name="oldColumnNames">history column names</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddPKColumn(System.Int32,System.String,System.Data.DbType,System.Int32,System.Boolean,System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Adds the PK Column.
            </summary>
            <param name="internalId">internal unique column id. Use column internalId to identify column. 
            If the internal id is 0, an auto id will be created.</param>
            <param name="columnName">Column name.</param>
            <param name="dbType">Db type.</param>
            <param name="size">Size.</param>
            <param name="allowNull">If set to <c>true</c> allow null.</param>
            <param name="defaultValue">Default value.</param>
            <param name="autoIncrease">Auto increase number. -1 means not auto increase</param>
            <param name="version">current version number</param>
            <param name="oldColumnNames">history column names</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddColumn(System.String,System.Data.DbType,System.Int32,System.Int32,System.Boolean,System.Object,System.String,System.String,System.Boolean,qshine.database.SqlDDLColumn,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Add a column
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dbType">Db type.</param>
            <param name="size">Size.</param>
            <param name="scale"></param>
            <param name="allowNull">If set to <c>true</c> allow null.</param>
            <param name="defaultValue">Default value.</param>
            <param name="comments">comments</param>
            <param name="checkConstraint"></param>
            <param name="isUnique"></param>
            <param name="reference"></param>
            <param name="isIndex"></param>
            <param name="version"></param>
            <param name="isPK"></param>
            <param name="autoIncrease"></param>
            <param name="oldColumnNames"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddColumn(System.Int32,System.String,System.Data.DbType,System.Int32,System.Int32,System.Boolean,System.Object,System.String,System.String,System.Boolean,qshine.database.SqlDDLColumn,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Add a column
            </summary>
            <param name="internalId"></param>
            <param name="columnName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="scale"></param>
            <param name="allowNull"></param>
            <param name="defaultValue"></param>
            <param name="comments"></param>
            <param name="checkConstraint"></param>
            <param name="isUnique"></param>
            <param name="reference"></param>
            <param name="isIndex"></param>
            <param name="version"></param>
            <param name="isPK"></param>
            <param name="autoIncrease"></param>
            <param name="oldColumnNames"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddAuditColumn">
            <summary>
            Adds the audit columns.
            </summary>
            <returns>Current table instance.</returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddIndex(System.String,System.String,System.Boolean)">
            <summary>
            Add index for given column names. The given column name
            </summary>
            <param name="columnNames">index column names separated by comma</param>
            <param name="indexName">index name. default index name generated by system based on the column order</param>
            <param name="isUnique">Indicates a unique index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.RenameTable(System.Int64,System.String,System.Int32)">
            <summary>
            Method to indicate table rename action for specific version.
            To rename a table you must call this method to specify table internal Id, previous table name and version number.
            </summary>
            <returns>current instance</returns>
            <param name="tableId">Internal unique table Id.</param>
            <param name="oldTableName">old table name.</param>
            <param name="version">version of old table name.</param>
        </member>
        <member name="P:qshine.database.SqlDDLTable.IsTableRenamed">
            <summary>
            Indicates a table has been renamed.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddCustomSqlAfterTableCreation(qshine.DbSqlStatement,System.String)">
            <summary>
            Add additional database provider specific SQL for table creation.
            The SQL only run for a given database provider
            </summary>
            <param name="customSql">Sql statement</param>
            <param name="supportedProviderName">Comma separated supported database provider name match list.
            It could be a wildcard (*) for all service providers or a list of partial names match to service provider.
            Example,
              "*" match to all database providrs
            </param>
            <returns>This instance</returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.AddCustomSqlAfterTableUpdated(qshine.DbSqlStatement,System.String)">
            <summary>
            Add additional database provider specific SQL for table update
            The SQL only run for a given database provider
            </summary>
            <param name="customSql">Sql statement</param>
            <param name="supportedProviderName">Comma separated supported database provider name match list.</param>
            <returns>This instance</returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.SetData``1(``0,System.Object[])">
            <summary>
            Insert an record by PK value. Ignore action if the record already exists. 
            </summary>
            <typeparam name="T">PK type</typeparam>
            <param name="id">id value</param>
            <param name="records">record values</param>
            <returns>This instance</returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.GetIndexName(System.String,qshine.database.SqlDDLColumn)">
            <summary>
            Get possible index name
            </summary>
            <param name="tableName">table name</param>
            <param name="column">column</param>
            <returns>Return a column potential index name.</returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.GetForeignKeyName(System.String,System.Int32)">
            <summary>
            Get possible table column unique key name.
            </summary>
            <param name="tableName">table name</param>
            <param name="internalId">internal unique column id</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.GetCheckConstraintName(System.String,System.Int32)">
            <summary>
            Get possible table column Check constraint name.
            </summary>
            <param name="tableName">table name</param>
            <param name="internalId">internal unique column id</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.GetUniqueKeyName(System.String,System.Int32)">
            <summary>
            Get possible table column Unique constraint name.
            </summary>
            <param name="tableName">table name</param>
            <param name="internalId">internal unique column id</param>
            <returns></returns>
        </member>
        <member name="M:qshine.database.SqlDDLTable.GetDefaultConstraintName(System.String,System.Int32)">
            <summary>
            Get table constraint name
            </summary>
            <param name="tableName"></param>
            <param name="internalId"></param>
            <returns></returns>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Database">
            <summary>
            Database instance which contains all tables
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Id">
            <summary>
            Table internal unique id
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.TableSpace">
            <summary>
            Database storage tablespace name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.IndexTableSpace">
            <summary>
            Database index tablespace name
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.PkColumn">
            <summary>
            Table primary key column
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Columns">
            <summary>
            Table columns
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Indexes">
            <summary>
            Indexes of table
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Version">
            <summary>
            Table version number for each structure change
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.DataVersion">
            <summary>
            Table system data version number for each system data change.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.SchemaName">
            <summary>
            Database schema the table belong to.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Comments">
            <summary>
            Table comments
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.Category">
            <summary>
            Classify a table category for business use.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTable.HashCode">
            <summary>
            The hash code identifiy table uniqueness
            </summary>
            <returns></returns>
        </member>
        <member name="P:qshine.database.SqlDDLTable.HistoryTableNames">
            <summary>
            Define historic table name used in previous version.
            It is used to tracking table rename.
            </summary>
        </member>
        <member name="T:qshine.database.SqlDDLTracking">
            <summary>
            Tracking DDL execution
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.#ctor(qshine.database.ISqlDialect,qshine.DbClient)">
            <summary>
            Ctro.
            </summary>
            <param name="databaseSyntax"></param>
            <param name="dbClient"></param>
        </member>
        <member name="F:qshine.database.SqlDDLTracking.TrackingTableName">
            <summary>
            The name of the tracking table.
            </summary>
        </member>
        <member name="F:qshine.database.SqlDDLTracking.TrackingColumnTableName">
            <summary>
            The name of the tracking column table.
            </summary>
        </member>
        <member name="F:qshine.database.SqlDDLTracking.TrackingNameTableName">
            <summary>
            The name of the tracking name table.
            </summary>
        </member>
        <member name="P:qshine.database.SqlDDLTracking.TrackingTable">
            <summary>
            Gets the tracking table structure.
            </summary>
            <value>The tracking table.</value>
        </member>
        <member name="P:qshine.database.SqlDDLTracking.TrackingColumnTable">
            <summary>
            Gets the tracking column table structure.
            </summary>
            <value>The tracking column table.</value>
        </member>
        <member name="P:qshine.database.SqlDDLTracking.TrackingRenameTable">
            <summary>
            Tracking table name change history.
            </summary>
            <value>The tracking column table.</value>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.Load">
            <summary>
            Load table tracking information.
            </summary>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.RemoveTrackingTable(System.Int64)">
            <summary>
            Remove tracking table by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.AddToTrackingTable(qshine.database.SqlDDLTable)">
            <summary>
            Adds to tracking history.
            </summary>
            <param name="table">Table.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.UpdateTrackingTableColumns(qshine.database.TrackingTable,qshine.database.SqlDDLTable)">
            <summary>
            Updates the tracking table columns if any column structure changed.
            </summary>
            <param name="trackingTable">Tracking table.</param>
            <param name="table">the table to be updated.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.UpdateTrackingTableForTableRename(qshine.database.TrackingTable,qshine.database.SqlDDLTable)">
            <summary>
            Updates the tracking table if table name change.
            </summary>
            <param name="trackingTable">Tracking table.</param>
            <param name="table">Table.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.GetTrackingTable(System.String)">
            <summary>
            Gets the tracking table.
            </summary>
            <returns>The tracking table.</returns>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.FindSameTrackingTable(qshine.database.SqlDDLTable)">
            <summary>
            Find tracking table based on given table information.
            </summary>
            <returns>The tracking table.</returns>
            <param name="table">table.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.GetTrackingTable(System.Int64)">
            <summary>
            Gets the tracking table by internal Id.
            </summary>
            <returns>The tracking table.</returns>
            <param name="Id">Table internal Id.</param>
        </member>
        <member name="M:qshine.database.SqlDDLTracking.AddNewTrackingColumn(System.Int64,qshine.database.SqlDDLColumn)">
            <summary>
            Adds the new tracking column.
            </summary>
            <param name="tableId">Table identifier.</param>
            <param name="column">Column.</param>
        </member>
        <member name="T:qshine.database.TrackingColumn">
            <summary>
            Tracking table column.
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Id">
            <summary>
            Tracking table Id
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.InternalId">
            <summary>
            Internal column Id
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.TableId">
            <summary>
            Table Id
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Comments">
            <summary>
            Comments
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Size">
            <summary>
            Column size
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Scale">
            <summary>
            Column scale
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.DefaultValue">
            <summary>
            Column default value
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.AllowNull">
            <summary>
            Indicates column nullable
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Reference">
            <summary>
            FK
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.IsUnique">
            <summary>
            Indicates unique key column
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.IsPK">
            <summary>
            Indicates PK column
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.CheckConstraint">
            <summary>
            Column Check constraint
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.AutoIncrease">
            <summary>
            Auto increasement
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.IsIndex">
            <summary>
            Index column
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.HashCode">
            <summary>
            Hash code
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.Version">
            <summary>
            Column version
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.CreatedOn">
            <summary>
            Column created time
            </summary>
        </member>
        <member name="P:qshine.database.TrackingColumn.UpdatedOn">
            <summary>
            Column last update time 
            </summary>
        </member>
        <member name="T:qshine.database.TrackingObjectType">
            <summary>
            Database tracking object type
            </summary>
        </member>
        <member name="F:qshine.database.TrackingObjectType.Unknown">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:qshine.database.TrackingObjectType.Table">
            <summary>
            Table object
            </summary>
        </member>
        <member name="F:qshine.database.TrackingObjectType.View">
            <summary>
            View object
            </summary>
        </member>
        <member name="T:qshine.database.TrackingTable">
            <summary>
            Defines tracking table
            </summary>
        </member>
        <member name="M:qshine.database.TrackingTable.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="M:qshine.database.TrackingTable.#ctor(qshine.database.SqlDDLTable)">
            <summary>
            Ctro.
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:qshine.database.TrackingTable.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.ObjectType">
            <summary>
            Gets or sets the type of database object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.ObjectName">
            <summary>
            Gets or sets the name of the object.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.HashCode">
            <summary>
            Gets or sets the hash code.
            </summary>
            <value>The hash code.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>The created on.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.UpdatedOn">
            <summary>
            Gets or sets the updated on.
            </summary>
            <value>The updated on.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:qshine.database.TrackingTable.Columns">
            <summary>
            List of columns
            </summary>
        </member>
        <member name="T:qshine.UnitOfWorkOption">
            <summary>
            Unit of Work option,
            The option is similar as System.Transactions.TransactionScopeOption.
            </summary>
        </member>
        <member name="F:qshine.UnitOfWorkOption.Required">
            <summary>
                A transaction is required by the UoW. It uses an ambient transaction if one
                already exists. Otherwise, it creates a new transaction before entering the scope.
                This is the default value.
            </summary>
        </member>
        <member name="F:qshine.UnitOfWorkOption.RequiresNew">
            <summary>
                A new transaction is always created for the UoW.
            </summary>
        </member>
        <member name="F:qshine.UnitOfWorkOption.Suppress">
            <summary>
                The ambient transaction context is suppressed when creating the UoW. All operations
                within the UoW are done without an ambient transaction context.
            </summary>
        </member>
        <member name="T:qshine.Domain.AuditableClientEntity">
            <summary>
            Common auditable multi-tenancy entity base class
            </summary>
        </member>
        <member name="P:qshine.Domain.AuditableClientEntity.ClientId">
            <summary>
            Client Tenant Id
            </summary>
        </member>
        <member name="T:qshine.Domain.AuditableEntity">
            <summary>
            Base auditable entity class.
            The auditable entity capture audit information of the entity.
            </summary>
        </member>
        <member name="P:qshine.Domain.AuditableEntity.CreatedOn">
            <summary>
            When the entity created
            </summary>
        </member>
        <member name="P:qshine.Domain.AuditableEntity.CreatedBy">
            <summary>
            Who created entity
            </summary>
        </member>
        <member name="P:qshine.Domain.AuditableEntity.UpdatedOn">
            <summary>
            When the entity updated
            </summary>
        </member>
        <member name="P:qshine.Domain.AuditableEntity.UpdatedBy">
            <summary>
            Who updated the entity
            </summary>
        </member>
        <member name="T:qshine.Domain.Entity">
            <summary>
            Base entity class
            </summary>
        </member>
        <member name="P:qshine.Domain.Entity.Id">
            <summary>
            Global identity of the entity
            </summary>
        </member>
        <member name="T:qshine.Domain.IClientEntity">
            <summary>
            Multi-tenancy:: Client Tenant Id 
            </summary>
        </member>
        <member name="P:qshine.Domain.IClientEntity.ClientId">
            <summary>
            Client Tenant id
            </summary>
        </member>
        <member name="T:qshine.Domain.IEntity">
            <summary>
            Entity interface.
            (Usually a domain root entity with a global Id
            </summary>
        </member>
        <member name="P:qshine.Domain.IEntity.Id">
            <summary>
            Get/set entity id, hide IEntity.Id.
            </summary>
        </member>
        <member name="T:qshine.Domain.EntityIdType">
            <summary>
            Defines a common entity id type.
            The common id type could be a Guid, long, string or a complex data type.
            In a business system, each type of entity may use different type of identity.
            Use EntityIdType to adopt any type of entity Id.
            
            The class only defined two common entity id type: Guid(?) and long(?) type.
            To use other type entity you need create a derived class.
            </summary>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor">
            <summary>
            Construct a default Id.
            </summary>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor(System.Int64)">
            <summary>
            Construct a long type entity id
            </summary>
            <param name="id">entity id</param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor(System.Nullable{System.Int64})">
            <summary>
            Construct a nullable long type id
            </summary>
            <param name="id">entity id</param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor(System.Guid)">
            <summary>
            Construct a Guid type id
            </summary>
            <param name="id">entity id</param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor(System.Nullable{System.Guid})">
            <summary>
            Construct a nullable Guid id
            </summary>
            <param name="id">entity id</param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.#ctor(System.Object)">
            <summary>
            Reserved for derived class.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.GetValue``1">
            <summary>
            Get given type id value
            </summary>
        </member>
        <member name="M:qshine.Domain.EntityIdType.GetNullableValue``1">
            <summary>
            Get given nullable type id value
            </summary>
        </member>
        <member name="M:qshine.Domain.EntityIdType.op_Implicit(System.Guid)~qshine.Domain.EntityIdType">
            <summary>
            Overwrite operator assignment "=" for Guid type id
            </summary>
            <param name="value">Guid type of id to be assigned to EntityIdType instance </param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.op_Implicit(System.Int64)~qshine.Domain.EntityIdType">
            <summary>
            Overwrite operator assignment "=" for long type id
            </summary>
            <param name="value">Long type of id to be assigned to EntityIdType instance </param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.op_Implicit(System.Nullable{System.Guid})~qshine.Domain.EntityIdType">
            <summary>
            Overwrite operator assignment "=" for Guid type id
            </summary>
            <param name="value">Guid type of id to be assigned to EntityIdType instance </param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.op_Implicit(System.Nullable{System.Int64})~qshine.Domain.EntityIdType">
            <summary>
            Overwrite operator assignment "=" for long type id
            </summary>
            <param name="value">Long type of id to be assigned to EntityIdType instance </param>
        </member>
        <member name="M:qshine.Domain.EntityIdType.Equals(System.Object)">
            <summary>
            Compare ids
            </summary>
            <param name="value">A EntityIdType, Guid, Long or other id type instance to be compared.</param>
            <returns>True if two ids are identical.</returns>
        </member>
        <member name="M:qshine.Domain.EntityIdType.GetHashCode">
            <summary>
            Get hash code of the id.
            </summary>
            <returns>Entity id hash code.</returns>
        </member>
        <member name="M:qshine.Domain.EntityIdType.ToString">
            <summary>
            Get id string value;
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.EventSourcing.Aggregate">
            <summary>
            Implement abstract class of ES aggregate base class
            </summary>
        </member>
        <member name="P:qshine.EventSourcing.Aggregate.Version">
            <summary>
            Get Version
            </summary>
        </member>
        <member name="P:qshine.EventSourcing.Aggregate.EventQueue">
            <summary>
            Uncommitted events
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.Aggregate.FlushEventQueue">
            <summary>
            Returns uncommitted events in the queue and clean queued events.
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.Aggregate.RaiseEvent``1(``0)">
            <summary>
            Raise a domain event
            </summary>
            <typeparam name="TEvent">type of domain event</typeparam>
            <param name="domainEvent"></param>
        </member>
        <member name="M:qshine.EventSourcing.Aggregate.RestoreFromHistoryEvents``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Restore the aggregate object from history events
            </summary>
            <param name="events">events from ES.</param>
        </member>
        <member name="T:qshine.EventSourcing.EventStoreRepository">
            <summary>
            Event store repository
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository.#ctor(System.String,qshine.EventSourcing.IEventStore)">
            <summary>
            Construct an event store repository by aggregate name and event store.
            Pick event store from application environment setting if the event store instance is not present. 
            </summary>
            <param name="aggregateName">aggregate name. It is usually the aggregate type name.</param>
            <param name="eventStore">event store</param>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository.#ctor(System.String)">
            <summary>
             Construct an event store repository by aggregate name
            </summary>
            <param name="aggregateName">aggregate name. It is usually the aggregate type name</param>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository.#ctor">
            <summary>
            Construct a default event store repository through application environment setting.
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository.Get``1(qshine.Domain.EntityIdType)">
            <summary>
            Get an aggregate from event store by aggregate id.
            </summary>
            <param name="id">Aggregate id</param>
            <returns>new aggregate object or aggregate from repository.
            The new aggregate always have Version -1</returns>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository.Save(qshine.EventSourcing.IAggregate)">
            <summary>
            Save an aggregate to event store and publish the event
            </summary>
            <param name="aggregate">Aggregate instance</param>
        </member>
        <member name="P:qshine.EventSourcing.EventStoreRepository.EventBusName">
            <summary>
            Get/set event bus name.
            The default event bus name is ebus.EventSourcing.
            </summary>
        </member>
        <member name="T:qshine.EventSourcing.EventStoreRepository`1">
            <summary>
            Defines an aggregate type entity store repository
            </summary>
            <typeparam name="T">The aggregate type.</typeparam>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository`1.#ctor">
            <summary>
            construct default entity store repository from application environemnt setting.
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository`1.#ctor(qshine.EventSourcing.IEventStore)">
            <summary>
            construct an entity store repository by given event store.
            </summary>
            <param name="eventStore"></param>
        </member>
        <member name="M:qshine.EventSourcing.EventStoreRepository`1.Get(qshine.Domain.EntityIdType)">
            <summary>
            Get an aggregate from event store by aggregate id.
            </summary>
            <param name="id">Aggregate id</param>
            <returns>new aggregate object or aggregate from repository.
            The new aggregate always have Version -1</returns>
        </member>
        <member name="T:qshine.EventSourcing.IEventStore">
            <summary>
            Event store service interface
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.IEventStore.Save(qshine.Domain.EntityIdType,System.Collections.Generic.IEnumerable{qshine.Messaging.IDomainEvent})">
            <summary>
            Save events to event store
            </summary>
            <param name="aggregateId">Specifies an aggregate Id associates to the events</param>
            <param name="events">aggregate events</param>
        </member>
        <member name="M:qshine.EventSourcing.IEventStore.Load(qshine.Domain.EntityIdType,System.Int64)">
            <summary>
            Load events for an aggregate from event store
            </summary>
            <param name="aggregateId">Specifies an aggregate Id associates to the events</param>
            <param name="fromVersion">All events after this should be returns.
            The -1 value indicates retrieve all events for the aggregate.</param>
            <returns>Aggregate events</returns>
        </member>
        <member name="T:qshine.EventSourcing.IEventStoreProvider">
            <summary>
            event store provider
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.IEventStoreProvider.Create(System.String)">
            <summary>
            Create a event store instance for given aggregate
            </summary>
            <param name="aggregateName">aggregate name. It is usually the name of the aggregate type.
            The aggregate name can be used to select mapped event store provider by application environment setting.
            </param>
            <returns>event store instance created by the provider</returns>
        </member>
        <member name="T:qshine.EventSourcing.IAggregate">
            <summary>
            Event sourcing aggregate interface
            </summary>
        </member>
        <member name="P:qshine.EventSourcing.IAggregate.Version">
            <summary>
            Get the aggregate version.
            The aggregate version is the last version number taken from the ES or the last taken position (sequence number) from the event stream.
            The version number used to resolve conflicts for ES writing (concurrency)
            </summary>
        </member>
        <member name="P:qshine.EventSourcing.IAggregate.EventQueue">
            <summary>
            Keep a sequence of events raised after the aggregate is created (initialized or restored).
            </summary>
            <returns>list of queued events</returns>
        </member>
        <member name="M:qshine.EventSourcing.IAggregate.FlushEventQueue">
            <summary>
            Returns uncommitted events in the queue and clean queued events.
            </summary>
        </member>
        <member name="M:qshine.EventSourcing.IAggregate.RaiseEvent``1(``0)">
            <summary>
            Raise a domain event and add the event to the queue.
            When a domai nevent raised, the event will be applied (through handler) to the aggregate.
            </summary>
            <param name="domainEvent">domain event</param>
        </member>
        <member name="M:qshine.EventSourcing.IAggregate.RestoreFromHistoryEvents``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Load history events from event store and restore the aggregate.
            </summary>
            <param name="events">History events from event store</param>
        </member>
        <member name="T:qshine.MessageCode">
            <summary>
            Represents a predefined system error which contains an error code and message.
            <![CDATA[
                var code = new MessageCode("TestClass", "E");
                
                code.ToString(100)
                code.ToString(100, "This is a sample message");
                //The result will like 
                //    TestClass-E-100
                //    TestClass-E-100::This is a sample message
            
                //optional
                code.MessageFormat = (prefix, code, messageType) => { return string.Format("{0}-{1}-{2}",prefix, messageType, code);
                };
                
            ]]>
            
            
            </summary>
        </member>
        <member name="M:qshine.MessageCode.ErrorCode(System.String)">
            <summary>
            Get error code
            </summary>
            <param name="prefix">ErrorCode prefix</param>
            <returns></returns>
        </member>
        <member name="M:qshine.MessageCode.WarningCode(System.String)">
            <summary>
            Get error code
            </summary>
            <param name="prefix">code prefix</param>
            <returns></returns>
        </member>
        <member name="F:qshine.MessageCode.GlobalMessageFormat">
            <summary>
            Global message format
            </summary>
        </member>
        <member name="M:qshine.MessageCode.#ctor(System.String,System.String)">
            <summary>
            Defines a message code
            </summary>
            <param name="prefix">code prefix.</param>
            <param name="codeType">The message code type. 
            </param>
        </member>
        <member name="M:qshine.MessageCode.#ctor(System.String)">
            <summary>
            Defines a message code
            </summary>
            <param name="prefix">code prefix.</param>
        </member>
        <member name="M:qshine.MessageCode.ToString(System.String)">
            <summary>
            Output a formatted code
            </summary>
            <param name="code">message code</param>
            <returns></returns>
        </member>
        <member name="M:qshine.MessageCode.ToString(System.String,System.String)">
            <summary>
            Output cided message
            </summary>
            <param name="code">message code</param>
            <param name="message">message</param>
            <returns></returns>
        </member>
        <member name="F:qshine.MessageCode.MessageFormat">
            <summary>
            Set message format
            </summary>
        </member>
        <member name="T:qshine.Globalization.ILocalString">
            <summary>
            Local string resource storage
            </summary>
        </member>
        <member name="M:qshine.Globalization.ILocalString.GetString(System.String,System.Object[])">
            <summary>
            Get localized string
            </summary>
            <param name="format">string format in Invariant Culture (Neutral resource language)</param>
            <param name="arguments">The values to format the string with.</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Globalization.ILocalStringProvider">
            <summary>
            Provide string localization service.
            </summary>
        </member>
        <member name="M:qshine.Globalization.ILocalStringProvider.Create(System.String)">
            <summary>
            Create a named local string store.
            </summary>
            <param name="name">The name of local resource store.
            The name is used to categorize the local string resource storage.
            </param>
            <returns>Returns an instance of local string resource store.</returns>
        </member>
        <member name="T:qshine.Globalization.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.InvalidCommandBusFactory">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find a configured named command bus factory ({0}:{1})..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionProviderNotFound">
            <summary>
              Looks up a localized string similar to The IoC provider {0} is not found..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionRegisterMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying register a type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionRegisterModuleMessage">
            <summary>
              Looks up a localized string similar to IoC error occurred while trying to register a module..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionRegisterNameMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying register a type {0} with a name {1}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionRegisterSectionFirstMessage">
            <summary>
              Looks up a localized string similar to Castle Windsor configuration registration should be done earlier than  any other type registration..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionRegisterSectionMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to register types through a XML configuration section {0}. .
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionResolveAllMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve all registered type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionResolveMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.IoCExceptionResolveNamedMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve type {0} with a specific name {1}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.My_Test__0_">
            <summary>
              Looks up a localized string similar to My Test {0}.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.SectionNotFound">
            <summary>
              Looks up a localized string similar to The section {0} is not found. Check the section name and section handler type..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resources.TypeNotFound">
            <summary>
              Looks up a localized string similar to The type {0} is not found..
            </summary>
        </member>
        <member name="T:qshine.Globalization.ResourceStringProvider">
            <summary>
            Implement ILocalStringProvider interface using Resource Manager.
            
            Get localized strings from the resource file through Resource manager.
            
            </summary>
        </member>
        <member name="M:qshine.Globalization.ResourceStringProvider.#ctor">
            <summary>
            load local resource from current assembly
            </summary>
        </member>
        <member name="M:qshine.Globalization.ResourceStringProvider.#ctor(System.String)">
            <summary>
            load resource from given assembly file path.
            
            Ex:
                var provider = new ResourceStringProvider("");
            </summary>
            <param name="resourceAssemblyFile">assembly resource file</param>
        </member>
        <member name="M:qshine.Globalization.ResourceStringProvider.#ctor(System.Reflection.Assembly)">
            <summary>
            load resource from a given assembly
            </summary>
            <param name="resourceAssembly">The resource assembly</param>
        </member>
        <member name="M:qshine.Globalization.ResourceStringProvider.Create(System.String)">
            <summary>
            Get resource store by the resource name.
            The local string will search from all related resource files.
            It could be one of:
                name.resources.fr-CA.resx
                name.resources.fr.resx
                name.resources.resx
                name.fr-CA.resx
                name.fr.resx
                name.resx
                
            </summary>
            <param name="name">The name is the base name of the resource (Neutral Resources).</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Globalization.ResourceStringStore">
            <summary>
            Resource string store
            </summary>
        </member>
        <member name="M:qshine.Globalization.ResourceStringStore.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Ctor.
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.resources.resourcemanager.-ctor?view=netframework-4.8"/>
            </summary>
            <param name="assembly">resource assembly</param>
            <param name="name">The base name of the resource such as "Resources".</param>
        </member>
        <member name="M:qshine.Globalization.ResourceStringStore.GetString(System.String,System.Object[])">
            <summary>
            Get localized string
            </summary>
            <param name="format">format string in Neutral resource language</param>
            <param name="arguments">format arguments</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Globalization.LocalString">
            <summary>
            Lable translation object.
            Transalte an English phase to other environment language
            
            <![CDATA[
                var localizer = new Localizer(string name);
                //var localizer = new Localizer<ResourceType>();
                //var localizer = new Localizer(Type ResourceType);
            
                var nativeText = localizer.GetString("English Message");
                
            ]]>
            </summary>
        </member>
        <member name="M:qshine.Globalization.LocalString._G(System.String,System.Object[])">
            <summary>
            Translate to native language
            </summary>
            <param name="format">English phase with format</param>
            <param name="args">arguments.</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Globalization.Localizer">
            <summary>
            Localization (l10n).
            The localizer provides service to translate a Neutral resource language text to local language text 
            based on current locale.
            
            The language resource categorized by the resource name.
            The resource name is a dot noation component which contains 1 to many fields separated with the period(.) symbol.
            When searching for a text resource, it will search any levels combination of the fields.
            Example: 
                Resource Name: qshine.Resources.LevelOne.LevelTwo
            The localizer will search below resources in order
                "qshine.LevelOne.LevelTwo"
                "qshine.LevelOne"
                "qshine"
                
            If the resources file (ex:resources.resx) is under one of the project namespace (ex: qshine, qshine.LevelOne), the locale resource could be in
                "qshine.LevelOne.LevelTwo.Resources.fr-CA.resx"
                "qshine.LevelOne.LevelTwo.Resources.fr.resx"
                "qshine.LevelOne.Resources.fr-CA.resx"
                "qshine.LevelOne.Resources.fr.resx"
                "qshine.Resources.fr-CA.resx"
                "qshine.Resources.fr.resx"
            
            </summary>
        </member>
        <member name="M:qshine.Globalization.Localizer.#ctor(System.String)">
            <summary>
            Create a string localizer for particular resource category.
            The resource name is used to categorize application local string resources.
            </summary>
            <param name="resourceName">resource name</param>
        </member>
        <member name="M:qshine.Globalization.Localizer.#ctor(System.Type)">
            <summary>
            Create a string localizer for particular resource type.
            The resource type is used to categorize an application resource.
            </summary>
            <param name="resourceType">Resource type</param>
        </member>
        <member name="M:qshine.Globalization.Localizer.#ctor(qshine.Globalization.ILocalStringProvider,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="provider"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:qshine.Globalization.Localizer.GetString(System.String,System.Object[])">
            <summary>
            Get localized string
            </summary>
            <param name="format">The format string in neutral language.
            The format string need be converted to local text by the local string provider.
            </param>
            <param name="args">The format arguments</param>
            <returns></returns>
        </member>
        <member name="T:qshine.Globalization.Localizer`1">
            <summary>
            Localization (l10n).
            </summary>
            <typeparam name="T">A resource class type to categorize application resource.</typeparam>
        </member>
        <member name="M:qshine.Globalization.Localizer`1.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:qshine.Globalization.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.ArgumentNotEmpty">
            <summary>
              Looks up a localized string similar to {0} is required but was null or empty..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.ArgumentNotNULL">
            <summary>
              Looks up a localized string similar to {0} is required but was null..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.CacheAddDependenciesNotSupportedException">
            <summary>
              Looks up a localized string similar to Cache.Add:dependencies must be null..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.CacheAddOnRemoveCallbackNotSupport">
            <summary>
              Looks up a localized string similar to Cache.Add:onRemoveCallback must be null..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.DateFieldRangeMessage">
            <summary>
              Looks up a localized string similar to The {0} field value must be a date between {1} and {2}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.DuplicateRules">
            <summary>
              Looks up a localized string similar to Unable to add same rule {0} twice..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.FieldDataTypeMessage">
            <summary>
              Looks up a localized string similar to The {0} field must be a valid {1}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.FieldLengthMessage">
            <summary>
              Looks up a localized string similar to The {0} field size should be limited between {1} to {2} characters..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.FieldMaxLengthMessage">
            <summary>
              Looks up a localized string similar to The {0} field characters could not exceed {1} characters..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.FieldRequiredMessage">
            <summary>
              Looks up a localized string similar to The {0} field value is required..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.LoggingException">
            <summary>
              Looks up a localized string similar to Exception in Enterprise Library Logging Application Block.
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.NumericFieldRangeMessage">
            <summary>
              Looks up a localized string similar to The {0} field value must be a number between {1} and {2}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.OneRuleRequired">
            <summary>
              Looks up a localized string similar to The AddRules method takes at least one argument..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.ValidationFailed">
            <summary>
              Looks up a localized string similar to  Validation Failed..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionProviderNotFound">
            <summary>
              Looks up a localized string similar to The IoC provider {0} is not found..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionRegisterMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying register a type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionRegisterModuleMessage">
            <summary>
              Looks up a localized string similar to IoC error occurred while trying to register a module..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionRegisterNameMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying register a type {0} with a name {1}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionRegisterSectionFirstMessage">
            <summary>
              Looks up a localized string similar to Castle Windsor configuration registration should be done earlier than  any other type registration..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionRegisterSectionMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to register types through a XML configuration section {0}. .
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionResolveAllMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve all registered type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionResolveMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve type {0}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.IoCExceptionResolveNamedMessage">
            <summary>
              Looks up a localized string similar to IoC error occured while trying to resolve type {0} with a specific name {1}..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.SectionNotFound">
            <summary>
              Looks up a localized string similar to The section {0} is not found. Check the section name and section handler type..
            </summary>
        </member>
        <member name="P:qshine.Globalization.Resource.TypeNotFound">
            <summary>
              Looks up a localized string similar to The type {0} is not found..
            </summary>
        </member>
        <member name="T:qshine.Messaging.IDomainEvent">
            <summary>
            Domain event:: An event affects the domain state changed.
            It also used to notify external components (BCs) when a domain state changed.
            
            In eventsourcing system, the domain events need be stored in Event Store.
            In non-eventsourceing system, it stored in event log or event system.
            </summary>
        </member>
        <member name="P:qshine.Messaging.IDomainEvent.Version">
            <summary>
            Domain event version number. This number is only valid when use eventsouring 
            The new event version always be -1. 
            The actual version number is a sequence number generated when the event saved in ES.
            
            Ignore this property without ES.
            </summary>
        </member>
        <member name="P:qshine.Messaging.IDomainEvent.TimeStamp">
            <summary>
            Event timestamp in UTC
            </summary>
        </member>
        <member name="T:qshine.Messaging.EventBus">
            <summary>
            Event bus service
            Publish or subscrible events.
            
            Event bus could be configured in application environment based on bus name (route name).
            The bus could be produced from different bus factory by bus name.
            
            The common usuage::
                Publish event: 
                    var bus = new EventBus("busName");
                    bus.Publish(myEvent);
                
                Subscrible events:
                    var bus = new EventBus("busName");
                    bus.Subscribe("endpointname", eventHandler);
                or
                    bus.Subscribe(eventhandler);
                
            
            If no any plugable bus factory available, a default bus factory will be selected for event bus.
            The default one is a memory event bus for test purpose.
            
            </summary>
        </member>
        <member name="M:qshine.Messaging.EventBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.EventBus"/> class using default bus parameter.
            </summary>
        </member>
        <member name="M:qshine.Messaging.EventBus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.EventBus"/> class for specific named bus.
            </summary>
            <param name="busName">Bus name</param>
        </member>
        <member name="M:qshine.Messaging.EventBus.#ctor(System.String,qshine.Messaging.IEventBusFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.EventBus"/> class by a given bus name and bus factory.
            The bus name could be used to specify a type of bus factory and a separated bus route.
            Application may utilize different type of bus factory for bus route.
            </summary>
            <param name="busName">Bus name.</param>
            <param name="factory">event bus factory</param>
        </member>
        <member name="M:qshine.Messaging.EventBus.#ctor(qshine.IEventBus)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.EventBus"/> for given bus instance.
            </summary>
            <param name="bus">bus instance for particular route.</param>
        </member>
        <member name="M:qshine.Messaging.EventBus.Publish``1(``0)">
            <summary>
            Publish a event message through given event bus
            </summary>
            <typeparam name="T">Event message type</typeparam>
            <param name="eventMessage">event message to be published to all bus end points</param>
        </member>
        <member name="M:qshine.Messaging.EventBus.Subscribe``1(qshine.Messaging.IHandler{``0})">
            <summary>
            Subscribe the specified event message for one message handler.
            </summary>
            <typeparam name="T">Type of message event</typeparam>
            <param name="handler">Message event handler</param>
        </member>
        <member name="M:qshine.Messaging.EventBus.Subscribe``1(System.String,qshine.Messaging.IHandler{``0})">
            <summary>
            Subscribe the specified event message for one message handler from a given endpoint.
            </summary>
            <typeparam name="T">Type of message event</typeparam>
            <param name="endpoint">event bus endpoint</param>
            <param name="handler">Message event handler</param>
        </member>
        <member name="F:qshine.Messaging.EventBus._factories">
            <summary>
            Buffer all bus factories.
            </summary>
        </member>
        <member name="M:qshine.Messaging.EventBus.GetBusFactory(System.String)">
            <summary>
            Bus factory resolver.
            Find a bus factory based on bus name.
            You can configure different bus factory for certain bus name.
            </summary>
        </member>
        <member name="T:qshine.Messaging.EventBusNames">
            <summary>
            Common event bus name
            </summary>
        </member>
        <member name="F:qshine.Messaging.EventBusNames.DefaultEventBusName">
            <summary>
            Default event bus name
            </summary>
        </member>
        <member name="F:qshine.Messaging.EventBusNames.AuditTrailBusName">
            <summary>
            Audit trail event bus
            </summary>
        </member>
        <member name="F:qshine.Messaging.EventBusNames.EventSourcingBusName">
            <summary>
            Event sourcing event bus name
            </summary>
        </member>
        <member name="T:qshine.Messaging.IEventBusFactory">
            <summary>
            event bus factory interface
            </summary>
        </member>
        <member name="M:qshine.Messaging.IEventBusFactory.Create(System.String)">
            <summary>
            Create an event bus
            </summary>
            <param name="busName">event bus name</param>
            <returns>return a named event bus.
            </returns>
        </member>
        <member name="T:qshine.Messaging.IHandler`1">
            <summary>
            A generic handler to handle message.
            It can apply to event handler, command handler, message handler.
            All handler must implement Handle method
            </summary>
            <typeparam name="T">Type of handle message</typeparam>
        </member>
        <member name="M:qshine.Messaging.IHandler`1.Handle(`0)">
            <summary>
            Handle specific event.
            </summary>
            <param name="eventMessage">Event or message.</param>
        </member>
        <member name="T:qshine.BatchException">
            <summary>
            Defines application multiple validation exception and exception policy object.
            The exception policy is used to indicate how to handle application exception in batch process.
            It could raise or supress exception based on exception policy.
            Common Exception policy:
            
            BatchException.SkipException - it returns BatchException object which can hold multiple errors without throw exception.
            BatchException.FirstException - it returns BatchException object which will throw in first application process exception.
            BatchException.LastException - it returns BatchException object which will throw in end of process if any error capture with in the process.
            </summary>
        </member>
        <member name="M:qshine.BatchException.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="M:qshine.BatchException.#ctor(System.String)">
            <summary>
            Ctro.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:qshine.BatchException.InnerExceptions">
            <summary>
            Keep batch exceptions.
            </summary>
        </member>
        <member name="M:qshine.BatchException.ChainBatchException">
            <summary>
            Chain batch exception for multi-level batch call
            </summary>
        </member>
        <member name="M:qshine.BatchException.AddException(System.Exception)">
            <summary>
            Add exception into batch exception.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:qshine.BatchException.TryThrow(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="F:qshine.BatchException.Exceptions">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.Logger.ConsoleLoggerProvider">
            <summary>
            Trace logger provider.
            The Trace Logger use Debug/Trace to write logging message based on .NET diagnostics configure section setting.
            The configure setting source and switch will be used to determine whether trace logging enabled.
            The listener must setup in trace section instead of source section. 
            </summary>
        </member>
        <member name="M:qshine.Logger.ConsoleLoggerProvider.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <returns>The logger.</returns>
            <param name="category">Category.</param>
        </member>
        <member name="T:qshine.Logger.ConsoleLogger">
            <summary>
            Trace logger.
            </summary>
        </member>
        <member name="M:qshine.Logger.ConsoleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.TraceLogger"/> class.
            </summary>
            <param name="category">Category.</param>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsLoggingEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is logging enabled.
            </summary>
            <value><c>true</c> if is logging enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is fatal enabled.
            </summary>
            <value><c>true</c> if is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is error enabled.
            </summary>
            <value><c>true</c> if is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is warn enabled.
            </summary>
            <value><c>true</c> if is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is info enabled.
            </summary>
            <value><c>true</c> if is info enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is trace enabled.
            </summary>
            <value><c>true</c> if is trace enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ConsoleLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is debug enabled.
            </summary>
            <value><c>true</c> if is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:qshine.Logger.ConsoleLogger.Log(System.Diagnostics.TraceEventType,System.String,System.Exception,System.Object[])">
            <summary>
            Log the specified severity, message, ex and properties.
            </summary>
            <returns>The log.</returns>
            <param name="severity">Severity.</param>
            <param name="message">Message.</param>
            <param name="ex">Ex.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="T:qshine.Logger.ILoggerProviderFactory">
            <summary>
            LogProviderFactory interface.
            </summary>
        </member>
        <member name="M:qshine.Logger.ILoggerProviderFactory.CreateProvider(System.String)">
            <summary>
            Create a new provider instance by a given category name
            </summary>
            <param name="category">logger category name</param>
            <returns>return log provider instance</returns>
        </member>
        <member name="M:qshine.Logger.ILoggerProviderFactory.RegisterProvider(qshine.Logger.ILoggerProvider,System.String)">
            <summary>
            Register a logger framework provider and associate it to a logging category in the Logging system. 
            </summary>
            <param name="provider">logger provider instance</param>
            <param name="category">logger category name</param>
        </member>
        <member name="T:qshine.Logger.LoggerProviderFactory">
            <summary>
            Log provider factory
            </summary>
        </member>
        <member name="M:qshine.Logger.LoggerProviderFactory.CreateProvider(System.String)">
            <summary>
            Returns a Log provider instance 
            </summary>
            <param name="category">log category</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Logger.LoggerProviderFactory.RegisterProvider(qshine.Logger.ILoggerProvider,System.String)">
            <summary>
            Register a logger framework provider and associate it to a logging category in the Logging system. 
            </summary>
            <param name="provider">logger provider instance</param>
            <param name="category">logger category name</param>
        </member>
        <member name="P:qshine.Logger.LoggerProviderFactory.InternalDefaultProvider">
            <summary>
            Internal Log provider instance.
            </summary>
        </member>
        <member name="T:qshine.Logger.ILoggerProvider">
            <summary>
            Logger provider interface
            </summary>
        </member>
        <member name="M:qshine.Logger.ILoggerProvider.GetLogger(System.String)">
            <summary>
            Get a specific logger by a named category.
            </summary>
            <param name="category">logger category </param>
            <returns>Logger</returns>
        </member>
        <member name="T:qshine.Logger.Log">
            <summary>
            Logger API.
            	1. Get logger instance from a logger provider. A logger provider factory can produce a logger provider using different strategy. 
            	The logger provider could be a plugin component from a logging framework, such as nlog, log4net.
            	This library implemented two internal logging providers : .NET trace logger provider and console logger provider. 
            	.NET trace logger using dotnet native tracing diagnostics function to create message log based on application config. This is the default
            	logger provider if no plugin logging component found.
            	Console logger is simply output the logger message to console.
            	The plugin logging provider can be addon through application environment configure setting.
            	2. A logger provider factory choose a logger provider based on logging category setting in configured logging component Map.
            	A default logging provider component could be defined in Map setting section. The Map name is "qshine.ILoggerProvider".
            	User can create its own Logger provider factory to overwrite LoggerproviderFactory.
            	3. A SysLogger instance is a "System" category logger instance used by library.
            	4. A DevDebug() is a debugging methods for DEBUG version only. Use it if you don't want logging message affect the production version.
            	5. RegisterLogger() can be used to overwrite category specific logger created by logger provider factory.
            	
            The library will use .NET trace logger before Logger plugin added into system.
            To enable trace logger you need configure application diagnostics section in app configure setting.
            
            	Log.SysLogger.Error(ex);
            
            The application use Log.GetLogger(category) to get a logger instance for specific category (source).
            	var logger = Log.GetLogger("database");
            	logger.Info("ExecuteSql({0})",sql);
            
            DevDebug methods are available only for developer to view the detail information during DEBUG mode. 
            	Log.DevDebug("Method begin")
            	Log.DevDebug("Method end")
            	
            The plugin logger takes affect after application environment build process completed.
            </summary>
        </member>
        <member name="F:qshine.Logger.Log._logInstances">
            <summary>
            store Log provider per logging category.
            </summary>
        </member>
        <member name="M:qshine.Logger.Log.GetLogger(System.String)">
            <summary>
            Gets the logger for a specified category.
            </summary>
            <param name="category">logging category</param>
            <returns>logger</returns>
        </member>
        <member name="M:qshine.Logger.Log.GetLogger(System.Type)">
            <summary>
            Gets the logger for a specified class type as category.
            </summary>
            <returns>The logger.</returns>
            <param name="type">Log category.</param>
        </member>
        <member name="M:qshine.Logger.Log.GetLogger``1">
            <summary>
            Gets the logger for a specified class type as category.
            </summary>
            <returns>The logger.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:qshine.Logger.Log.GetLogger">
            <summary>
            Gets the logger for general category.
            </summary>
            <returns>The logger.</returns>
        </member>
        <member name="P:qshine.Logger.Log.LogProviderFactory">
            <summary>
            Get/Set Logging provider factory
            </summary>
        </member>
        <member name="M:qshine.Logger.Log.RegisterLogger(System.String,qshine.Logger.ILogger)">
            <summary>
            Register a specific Logger instead Logger instance created by LogProviderFactory().
            
            This method is best for custom Log provider
            </summary>
            <param name="category">Log category</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="P:qshine.Logger.Log.SysLoggerProvider">
            <summary>
            Get/set system logger provider.
            The system logger provider is used to log library system message
            </summary>
        </member>
        <member name="P:qshine.Logger.Log.SysLogger">
            <summary>
            Log system message
            </summary>
            <summary>
            Get system logger instance.
            System logger instance
            </summary>
        </member>
        <member name="M:qshine.Logger.Log.DevDebug(System.String,System.Object[])">
            <summary>
            Log message for developer only
            </summary>
            <param name="format">Format.</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="T:qshine.Logger.LogCategory">
            <summary>
            Common logging categories
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.System">
            <summary>
            System category
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.General">
            <summary>
            General logging
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.Database">
            <summary>
            Database logging
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.Security">
            <summary>
            Security logging
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.Server">
            <summary>
            Server logging
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.Network">
            <summary>
            Network logging
            </summary>
        </member>
        <member name="F:qshine.Logger.LogCategory.Dev">
            <summary>
            Debug Logging only
            </summary>
        </member>
        <member name="T:qshine.Logger.ILogger">
            <summary>
            Contract for logger interface
            </summary>
        </member>
        <member name="M:qshine.Logger.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Logging critical <c>Fatal</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Highest level. system crashes</remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logging critical <c>Fatal</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="M:qshine.Logger.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logging <c>Error</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Error to prevent application running properly</remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logging <c>Error</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">Extra message format</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="M:qshine.Logger.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Logging <c>Warn</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Incorrect behavior, but application is continue running.</remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logging <c>Warn</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">Extra message format</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="M:qshine.Logger.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logging <c>Info</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Normal behavior like mail sent, user updated profile etc. </remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logging <c>Info</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">Extra message format</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="M:qshine.Logger.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logging <c>Debug</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Executed queries, user authenticated, session expired</remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logging <c>Debug</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">Extra message format</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="M:qshine.Logger.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Logging <c>Trace</c> level formatted message. 
            </summary>
            <param name="message">formatted message.</param>
            <param name="properties">format arguments</param>
            <remarks>Lowest level, such as, method begin and method end</remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Logging <c>Trace</c> level formatted message. 
            </summary>
            <param name="ex">Log exception</param>
            <param name="message">Extra message format</param>
            <param name="properties">format arguments</param>
        </member>
        <member name="P:qshine.Logger.ILogger.IsLoggingEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is logging enabled.
            </summary>
            <value><c>true</c> if is logging enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is fatal enabled.
            </summary>
            <value><c>true</c> if is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is error enabled.
            </summary>
            <value><c>true</c> if is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is warn enabled.
            </summary>
            <value><c>true</c> if is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is info enabled.
            </summary>
            <value><c>true</c> if is info enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is debug enabled.
            </summary>
            <value><c>true</c> if is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:RealSuite.Infrastructure.ILogger"/> is trace enabled.
            </summary>
            <value><c>true</c> if is trace enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.ILogger.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
            <remarks>
            Common categories:
            	System
            	Security (Authentication/Authorization)
            	Database
            	Validation
            	Workflow
            	General
            </remarks>
        </member>
        <member name="M:qshine.Logger.ILogger.EnableLogging(System.Diagnostics.TraceEventType)">
            <summary>
            Enable logging
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="T:qshine.Logger.TraceLoggerProvider">
            <summary>
            Trace logger provider.
            The Trace Logger use Debug/Trace to write logging message based on .NET diagnostics configure section setting.
            The configure setting source and switch will be used to determine whether trace logging enabled.
            The listener must setup in trace section instead of source section. 
            </summary>
        </member>
        <member name="M:qshine.Logger.TraceLoggerProvider.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <returns>The logger.</returns>
            <param name="category">Category.</param>
        </member>
        <member name="T:qshine.Logger.TraceLogger">
            <summary>
            Trace logger.
            </summary>
        </member>
        <member name="M:qshine.Logger.TraceLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.TraceLogger"/> class.
            </summary>
            <param name="category">Category.</param>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is fatal enabled.
            </summary>
            <value><c>true</c> if is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is error enabled.
            </summary>
            <value><c>true</c> if is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is warn enabled.
            </summary>
            <value><c>true</c> if is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is info enabled.
            </summary>
            <value><c>true</c> if is info enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is trace enabled.
            </summary>
            <value><c>true</c> if is trace enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.TraceLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.TraceLogger"/> is debug enabled.
            </summary>
            <value><c>true</c> if is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:qshine.Logger.TraceLogger.Log(System.Diagnostics.TraceEventType,System.String,System.Exception,System.Object[])">
            <summary>
            Log the specified severity, message, ex and properties.
            </summary>
            <returns>The log.</returns>
            <param name="severity">Severity.</param>
            <param name="message">Message.</param>
            <param name="ex">Ex.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="T:qshine.Logger.LoggerBase">
            <summary>
            Logger base class.
            Derived from this class to build logger provider
            </summary>
        </member>
        <member name="M:qshine.Logger.LoggerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.LoggerBase"/> class.
            </summary>
            <param name="category">Category.</param>
        </member>
        <member name="P:qshine.Logger.LoggerBase.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsLoggingEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is logging enabled.
            </summary>
            <value><c>true</c> if is logging enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:qshine.Logger.LoggerBase._logLevel">
            <summary>
            Logger level 
            </summary>
        </member>
        <member name="M:qshine.Logger.LoggerBase.EnableLogging(System.Diagnostics.TraceEventType)">
            <summary>
            Enable/Disable logger
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is fatal enabled.
            </summary>
            <value><c>true</c> if is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is error enabled.
            </summary>
            <value><c>true</c> if is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is warn enabled.
            </summary>
            <value><c>true</c> if is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is info enabled.
            </summary>
            <value><c>true</c> if is info enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsTraceEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is trace enabled.
            </summary>
            <value><c>true</c> if is trace enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.Logger.LoggerBase.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:qshine.LoggerBase"/> is debug enabled.
            </summary>
            <value><c>true</c> if is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Debug(System.String,System.Object[])">
            <summary>
            Debug the specified message and properties.
            </summary>
            <returns>The debug.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Debug the specified ex, message and properties.
            </summary>
            <returns>The debug.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Error(System.String,System.Object[])">
            <summary>
            Error the specified message and properties.
            </summary>
            <returns>The error.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Error the specified ex, message and properties.
            </summary>
            <returns>The error.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Fatal(System.String,System.Object[])">
            <summary>
            Fatal the specified message and properties.
            </summary>
            <returns>The fatal.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Fatal the specified ex, message and properties.
            </summary>
            <returns>The fatal.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Info(System.String,System.Object[])">
            <summary>
            Info the specified message and properties.
            </summary>
            <returns>The info.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Info the specified ex, message and properties.
            </summary>
            <returns>The info.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Trace(System.String,System.Object[])">
            <summary>
            Trace the specified message and properties.
            </summary>
            <returns>The trace.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Trace the specified ex, message and properties.
            </summary>
            <returns>The trace.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Warn(System.String,System.Object[])">
            <summary>
            Warn the specified message and properties.
            </summary>
            <returns>The warn.</returns>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Warn the specified ex, message and properties.
            </summary>
            <returns>The warn.</returns>
            <param name="ex">Ex.</param>
            <param name="message">Message.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:qshine.Logger.LoggerBase.Log(System.Diagnostics.TraceEventType,System.String,System.Exception,System.Object[])">
            <summary>
            Log the specified severity, message, ex and properties.
            </summary>
            <returns>The log.</returns>
            <param name="severity">Severity.</param>
            <param name="message">Message.</param>
            <param name="ex">Ex.</param>
            <param name="properties">Properties.</param>
        </member>
        <member name="T:qshine.Specification.BusinessActionRule`1">
            <summary>
            The business rule is a statement defines a business specification.
            When a business specification is satisfied by the business entity, the action will be executed.
            Otherwise the false action will be executed.
            
            Example:
            <![CDATA[
                var approvalActionRule = new BusinessActionRule("approval rule",
                   (spec1 & spec2 & spec3)| (spec4 & spec5), ApproveAction, null);
                
                approvalActionRule.Evaluate(new MyObject());
            ]]>
            
            </summary>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="ruleName">name of the business rule</param>
            <param name="rule">Rule expression</param>
            <param name="action">rule action when the rule fullfill</param>
            <param name="falseAction">rule action when the rule doesn't follow</param>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule</param>
            <param name="action">The rule action applied when the rule fullfill.</param>
            <remarks>No action if teh rule condition failed</remarks>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(System.String,qshine.Specification.ISpecification{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="ruleName">name of the business rule</param>
            <param name="rule">Rule specification</param>
            <param name="action">rule action when the rule fullfill</param>
            <param name="falseAction">rule action when the rule doesn't follow</param>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(System.String,qshine.Specification.ISpecification{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule</param>
            <param name="action">The action applied ti the rule.</param>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(qshine.Specification.SpecificationRule{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="rule">Instance of specification rule</param>
            <param name="action">rule action when the rule fullfill</param>
            <param name="falseAction">rule action when the rule doesn't follow</param>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.#ctor(qshine.Specification.SpecificationRule{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessActionRule`1"/> class.
            </summary>
            <param name="rule">The specification rule</param>
            <param name="action">The action applied ti the rule.</param>
        </member>
        <member name="P:qshine.Specification.BusinessActionRule`1.FalseAction">
            <summary>
            Get/Set the rule action for rule evaluation when the specification rule is not satisfied by the entity object.
            </summary>
        </member>
        <member name="P:qshine.Specification.BusinessActionRule`1.TrueAction">
            <summary>
            Get/Set the rule action for rule evaluation when the specification rule is satisfied by the entity object.
            </summary>
        </member>
        <member name="M:qshine.Specification.BusinessActionRule`1.Evaluate(`0)">
            <summary>
            Evaluates the rule against the business entity instance
            </summary>
            <param name="candidate">entity instance to be evaluated by the rule</param>
        </member>
        <member name="T:qshine.Specification.CommonCheck">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.Specification.CommonCheck.PrecisionScale(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Precision and Scale validation:
                Precision is the total number of digits in a Numeric value, both to the right and left of the decimal point.
                Scale refers to the total number of digits after the decimal point.
                So, for 123.45 or -123.45 the Precision is 5 and Scale is 2. 
                    for 123 the Precision is 3 and Scale is 0.
            </summary>
            <param name="value">The value to be evaluated</param>
            <param name="precision">Expected precision.</param>
            <param name="scale">Expected scale</param>
            <param name="ignoreNull">Treat null is true</param>
            <returns>Returns True if the value satisfied the requirement.</returns>
        </member>
        <member name="M:qshine.Specification.CommonCheck.Range(System.Object,System.IComparable,System.IComparable,System.Boolean)">
            <summary>
            Range validation:
                Compare date, number and any IComparable object
            
            </summary>
            <param name="value">The value to be evaluated</param>
            <param name="minValue">minimal value to be compare</param>
            <param name="maxValue">maximum value to be compare</param>
            <param name="ignoreNull">Treat null as true.</param>
            <returns>Returns True if the value satisfied the requirement.</returns>
        </member>
        <member name="T:qshine.Specification.IDomainValidator">
            <summary>
            Create a domain validation interface
            </summary>
        </member>
        <member name="M:qshine.Specification.IDomainValidator.Validate">
            <summary>
            Validate domain entity
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="T:qshine.Specification.ISpecification`1">
            <summary>
            It provides a contract to implement a re-usable business logic satisfaction based on certain business conditions.
            It is a common <see href="http://en.wikipedia.org/wiki/Specification_pattern">Specification Pattern</see> used to define domain validation and business rules.
            </summary>
            <typeparam name="T">Type of object to be validated. It usually is a </typeparam>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Validates against a candidate object to satisfy the specification.
            </summary>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.And(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean AND logic
            </summary>
            <param name="other">Other specification to be combined</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.AndNot(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean AND NOT logic
            </summary>
            <param name="other">Other specification to be combined AND NOT logic</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.Or(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean OR logic
            </summary>
            <param name="other">Other specification to be combined</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.OrNot(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean OR NOT logic
            </summary>
            <param name="other">Other specification to be combined OR NOT logic</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.ISpecification`1.Not">
            <summary>
            Get opposite specification
            </summary>
            <returns>A new specifiction which its opposite logic.</returns>
        </member>
        <member name="P:qshine.Specification.ISpecification`1.ConditionExpression">
            <summary>
            Gets the specification condition expression.
            </summary>
        </member>
        <member name="T:qshine.Specification.IValidationRule">
            <summary>
            RealSuite validation rule interface
            </summary>
        </member>
        <member name="M:qshine.Specification.IValidationRule.IsSatisfiedBy(System.Object)">
             <summary>
             Test whether a given value satisfis the rule.
             </summary>
             <param name="value">A value to be evaludated</param>
             <returns>It returns true if the value is satisfied by the rule.
            </returns>
        </member>
        <member name="P:qshine.Specification.IValidationRule.TargetPropertyName">
            <summary>
            Get the target object property name the rule refer to.
            </summary>
        </member>
        <member name="P:qshine.Specification.IValidationRule.Rank">
            <summary>
            the lower the rank, the earlier to validate
            </summary>
        </member>
        <member name="T:qshine.Specification.RuleCollection`1">
            <summary>
            Define a rule Collection
            </summary>
            <typeparam name="T">type of rule</typeparam>
        </member>
        <member name="M:qshine.Specification.RuleCollection`1.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:qshine.Specification.RuleCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all the elements that match the condition
            </summary>
            <param name="match">Match condition</param>
        </member>
        <member name="T:qshine.Specification.Specification`1">
            <summary>
            Provides an implementation for common specification and composite specification.
            </summary>
            <typeparam name="T">Type of object to be validated</typeparam>
        </member>
        <member name="M:qshine.Specification.Specification`1.#ctor">
            <summary>
            Default constractor for the concrete class that overrides the specification condition expression
            </summary>
        </member>
        <member name="M:qshine.Specification.Specification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constructor with a validation condition expression
            </summary>
            <param name="conditionExpression">validation condition expression against a specific class.</param>
        </member>
        <member name="P:qshine.Specification.Specification`1.ConditionExpression">
            <summary>
            Get/Set specification condition expression
            </summary>
        </member>
        <member name="M:qshine.Specification.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Test against a candidate object based on speification.
            </summary>
            <param name="entity">The object to be tested</param>
            <returns>Returns true if the object is satisfied by the specification</returns>
            <remarks>
            The specification will compile conditional expression and evaulate the expression.
            </remarks>
        </member>
        <member name="M:qshine.Specification.Specification`1.And(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean AND logic
            </summary>
            <param name="other">Other specification to be combined</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.AndNot(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean AND NOT logic
            </summary>
            <param name="other">Other specification to be combined AND NOT logic</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.Or(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean OR logic
            </summary>
            <param name="other">Other specification to be combined</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.OrNot(qshine.Specification.ISpecification{`0})">
            <summary>
            Combine current specification with other specification togather in boolean OR NOT logic
            </summary>
            <param name="other">Other specification to be combined OR NOT logic</param>
            <returns>A new specifiction which combines with other specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.Not">
            <summary>
            Get opposite specification
            </summary>
            <returns>A new specifiction which its opposite logic.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.op_BitwiseAnd(qshine.Specification.Specification{`0},qshine.Specification.Specification{`0})">
            <summary>
            overload operator &amp; to combine two specification togather in a boolean AND logic.
            </summary>
            <param name="left">The left hand specification to be combined</param>
            <param name="right">The right hand specification to be combined</param>
            <returns>A new specification combined both left and right hand specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.op_BitwiseOr(qshine.Specification.Specification{`0},qshine.Specification.Specification{`0})">
            <summary>
            overload operator | to combine two specification togather in a boolean OR logic.
            </summary>
            <param name="left">The left hand specification to be combined</param>
            <param name="right">The right hand specification to be combined</param>
            <returns>A new specification combined both left and right hand specification.</returns>
        </member>
        <member name="M:qshine.Specification.Specification`1.op_LogicalNot(qshine.Specification.Specification{`0})">
            <summary>
            overload operator ! to change the specification to its opposite logic.
            </summary>
            <param name="current">The specification to be change</param>
            <returns>A new specification with opposite logic</returns>
        </member>
        <member name="T:qshine.Specification.AndSpecification`1">
            <summary>
            Implement the combined Composite Specification Pattern with AND expression
            </summary>
            <typeparam name="T">Type of object to against the specification</typeparam>
        </member>
        <member name="T:qshine.Specification.AndNotSpecification`1">
            <summary>
            Implement the combined Composite Specification Pattern with AND NOT expression
            </summary>
            <typeparam name="T">Type of object to against the specification</typeparam>
        </member>
        <member name="T:qshine.Specification.OrSpecification`1">
            <summary>
            Implement Composite Specification Pattern OR specification
            </summary>
            <typeparam name="T">Type of object to against the specification</typeparam>
        </member>
        <member name="T:qshine.Specification.OrNotSpecification`1">
            <summary>
            Implement Composite Specification Pattern OR NOT specification
            </summary>
            <typeparam name="T">Type of object to against the specification</typeparam>
        </member>
        <member name="T:qshine.Specification.NotSpecification`1">
            <summary>
            Implement Composite Specification Pattern NOT specification
            </summary>
            <typeparam name="T">Type of object to against the specification</typeparam>
        </member>
        <member name="T:qshine.Specification.SpecificationRule`1">
            <summary>
            Specification Rule of Entity used by validation rule and business rule.
            </summary>
            <typeparam name="T">The entity to be evaluated</typeparam>
            <example>
            <![CDATA[
            
                public class MyOfficeAreaRule:SpecificationRule<Custom>
                {
                    public MyOfficeAreaRule()
                    {
                        Name ="MyOffliceAreaRule";
                        Priority = 10;
                        ConditionExpression = c=>c.PostCode.Contains("L3M");
                        AddTags("Test","Demo");
                    }
                }
            
            ]]>
            
            </example>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.#ctor">
            <summary>
            Ctro. with default rule name.
            </summary>
            <remarks>The default constructor is useful when override the Expression() by the concrete class</remarks>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32)">
            <summary>
            Ctro a named rule using expression
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The rule specification</param>
            <param name="priority">The rule priority. The higher rule priority get executed first from rule set.</param>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initialize a named rule using specification
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The rule specification</param>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.#ctor(System.String,qshine.Specification.ISpecification{`0})">
            <summary>
            Initialize a named rule using specification
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The rule specification</param>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initialize a rule
            </summary>
            <param name="rule">The rule specification</param>
        </member>
        <member name="P:qshine.Specification.SpecificationRule`1.Name">
            <summary>
            The specification rule name
            </summary>
        </member>
        <member name="P:qshine.Specification.SpecificationRule`1.Priority">
            <summary>
            Rule priority. The higher rule priority get executed first from the rule set.
            </summary>
        </member>
        <member name="P:qshine.Specification.SpecificationRule`1.Enabled">
            <summary>
            Sets/Gets specification rule active inactive flag
            </summary>
        </member>
        <member name="P:qshine.Specification.SpecificationRule`1.Tags">
            <summary>
            Gets tags associated with rule.
            A tag is an arbitrary value assicated with the rule that can be used to categorize or filter the business rules.
            </summary>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.AddTags(System.String[])">
            <summary>
            Add tags
            </summary>
            <param name="ruleTags">Tags to be attached</param>
            <returns>this instance</returns>
        </member>
        <member name="M:qshine.Specification.SpecificationRule`1.HasTag(System.String[])">
            <summary>
            Check the rule whether it contains required tag.
            </summary>
            <param name="tagsArray">Tag array to be searching for</param>
            <returns>Whether the specific tags associated with the rule.</returns>
        </member>
        <member name="T:qshine.Specification.ValidationPolicy">
            <summary>
            Specification validation policy.
            
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationPolicy.ErrorPolicy">
            <summary>
            Defines validation policy how to handle validation failure.
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationPolicy.EnableDataAnnotations">
            <summary>
            Enable/disable entity data annotation
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationPolicy.EnableChildDataAnnotations">
            <summary>
            Enable/disable child entity data annotation
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationPolicy.MaxErrorLimit">
            <summary>
            Specified a maximum error results the ValidationResults can hold.
            The default number is 100
            The 0 value indicates unlimited.
            
            </summary>
        </member>
        <member name="T:qshine.Specification.ValidationErrorPolicy">
            <summary>
            Validation failure policy
            The policy guide how to handle validation error.
            </summary>
        </member>
        <member name="F:qshine.Specification.ValidationErrorPolicy.CatchAllExceptions">
            <summary>
            Catch all validation errors without throw exception.
            </summary>
        </member>
        <member name="F:qshine.Specification.ValidationErrorPolicy.CatchExceptionOnFirstFailure">
            <summary>
            Catch first validation error without throw exception.
            The validation rules stop running if one of the rule is not satisfied.
            </summary>
        </member>
        <member name="F:qshine.Specification.ValidationErrorPolicy.ThrowExceptionOnFirstFailure">
            <summary>
            A ValidationException will be thrown if one of the rule is not satisfied.
            </summary>
        </member>
        <member name="F:qshine.Specification.ValidationErrorPolicy.ThrowExceptionOnLastFailure">
            <summary>
            The validation rules continue to run if one of the rule is not satisfied. 
            A ValidationException will be thrown in the end of the rule validation if one of the rule is not satisfied.
            </summary>
        </member>
        <member name="T:qshine.Specification.ValidationResult">
            <summary>
            Represents the result of an atomic validation rule.
            </summary>
        </member>
        <member name="M:qshine.Specification.ValidationResult.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the ValidationResult class by using a rule name, error message and associated proeprty name
            </summary>
            <param name="source">source of the validation error message</param>
            <param name="message">error message</param>
            <param name="property">Error associated property</param>
        </member>
        <member name="M:qshine.Specification.ValidationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValidationResult class by error message
            </summary>
            <param name="message">validation error message</param>
        </member>
        <member name="M:qshine.Specification.ValidationResult.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ValidationResult class by error exception
            </summary>
            <param name="ex">Error exception</param>
        </member>
        <member name="M:qshine.Specification.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the ValidationResult class without error.
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationResult.Success">
            <summary>
            Gets the indication of whether the validation success or failure
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationResult.Error">
            <summary>
            Gets a message describing the failure.
            </summary>
        </member>
        <member name="T:qshine.Specification.ValidationResults">
            <summary>
            Represents the results of validating an object or process.
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationResults.IsValid">
            <summary>
            Gets the indication of whether the validation successful or failure
            </summary>
        </member>
        <member name="P:qshine.Specification.ValidationResults.ObjectInstance">
            <summary>
            Gets/Sets the object to validate
            </summary>
        </member>
        <member name="M:qshine.Specification.ValidationResults.ThrowExceptionOnError">
            <summary>
            Throw Validation exception
            </summary>
        </member>
        <member name="T:qshine.Specification.BusinessValidationRule`1">
            <summary>
            Represents a specification based validation rule.
            Example:
                Defines all entity rules in validator and apply selected rules to corresponding action.
            <![CDATA[
                public class AccountValidator:Validator<Account>
                {
                    BusinessValidationRule[] = {
                        {
                        new BusinessValidationRule(
                            "rule1", x=>x.Name.Contains("Special"),
                            (x)=>{return string.Format("Validation rule 1 failed {0}",x.MyProperty);},
                            1
                            )
                        },
                        {}
                    };
                }
            
            ]]>    
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(qshine.Specification.SpecificationRule{`0},System.Func{`0,System.String},System.Int32,System.String)">
            <summary>
            Initialize a business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="rule">Specifies rule name.</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
            <param name="rank">Rank of the rule.</param>
            <param name="property">validation rule asociated property.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(qshine.Specification.SpecificationRule{`0},System.Func{`0,System.String},System.Int32)">
            <summary>
            Initialize a business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="rule">Specifies rule name.</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
            <param name="rank">Rank of the rule.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(qshine.Specification.SpecificationRule{`0},System.Func{`0,System.String})">
            <summary>
            Initialize a business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="rule">Specifies rule name.</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.String},System.Int32,System.String)">
            <summary>
            Defines a new business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule using Lambda expression</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
            <param name="rank">Rank of the rule.</param>
            <param name="property">validation rule asociated property.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.String},System.Int32)">
            <summary>
            Defines a new business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule using Lambda expression</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
            <param name="rank">Rank of the rule.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.String})">
            <summary>
            Defines a new business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule using Lambda expression</param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.String},System.String)">
            <summary>
            
            </summary>
            <param name="ruleName"></param>
            <param name="rule"></param>
            <param name="validationMessage">A delegator to generate a validation error message.</param>
            <param name="property"></param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String)">
            <summary>
            Defines a new business validation rule instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule using Lambda expression</param>
            <param name="validationErrorMessage">The validation message associated with the rule.</param>
            <param name="property">The name of the validation target object.</param>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.#ctor(System.String,qshine.Specification.ISpecification{`0},System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:qshine.Specification.BusinessValidationRule`1"/> class.
            </summary>
            <param name="ruleName">The name of the rule</param>
            <param name="rule">The specification of the rule</param>
            <param name="validationErrorMessage">The validation message associated with the rule.</param>
            <param name="property">The name of the candidate.</param>
        </member>
        <member name="P:qshine.Specification.BusinessValidationRule`1.TargetPropertyName">
            <summary>
            The property associate to the rule. It usually is an entity property name, 
            but it could be any meaningful value that user could identify which rule is applied. 
            </summary>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.Validate(`0)">
            <summary>
            Validates a candidate based on rule
            </summary>
            <param name="candidate"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.BusinessValidationRule`1.IsSatisfiedBy(System.Object)">
            <summary>
            Implement the IsSatisfiedBy interface
            </summary>
            <param name="candidate">candidate to be evaluated</param>
            <returns>return of the validation</returns>
        </member>
        <member name="P:qshine.Specification.BusinessValidationRule`1.Rank">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.Specification.Validator`1">
             <summary>
             A helper class for entity validation.
             </summary>
             <typeparam name="T">Entity type</typeparam>
             <remarks>
             The entity validator is used to validate an entity rules.
             The entity validator contains all specifications of an entity.
             Use rule tags to categorize the different rule set.
             
             The service create a business entity validator and apply the the entity object to the validator before perform the action.
             The validator may raise exception or returns ValidationResults based on validator policy.
             Default validator will raise exception on last failed rule.
             </remarks>
             <example>
             For example, 
                 When perform Account entity method ChangeAddress() we need apply AccountValidator to the entity.
             <![CDATA[
             
              public class AccountValidator():Validator<Account>
              {
                 public AccountValidator()
                 {
                 
                     Policy = new ValidationPolicy {
                         ErrorPolicy = ErrorPolicy.ThrowExceptionOnFirstFailure,
                         EnableDataAnnotation = true
                     }();
                     
                 AddRule ("Base Rules", Rule1 & Rule2 & Rule3);
                 AddRule ("Address Rules", Rule4);
              }
            ...
             void ChangeAddress(Account account)
             {
                 var validator = new AccountValidator();
                 var repository = new AccountRepository();
            
                 validator.Validate(account, repository.Save);
                 
             }
             ]]>
             </example>
        </member>
        <member name="P:qshine.Specification.Validator`1.RuleSet">
            <summary>
            Get a collection of validation rules
            </summary>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRule(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String)">
            <summary>
            Add validation rule by expression
            </summary>
            <param name="ruleName"></param>
            <param name="rule"></param>
            <param name="message"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRule(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String)">
            <summary>
            Add anoymous rule
            </summary>
            <param name="rule"></param>
            <param name="message"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRule(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            Add anonymous rule
            </summary>
            <param name="rule"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRule(qshine.Specification.BusinessValidationRule{`0})">
            <summary>
            Add a validation rule for specific entity
            </summary>
            <param name="validationRule">validation rule</param>
            <returns>return instance self</returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRule(qshine.Specification.Validator{`0})">
            <summary>
            Add a validator in
            </summary>
            <param name="validator">validator</param>
            <returns>return instance self</returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.AddRules(qshine.Specification.BusinessValidationRule{`0}[])">
            <summary>
            Add multiple validation rules for specific entity
            </summary>
            <param name="rules">ValidationRules to be added into validator</param>
            <returns>return instance self</returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.RemoveRule(qshine.Specification.BusinessValidationRule{`0})">
            <summary>
            Remove one validation rule from the validator
            </summary>
            <param name="rule">The validation rule to be removed</param>
        </member>
        <member name="M:qshine.Specification.Validator`1.RemoveRules(System.String)">
            <summary>
            Remove validation rules by a specific rule name
            </summary>
            <param name="ruleName">The name of the validation rule</param>
        </member>
        <member name="M:qshine.Specification.Validator`1.Validate(`0)">
            <summary>
            Perform validation against an entity instance.
            On ExceptionOnValidationError.ExceptionOnFirstError and  ExceptionOnValidationError.ExceptionOnLastError
            it throw a validation exception when the validation failure.
            </summary>
            <param name="entity">Entity instance to be validated</param>
            <returns>validation results</returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.Validate(`0,System.String[])">
            <summary>
            Perform validation rules against an entity instance.Only the given tagged rules will be evaluated.
            </summary>
            <param name="entity">Entity instance to be validated</param>
            <param name="tags">Expected tagged rules</param>
            <returns>validation results</returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.Validate(`0,System.Linq.IOrderedEnumerable{qshine.Specification.BusinessValidationRule{`0}})">
            <summary>
            perform all entity rules validation
            </summary>
            <param name="entity"></param>
            <param name="activeRules"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.Validator`1.ValidateDataAnnotations(System.Object)">
            <summary>
            Validate using data annotation
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Specification.Validator">
            <summary>
            A validator validates a object using business rules and validation annotation based on validation policy.
            Each validation rule result will be added in result queue.
            </summary>
        </member>
        <member name="M:qshine.Specification.Validator.#ctor">
            <summary>
            Ctor::
            </summary>
        </member>
        <member name="M:qshine.Specification.Validator.#ctor(qshine.Specification.ValidationErrorPolicy)">
            <summary>
            Create a validator by given error policy 
            </summary>
            <param name="errorPolicy"></param>
        </member>
        <member name="M:qshine.Specification.Validator.#ctor(qshine.Specification.ValidationPolicy)">
            <summary>
            Ctor::
            </summary>
        </member>
        <member name="P:qshine.Specification.Validator.ValidationResults">
            <summary>
            Gets validation results which hold a collection of failed validation results.
            </summary>
        </member>
        <member name="P:qshine.Specification.Validator.Policy">
            <summary>
            Get validation policy
            </summary>
        </member>
        <member name="M:qshine.Specification.Validator.TryAddValidationResult(qshine.Specification.ValidationResult)">
            <summary>
            Add a validation result into the error result collection.
            It returns false if maximum number of errors reached.
            </summary>
            <param name="validationResult"></param>
        </member>
        <member name="M:qshine.Specification.Validator.AddValidationError(System.String)">
            <summary>
            Add a validation error into validation result collection.
            </summary>
            <param name="errorMessage">error message</param>
            <returns>Returns true if the error message can be added into collection.
            Returns false if the error reach to maximum number of errors.</returns>
        </member>
        <member name="M:qshine.Specification.Validator.AddValidationError(System.Exception)">
            <summary>
            Add validation exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Specification.Validator.AddValidationResult(qshine.Specification.ValidationResult)">
            <summary>
            Add a validation result into validation result collection.
            </summary>
            <param name="validationResult">validation result</param>
            <returns>return false when error number reached to teh limitation.</returns>
        </member>
        <member name="T:qshine.Utility.AssemblyExtension">
            <summary>
            Assembly extension
            </summary>
        </member>
        <member name="M:qshine.Utility.AssemblyExtension.SafeGetInterfacedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Find all class types which inplemented a given interface type
            </summary>
            <param name="assembly">Assembly may contain interfaced class</param>
            <param name="interfacedType">Specifies an interface to be lookup.</param>
            <returns>A list of class types which implemented a given interface or base class.</returns>
        </member>
        <member name="T:qshine.Utility.NamedMapper">
             <summary>
             Name mapper is a utility to help mapping a given object to particular text.
             You can create a named mapper for one specific usage. The named mapper can be overwritten by new mapper register.
             
             For example, the entity audit service uses named mapper (CommonMapperName.AuditEntityNameMapper) 
             to map the entity type to type name as audit entity name.
             If the application want to translate the entity type to different name, the applciation can register a new mapper for CommonMapperName.AuditEntityNameMapper.
             
             The common usuage could be language translation, text terminology mapping for different tenant,
             or convert a standard name to a particular name.
             
             Usage:
            
                 var MyEntityAuditName = NamedMapper.MapTo(CommonMapperName.AuditEntityNameMapper, typeof(MyEntity));
                 
             </summary>
        </member>
        <member name="M:qshine.Utility.NamedMapper.MapTo(System.String,System.Object)">
            <summary>
            Map an object to other object using a register mapper.
            If named mapper is not found, it returns mapObject directly.
            </summary>
            <param name="mapperName">a mapper register name.</param>
            <param name="mapObject">map object</param>
            <returns>mapped object</returns>
        </member>
        <member name="M:qshine.Utility.NamedMapper.Register(System.String,System.Func{System.Object,System.String})">
            <summary>
            Register a named mapper for particular usage.
            </summary>
            <param name="mapperName">name of the mapper</param>
            <param name="mapper">A mapper delegate which map one text to other.</param>
        </member>
        <member name="T:qshine.Utility.CommonMapperName">
            <summary>
            Common mapper names
            </summary>
        </member>
        <member name="F:qshine.Utility.CommonMapperName.AuditEntityNameMapper">
            <summary>
            Audit entity name mapper.
            </summary>
        </member>
        <member name="T:qshine.Utility.FastHash">
            <summary>
            Caculate a hash code
            </summary>
        </member>
        <member name="M:qshine.Utility.FastHash.GetHashCode(System.Object[])">
            <summary>
            Calculate hash code for given properties.
            Note: The object hash code may not identical from each run. Only use Primitive type and string property for identical hashcode
            calculation.
            </summary>
            <param name="items">Contains a list of primitive values for hash code calculation.</param>
            <returns>An identical hash code.</returns>
        </member>
        <member name="T:qshine.Utility.SafeDictionary`2">
            <summary>
            A simple version of Thread-Safe Collections
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.#ctor">
            <summary>
            Ctro.
            </summary>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the Dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the Dictionary.</param>
            <returns></returns>
        </member>
        <member name="P:qshine.Utility.SafeDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs
            </summary>
        </member>
        <member name="P:qshine.Utility.SafeDictionary`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Utility.SafeDictionary`2.Keys">
            <summary>
            Get collection of keys.
            </summary>
        </member>
        <member name="P:qshine.Utility.SafeDictionary`2.Item(`0)">
            <summary>
            Get value by given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.Add(`0,`1)">
            <summary>
            Add a key value if the key not exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether a keyvalue pair exists in the collection.
            </summary>
            <param name="keyValuePair">key value pair</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.Remove(`0)">
            <summary>
            Remove an existing key valye pair
            It should not be used for public. It could cause Keys and Values collection thread-unsafe
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value by key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.GetEnumerator">
            <summary>
            Returns enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.Utility.SafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.Utility.StringExtension">
            <summary>
            String extension
            </summary>
        </member>
        <member name="M:qshine.Utility.StringExtension.Match(System.String,System.String)">
            <summary>
            Check source text match to given pattern using regular expression
            </summary>
            <param name="source">Text to be matching</param>
            <param name="pattern">Regular expression</param>
            <returns></returns>
        </member>
        <member name="T:qshine.IIocContainer">
            <summary>
            IoC/DI Interface: Provide a common interface for DI implementation.
            NOTE: IoC/DI is a great pattern for SoC. Use it with caution. Make sure you fully understanding the concept of IoC/DI. 
            See Martin Fowler doc for more detail of concept: https://martinfowler.com/articles/injection.html
            and explain https://blogs.endjin.com/2014/04/understanding-dependency-injection/
            Beware the negative impact of the DI.
                1. Lack of lifecycle control
                2. Introduce extra complexity
                3. Missing type compile time validation
                4. Abuse interface-concrete class DI
            As a best practice:
            1. Keep IoC in high level program (composition root or close to root) 
               or, in low level infrastructure component (bootstrap or config file) to avoid coupling with your application class.
            2. Use constructor injection if possible. (use in final class, avoid for class hierarchies)
            3. Avoid setter or property injection (optional dependencies, beware the side effects)
            4. Avoid to use DI if it has only one interface implementation.
            </summary>	
        </member>
        <member name="M:qshine.IIocContainer.Resolve(System.Type,System.String)">
            <summary>
            Get an instance of the requested type with the given name.
            </summary>
            <param name="requestedType">Requested type of object. usually, a interface or high level class</param>
            <param name="name">The name of the object to be retrieved from the container. 
            Different named requested type can instantiate a different type of implementation class,
            or a different parameterized class constructor.</param>
            <returns>The instance object to be return</returns>
            <remarks>
            The same requested type could be associated to many different actual types (polymorphism, class implementation). 
            Each of them should be named differently.
            For example:
             In a multi-tenants application, most tenants consume a common service, but certain tenants require a special service. 
             We create a interface ITenantService and implement two CommonTenantService and SpecialTenantService. 
             IoC registered two service type registration, one is default and other is named "specialService".
             Now, we can consume named service for special service: 
                var specialService = container.Resolve&lt;ITenantService&gt;(specialTenantKey).
             or, just get default service without name:
                var service = container.Resolve&lt;ITenantService&gt;().
             
            If no any registered type found, it raised exception. The returned instance could be a singleton or transient object depend on registered type lifescope.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.Resolve(System.Type)">
            <summary>
            Get an instance of the requested type from the container.
            </summary>
            <param name="requestedType">Requested type of object. The requested type could be an interface or class</param>
            <returns>The instance object to be return</returns>
        </member>
        <member name="M:qshine.IIocContainer.Resolve``1">
            <summary>
            Get an instance of the requested type from the container.
            </summary>
            <typeparam name="T">Requested type of object. The requested type could be an interface or class</typeparam>
            <returns>The instance object to be return</returns>
            <remarks>
            It's the most common way to get instance through IoC.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.Resolve``1(System.String)">
            <summary>
            Get an instance of the requested type with the given name.
            </summary>
            <typeparam name="T">Requested type of object. usually, a interface or class</typeparam>
            <param name="name">The name of the object to be retrieved from container</param>
            <returns>The instance object to be return</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType(System.Type,System.Type,System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association with a lifetime option.
            </summary>
            <param name="requestedType">requested type or type interface</param>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="name">A name associate to a particular registration of interface and type calss association. 
            Null or String.Empty value indicates a default registration</param>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation. 
            valid values: 
                Singleton -- single instance live forever
                Transient -- new instance per resolver (default)
            </param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType(System.Type,System.Type,System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association.
            </summary>
            <returns>Current container instance</returns>
            <param name="requestedType">requested type or type interface</param>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="name">Name.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <remarks>
            The default liftime option is Singleton. The DefaultLifetime property could change this behavior.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType(System.Type,System.Type,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation class type association with a lifetime option. 
            </summary>
            <returns>Current container instance</returns>
            <param name="requestedType">requested type or type interface</param>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType(System.Type,System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation type class association. 
            </summary>
            <returns>Current container instance</returns>
            <param name="requestedType">requested type or type interface</param>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType(System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register a high level class type which will be resolved in component root to kick off chain of dependencies
            In most cases, this is not necessary. The Resolve wiring could be happen in configuration file module/component setting.
            </summary>
            <param name="actualType">High level class.</param>
            <param name="constructorParameters">Optional constructor parameters for class. 
            Do not put interface parameters in. They will be injected automatically.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``1(qshine.Configuration.NamedValue[])">
            <summary>
            Register a high level class type which will be resolved in component root to kick off chain of dependencies
            In most cases, this is not necessary. The Resolve wiring could be happen in configuration file module/component setting.
            </summary>
            <typeparam name="T">High level class.</typeparam>
            <param name="constructorParameters">Optional constructor parameters for class. 
            Do not put interface parameters in. They will be injected automatically.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``2(System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association with a lifetime option.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <typeparam name="T">Actual type of implementation class to be instanciated later by Resolve()</typeparam>
            <param name="name">A name associate to particular registration of interface and type calss association. null or String.Empty for default registration</param>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``2(System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <typeparam name="T">Actual type of implementation class to be instanciated later by Resolve()</typeparam>
            <param name="name">A name associate to particular registration of interface and type calss association. null or String.Empty for default registration</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``2(qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation class type association with a lifetime option. 
            </summary>
            <returns>Current container instance</returns>
            <typeparam name="IT">requested type or interface</typeparam>
            <typeparam name="T">Actual type of implementation class to be instanciated later by Resolve()</typeparam>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``2(qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation type class association. 
            </summary>
            <returns>Current container instance</returns>
            <typeparam name="IT">requested type or interface</typeparam>
            <typeparam name="T">Actual type of implementation class to be instanciated later by Resolve()</typeparam>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``1(System.Type,System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association with a lifetime option.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="name">A name associate to particular registration of interface and type calss association. null or String.Empty for default registration</param>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``1(System.Type,System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register a named requested type (interface) and implementation class type association.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="name">A name associate to particular registration of interface and type calss association. null or String.Empty for default registration</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``1(System.Type,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation class type association with a lifetime option. 
            </summary>
            <returns>Current container instance</returns>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="lifetimeOption">Option to manage the life time of IoC instance creation.</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterType``1(System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register default requested type (interface) and implementation type class association. 
            </summary>
            <returns>Current container instance</returns>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="actualType">Actual type of implementation class to be instanciated later by Resolve()</param>
            <param name="constructorParameters">Optional constructor parameters for class instanciate</param>
        </member>
        <member name="M:qshine.IIocContainer.RegisterInstance``1(``0)">
            <summary>
            Register a requested type (interface) mapping to an actual implementation class instance.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="instance">Object to be returned</param>
            <returns>Current container</returns>
            <remarks>
            The same instance will be returned regardless how the lifetime option choose.
            The instance dispose way may different for each IoC implemention. Some container may have a reference 
            to the instance, some may not.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Register a named requested type (interface) mapping to an actual implementation class instance.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="instance">Object to be returned</param>
            <param name="name">A name associate to particular registration of interface and type calss instance association.</param>
            <returns>Current container</returns>
            <remarks>
            The same instance will be returned regardless how the lifetime option choose.
            The instance dispose way may different for each IoC implemention. Some container may have a reference 
            to the instance, some may not.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Register a named requested type mapping to a particular instance.
            </summary>
            <param name="requestedType">Requested type</param>
            <param name="instance">Object to be returned</param>
            <param name="name">A name associate to a particular registration</param>
            <returns>Current container</returns>
        </member>
        <member name="M:qshine.IIocContainer.RegisterModule(System.Object)">
            <summary>
            Register required types and implementation classes from a separated module insatnce
            </summary>
            <returns>Current container</returns>
            <param name="module">IoC registration module instance.</param>
            <remarks>
            This is a convenient way to register all the types IoC suppose to resolve. A specific assembly module will be loaded
            automatically based on configuration setting or directly get from assembly.
            </remarks>
        </member>
        <member name="M:qshine.IIocContainer.RegisterModule(System.Reflection.Assembly)">
            <summary>
            Register required types and implementation classes from an assembly which implemented IoC registration module
            </summary>
            <returns>Current container</returns>
            <param name="assembly">Assembly contains IoC registration module</param>
        </member>
        <member name="P:qshine.IIocContainer.DefaultInstanceScope">
            <summary>
            Get/Set default IoC life time scope for an instance get from container
            </summary>
        </member>
        <member name="M:qshine.IIocContainer.Bind">
            <summary>
            Bind the container life time scope to current context. 
            The life time scope will hold disposable objects reference and release them when the context life time scope end.
            </summary>
        </member>
        <member name="M:qshine.IIocContainer.Unbind">
            <summary>
            Unbound the life time scope from current context.
            It will release all bound disposable objects.
            </summary>
        </member>
        <member name="T:qshine.IIocModule">
            <summary>
            Interface of IoC registration module
            </summary>
        </member>
        <member name="M:qshine.IIocModule.Load(qshine.IIocContainer)">
            <summary>
            Load IoC types registration from IoC module
            </summary>
            <param name="container">IoC Container.</param>
        </member>
        <member name="T:qshine.IoC">
            <summary>
            IoC class provides a common interface wrap for the third party components of Inversion of control/Dependency Injection.
            
            Usage:
              Step 1: Set your IoC provider if choose a third party IoC component.
                This step could be skip if you don't have a particular choice. In this case, a TinyIoC will be used.
                The framework implemented several common IoC providers. A custom IoC provider is accepted.
                
              Step 2: Register all types that need be used by DI. The best place doing this is in application initialization.
              
              Step 3: Call Resolve() to get the instance for particular type of class which is registered early.
            
              To auto release the instances created by IoC container you can use following technique:
            	IoC.Bind(httpContext);
            	IoC.Unbind(httpContext);
            
            or iocContainer.Bind(httpContext)/Unbind(httpContext;
              
            </summary>
        </member>
        <member name="P:qshine.IoC.DefaultInstanceScope">
            <summary>
            get/set default insatnce scope
            </summary>
        </member>
        <member name="P:qshine.IoC.Provider">
            <summary>
            Gets or sets IoC provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:qshine.IoC.CreateContainer">
            <summary>
            Create a new container.
            </summary>
            <returns>The container.</returns>
        </member>
        <member name="P:qshine.IoC.Current">
            <summary>
            Get IoC container to resolve interface dependency at granularity level.
            </summary>
            <remarks>
            The Container property expose the Autofac container that gives user more control on the IoC container.
            In most cases, we should not use this property, instead, call Resolve() method to get the concrete class instance.
            </remarks>
        </member>
        <member name="M:qshine.IoC.RegisterType``2">
            <summary>
            Register a service within default scope
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.RegisterType``2(System.String)">
            <summary>
            Register a named service within default scope
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="name">Specifies the service name</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.RegisterType``2(qshine.IocInstanceScope)">
            <summary>
            Register a service within a scope. 
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="instanceScope">service instance scope</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.RegisterType``2(System.String,qshine.IocInstanceScope)">
            <summary>
            Register a named scope within a scope
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="instanceScope">service instance scope</param>
            <param name="name">Specifies the service name</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddTransient``2">
            <summary>
            Add a transient service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddTransient``2(System.String)">
            <summary>
            Add a named transient service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="name">Specifies the service name</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddSingleton``2">
            <summary>
            Add a singleton service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddSingleton``2(System.String)">
            <summary>
            Add a named singleton service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="name">Specifies the service name</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddScoped``2">
            <summary>
            Add a scoped service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.AddScoped``2(System.String)">
            <summary>
            Add a named scoped service
            </summary>
            <typeparam name="IT">service interface</typeparam>
            <typeparam name="T">service implementation class</typeparam>
            <param name="name">Specifies the service name</param>
            <returns>current container</returns>
        </member>
        <member name="M:qshine.IoC.Resolve``1">
            <summary>
            Wireup IoC interfaces with corresponding concrete implementation through Autofac components Resolve corresponding repository interface
            </summary>
            <typeparam name="T">Type of interface ready for consume</typeparam>
            <returns>A concrete class instance associate with specified type of interface</returns>
            <remarks>
            This is a common and generic method to resolve the IoC dependency. 
            Call this method you don't need add any reference points to specific IoC/DI components (in this case
            it's the Autofac).
            But when the IoC become more complex, suggest using Builder and Container properties to register and resolve
            interface and dependency.
            
            Pre-condition:
            The type of interface to be invoked should be register earier. We suggest using structed module to register 
            the IoC for concrete classes that could minimize the dependency between concrete class and interface consumer.
            </remarks>
        </member>
        <member name="M:qshine.IoC.Resolve``1(System.String)">
            <summary>
            Resolve a named service
            </summary>
            <typeparam name="T">service interface</typeparam>
            <param name="name">The service name</param>
            <returns>A concrete class instance associate with specified type of interface</returns>
        </member>
        <member name="M:qshine.IoC.Bind">
            <summary>
            bind injected instances to context
            </summary>
        </member>
        <member name="M:qshine.IoC.Unbind">
            <summary>
            Unbind/release all bound injected instances
            </summary>
        </member>
        <member name="M:qshine.IoC.#ctor">
            <summary>
            Hide constructor
            </summary>
        </member>
        <member name="T:qshine.IoCException">
            <summary>
            Defines an IoC exception while dealing with actual IoC component.
            </summary>
        </member>
        <member name="M:qshine.IoCException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:qshine.IoCException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
             </param>
        </member>
        <member name="M:qshine.IoCException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="T:qshine.IocContainerBase">
            <summary>
            Base implementation of IIoCContainer for IoC.
            The actual concrete IoC container should be inherited from this base
            </summary>
        </member>
        <member name="P:qshine.IocContainerBase.DefaultInstanceScope">
            <summary>
            Get/Set default IoC scope
            </summary>
        </member>
        <member name="M:qshine.IocContainerBase.Resolve``1">
            <summary>
            Get actual implementation class instance of the requested type (interface) from container
            </summary>
            <typeparam name="T">Requested type. usually, a interface or base class</typeparam>
            <returns>The actual implementation class instance object to be return</returns>
            <remarks>
            If no any matched type found, it raised exception. The instance could be a singleton or transient object
            </remarks>
        </member>
        <member name="M:qshine.IocContainerBase.Resolve``1(System.String)">
            <summary>
            Get actual named implementation class instance of the requested type (interface) from container
            </summary>
            <typeparam name="T">Requested type of object. usually, a interface or class</typeparam>
            <param name="name">The name of IoC registration for the given requested type</param>
            <returns>The actual implementation class instance object to be return</returns>
        </member>
        <member name="M:qshine.IocContainerBase.Resolve(System.Type,System.String)">
            <summary>
            Get actual named implementation class instance of the requested type (interface) from container
            </summary>
            <param name="requestedType">Requested type. usually, a interface or base class</param>
            <param name="name">The name of IoC registration for the given requested type</param>
            <returns>The actual implementation class instance object to be return</returns>
        </member>
        <member name="M:qshine.IocContainerBase.Resolve(System.Type)">
            <summary>
            Get actual implementation class instance of the requested type (interface) from container
            </summary>
            <param name="requestedType">Requested type. usually, a interface or base class</param>
            <returns>The actual implementation class instance object to be return</returns>
            <remarks>
            If no any matched type found, it raised exception. The instance could be a singleton or transient object
            </remarks>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType(System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register type
            </summary>
            <param name="actualType"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``1(qshine.Configuration.NamedValue[])">
            <summary>
            Register a type with constructor parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``2(qshine.Configuration.NamedValue[])">
            <summary>
            Register an interface associate with its implementation
            </summary>
            <typeparam name="IT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``2(System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register a name interface and type
            </summary>
            <typeparam name="IT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``2(qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register with specific scope option
            </summary>
            <typeparam name="IT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``2(System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register named type
            </summary>
            <typeparam name="IT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``1(System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register named type
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="actualType"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``1(System.Type,System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register named type
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="actualType"></param>
            <param name="name"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``1(System.Type,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register type
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="actualType"></param>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType``1(System.Type,System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register name type
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="actualType"></param>
            <param name="name"></param>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType(System.Type,System.Type,qshine.Configuration.NamedValue[])">
            <summary>
            Register type
            </summary>
            <param name="requestedType"></param>
            <param name="actualType"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType(System.Type,System.Type,System.String,qshine.Configuration.NamedValue[])">
            <summary>
            Register named type
            </summary>
            <param name="requestedType"></param>
            <param name="actualType"></param>
            <param name="name"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType(System.Type,System.Type,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            Register type
            </summary>
            <param name="requestedType"></param>
            <param name="actualType"></param>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterType(System.Type,System.Type,System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            This method must be implemented in each IoC IIoCContainer provider class
            </summary>
            <param name="requestedType">requested type</param>
            <param name="actualType">actual type of instance to be created later</param>
            <param name="name">A name associate to particular registration. null for default registration</param>
            <param name="instanceScopeOption">Option to manage the life time of instance creating.</param>
            <param name="constructorParameters">constructor parameters</param>
            <returns>Current container instance</returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterInstance``1(``0)">
            <summary>
            Register a requested type (interface) mapping to an actual implementation class instance.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="instance">Object to be returned</param>
            <returns>Current container</returns>
            <remarks>
            The same instance will be returned regardless how the lifetime option choose.
            The instance dispose way may different for each IoC implemention. Some container may have a reference 
            to the instance, some may not.
            </remarks>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterInstance``1(``0,System.String)">
            <summary>
            Register a named requested type (interface) mapping to an actual implementation class instance.
            </summary>
            <typeparam name="IT">requested type or interface</typeparam>
            <param name="instance">Object to be returned</param>
            <param name="name">A name associate to particular registration of interface and type calss instance association.</param>
            <returns>Current container</returns>
            <remarks>
            The same instance will be returned regardless how the lifetime option choose.
            The instance dispose way may different for each IoC implemention. Some container may have a reference 
            to the instance, some may not.
            </remarks>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterInstance(System.Type,System.Object)">
            <summary>
            Register a named requested type (interface) mapping to an actual implementation class instance.
            </summary>
            <param name="requestedType">Requested type</param>
            <param name="instance">Object to be returned</param>
            <returns>Current container</returns>
            <remarks>
            The same instance will be returned regardless how the lifetime option choose.
            The instance dispose way may different for each IoC implemention. Some container may have a reference 
            to the instance, some may not.
            </remarks>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Register a named requested type mapping to a particular instance.
            </summary>
            <param name="requestedType">Requested type</param>
            <param name="instance">Object to be returned</param>
            <param name="name">A name associate to a particular registration</param>
            <returns>Current container</returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterModule(System.Object)">
            <summary>
            Register types through a module
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.RegisterModule(System.Reflection.Assembly)">
            <summary>
            Register types through assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.IocContainerBase.GetLifetimeScope(System.String)">
            <summary>
            
            </summary>
            <param name="instanceScopeOption"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocContainerBase.LoadType(System.String,System.Reflection.Assembly)">
            <summary>
            Load a class type from a qualified type name or assembly
            </summary>
            <param name="typeName">Qualified type name. Such as "class_name_space, assembly"</param>
            <param name="assembly">Assembly contains specified type.</param>
            <returns>Type of class</returns>
        </member>
        <member name="M:qshine.IocContainerBase.ResolveTypedValue(System.Object,System.Type)">
            <summary>
            Convert a value to a specific type object
            </summary>
            <param name="value">The value to be convert</param>
            <param name="requestedType">The result type of object </param>
            <returns>converted object </returns>
        </member>
        <member name="M:qshine.IocContainerBase.GetConstructorParameterType(System.Type,System.String)">
            <summary>
            Get constructor parameter type by parameter name
            </summary>
            <param name="classType">type of class which has constructor parameter to be resolve</param>
            <param name="parameterName">Constructor parameter name</param>
            <returns>type of constructor parameter</returns>
        </member>
        <member name="P:qshine.IocContainerBase.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="M:qshine.IocContainerBase.Bind">
            <summary>
            Bind the life time scope to the context.
            </summary>
        </member>
        <member name="M:qshine.IocContainerBase.Unbind">
            <summary>
            Unbind the container
            </summary>
        </member>
        <member name="T:qshine.IocInstanceScope">
            <summary>
            The options to control instance lifetime scope.
            </summary>
        </member>
        <member name="F:qshine.IocInstanceScope.Singleton">
            <summary>
            Signle instance per container.
            </summary>
        </member>
        <member name="F:qshine.IocInstanceScope.Transient">
            <summary>
            New instance for each request.
            </summary>
        </member>
        <member name="F:qshine.IocInstanceScope.Scoped">
            <summary>
            New instance per call context scoped. It could be a web request, logic call context or any scope of the context implemented IContextStore.
            Use context bind/unbind to scope and release instance per-context request.
            </summary>
        </member>
        <member name="T:qshine.TinyIocProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.TinyIocProvider.CreateContainer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.IocTinyIoc">
            <summary>
            Implementation of IContainer for TinyIoC component.
            Native interface:
                public TinyIoCContainer TinyContainer
            </summary>
        </member>
        <member name="M:qshine.IocTinyIoc.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.IocTinyIoc.Resolve(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="interfaceType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocTinyIoc.RegisterType(System.Type,System.Type,System.String,qshine.IocInstanceScope,qshine.Configuration.NamedValue[])">
            <summary>
            
            </summary>
            <param name="requestedType"></param>
            <param name="actualType"></param>
            <param name="name"></param>
            <param name="instanceScopeOption"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocTinyIoc.RegisterInstance``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocTinyIoc.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="requestedType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.IocTinyIoc.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.IocTinyIoc.Bind">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.IocTinyIoc.Unbind">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.IocTinyIoc.TinyContainer">
            <summary>
            Get TinyIoC container to resolve interface dependency at granularity level.
            </summary>
            <remarks>
            The Container property expose the TinyIoC container that gives user more control on the IoC container.
            In most cases, we should not use this property, instead, call Resolve() method to get the concrete class instance.
            </remarks>
        </member>
        <member name="T:qshine.IIocProvider">
            <summary>
            Ioc provider.
            </summary>
        </member>
        <member name="M:qshine.IIocProvider.CreateContainer">
            <summary>
            Create a container
            </summary>
            <returns>The container.</returns>
        </member>
        <member name="T:qshine.PluggableComponent">
            <summary>
            Pluggable component from plugin configure setting
            </summary>
        </member>
        <member name="P:qshine.PluggableComponent.ConfigureFilePath">
            <summary>
            Component configure file path. 
            </summary>
        </member>
        <member name="P:qshine.PluggableComponent.Name">
            <summary>
            Gets or sets the name of component.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:qshine.PluggableComponent.InterfaceTypeName">
            <summary>
            Gets or sets the name of the interface type.
            It represents qualified type of component interface or base class.
            The assembly could be placed in any folder specied by environment config file
            </summary>
            <value>The name of the interface type.</value>
        </member>
        <member name="P:qshine.PluggableComponent.InterfaceType">
            <summary>
            Gets or sets the type of the interface type.
            </summary>
            <value>The type of the interface.</value>
        </member>
        <member name="P:qshine.PluggableComponent.ClassTypeName">
            <summary>
            Gets or sets the name of the class type setting value.
            It represents a qualified type for interface implementation class
            The assembly could be placed in any folder specied by environment config file
            </summary>
            <value>The name of the class type.</value>
        </member>
        <member name="P:qshine.PluggableComponent.ClassType">
            <summary>
            Gets or sets the type of the class.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:qshine.PluggableComponent.Parameters">
            <summary>
            Gets or sets the parameters for component class constructor.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:qshine.PluggableComponent.Scope">
            <summary>
            Defines a life scope of the component.
            The valid scopes are:
                Singleton,
                Transient
                
            The value could be mapped to IocInstanceScope.
            </summary>
        </member>
        <member name="P:qshine.PluggableComponent.IsDefault">
            <summary>
            Indicates a default type of service for given interface.
            If more than one default components found, it always picks first one as default.
            </summary>
        </member>
        <member name="P:qshine.PluggableComponent.InvalidReason">
            <summary>
            The reason of failure. 
            </summary>
        </member>
        <member name="M:qshine.PluggableComponent.CreateInstance">
            <summary>
            Create a component instance.
            If the scope of compoennt is a singleton instance, it always returns the same one.
            Otherwise, it creates a new instance.
            </summary>
            <remarks>
            The component will hold an reference of singleton instance.
            </remarks>
        </member>
        <member name="M:qshine.PluggableComponent.Instantiate(qshine.Configuration.ApplicationEnvironmentContext)">
            <summary>
            Instantiate the plugable component
            </summary>
            <returns>
            Returns true if the component instanciated without error.
            </returns>
        </member>
        <member name="M:qshine.PluggableComponent.SafeLoadType(qshine.Configuration.ApplicationEnvironmentContext,System.String)">
            <summary>
            Load a qualified type without throw exception
            </summary>
            <returns>The type or null.</returns>
            <param name="context">Application environment contex.</param>
            <param name="typeValue">Type value.</param>
        </member>
        <member name="T:qshine.PluggableAssembly">
            <summary>
            Pluggable assembly component
            </summary>
        </member>
        <member name="P:qshine.PluggableAssembly.Path">
            <summary>
            Gets or sets the path of assembly.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:qshine.PluggableAssembly.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:qshine.PluggableAssembly.Initialized">
            <summary>
            Indicates the assembly has been initialized
            </summary>
        </member>
        <member name="T:qshine.EnvironmentEx">
            <summary>
            Application environment extension
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.Machine">
            <summary>
            Get computer machine name and IP
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.MachineIp">
            <summary>
            Get computer machine IP
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.CpuArchitecture">
            <summary>
            Return current application running platform x86, x64, arm or arm64.
            Note: qshine builder target on Any CPU. It could load component from x86 or x64 
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.OSPlatform">
            <summary>
            Get current operation system code
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.LibraryVersion">
            <summary>
            Get qshine library version number
            </summary>
        </member>
        <member name="P:qshine.EnvironmentEx.TargetFramework">
            <summary>
            Get target framewrok of build
            </summary>
        </member>
        <member name="T:qshine.JsonDiffer">
            <summary>
            Find difference properties and values compare two objects
            </summary>
        </member>
        <member name="M:qshine.JsonDiffer.#ctor(System.Object,System.Object)">
            <summary>
            Compare two entity objects
            </summary>
            <param name="objectLeft">object 1</param>
            <param name="objectRight">object 2</param>
        </member>
        <member name="M:qshine.JsonDiffer.#ctor(System.String,System.String)">
            <summary>
            Compare two JSON objects
            </summary>
            <param name="jsonLeft">JSON formatted object 1</param>
            <param name="jsonRight">JSON formatted object 2</param>
        </member>
        <member name="M:qshine.JsonDiffer.GetDiff">
            <summary>
            Compare two given objects and find different property names and values.
            The output JSON objects contain difference of the properties and values.
            The same property and value will be ignored.
            </summary>
            <returns>a list of value difference</returns>
        </member>
        <member name="T:qshine.ObjectInspector">
            <summary>
            Inspect object properties value
            
            obj.FormatObjectValues;
            </summary>
        </member>
        <member name="M:qshine.ObjectInspector.FormatObjectValues(System.Object)">
            <summary>
            inspect and format class object property detail information
            </summary>
            <param name="obj">object to be inspected</param>
            <returns>Formatted detail object property information</returns>
        </member>
        <member name="M:qshine.ObjectInspector.GetExceptionCallStack(System.Exception)">
            <summary>
            Get exception call stack information
            </summary>
            <param name="ex">Exception object</param>
            <returns>Call stack of the exception</returns>
        </member>
        <member name="T:qshine.EnumExtension">
            <summary>
            .NET Enum class extension
            </summary>
        </member>
        <member name="M:qshine.EnumExtension.GetStringValue(System.Enum,qshine.EnumValueType)">
            <summary>
            Convert a enum to a string value..
            </summary>
            <param name="value">A enum property</param>
            <param name="option">Indicates different format of string.
                EnumValueType.OriginalValue: return a numberic value
                EnumValueType.OriginalString: return enum defined name
                EnumValueType.StringValue: return "StringValue" attribute on enum property.
                
                default is original enum string
            </param>
            <returns>Returns a given formatted enum property string</returns>
        </member>
        <member name="M:qshine.EnumExtension.Format(System.Enum,System.Object[])">
            <summary>
            Using String.Format() to format a given enum StringValue.
            </summary>
            <param name="value">A enum property</param>
            <param name="args">format arguments</param>
            <returns></returns>
        </member>
        <member name="M:qshine.EnumExtension.GetEnumValue``1(System.String,qshine.EnumValueType)">
            <summary>
            Convert a string to a particular type of enum value.
            </summary>
            <returns>The enum value or throw an exception if it is not an expected string.</returns>
            <param name="value">A string value to be converted.</param>
            <param name="option">Indicates different format of string.
                EnumValueType.OriginalValue: return a numberic value
                EnumValueType.OriginalString: return enum defined name
                EnumValueType.StringValue: return "StringValue" attribute on enum property.
                
                default is original enum string
            </param>
            <typeparam name="T">The Enum type to be return.</typeparam>
        </member>
        <member name="M:qshine.EnumExtension.GetEnumValue``1(System.String,``0,qshine.EnumValueType)">
            <summary>
            Convert a string to a particular type of enum value.
            If the string is unidentified, it returns faultEnumValue.
            </summary>
            <returns>The enum value.</returns>
            <param name="value">A string value to be converted.</param>
            <param name="faultEnumValue">Use this value if the string is an invalid enum value.</param>
            <typeparam name="T">Type of enum to be converted.</typeparam>
            <param name="option"></param>
        </member>
        <member name="T:qshine.StringValueAttribute">
             <summary>
             String value attribute for Enum
             Usage:
             1. Define enum with a string value attribute
             <![CDATA[
             public enum EnumSample
             {
                [StringValue("Status 1")]
                Status1,
                [StringValue("Status 2")]
                Status2,
                [StringValue("Status 3")]
                Status3,
                [StringValue("Status 4")]
                Status4,
                Fault handler for internal use only
                [StringValue("Unknown value")]
                Unknown = -1
            }
            ]]>
             2. Get string value from enum
            
             </summary>
        </member>
        <member name="P:qshine.StringValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:qshine.StringValueAttribute.#ctor(System.String)">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:qshine.EnumValueType">
            <summary>
            Define enum for any enum value that required by enum reader
            </summary>
        </member>
        <member name="F:qshine.EnumValueType.OriginalValue">
            <summary>
            Return int type value of the enum, such as "0"
            </summary>
        </member>
        <member name="F:qshine.EnumValueType.OriginalString">
            <summary>
            Return enum Name string, such as "OriginalString"
            </summary>
        </member>
        <member name="F:qshine.EnumValueType.StringValue">
            <summary>
            Return StringValue attribute value of enum, such as "Original String".
            </summary>
        </member>
        <member name="T:qshine.ContextManager">
            <summary>
            The context is used to hold a set of data within a particular operation scope.
            The context data is accessable from different layers without pass a reference.
            The operation period lifecycle could be a request, thread, session or others which bound to one given execution path. 
            The well-known context has: HttpContext, OperationContext, CallContext.
            The static context is a global storage accross running application.
            
            The context manager provider service to access current context store object based on initial setting. 
            It also allow access different context store by a given context type unique name 
            
                ContextManager.Current.SetData(key, data);
                ContextManager.Current.GetData(key);
                IContextStore contextStore = ContextManager.GetContextStore(ContextStoreType.Static);
                contextStore.SetData(key,data)
            
            
            </summary>
        </member>
        <member name="M:qshine.ContextManager.GetContextStore(qshine.ContextStoreType)">
            <summary>
            Get a specific type of context store
            </summary>
            <param name="storeType">type of context store</param>
            <returns></returns>
        </member>
        <member name="P:qshine.ContextManager.Current">
            <summary>
            Gets or sets the name of the context type.
            </summary>
            <value>The name of the context type.</value>
            <remarks>
            It should only one type of Current context exists in application execution path.
            Othere type context store can be found using GetContextStore()
            </remarks>
        </member>
        <member name="M:qshine.ContextManager.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:qshine.ContextManager.GetData(System.String)">
            <summary>
            Gets the data.
            </summary>
            <returns>The data.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.ContextManager.FreeData(System.String)">
            <summary>
            Frees the data.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:qshine.ContextManager.CallContext">
            <summary>
            Get call context
            </summary>
        </member>
        <member name="P:qshine.ContextManager.StaticContext">
            <summary>
            Get Static context
            </summary>
        </member>
        <member name="P:qshine.ContextManager.ThreadContext">
            <summary>
            Get call context
            </summary>
        </member>
        <member name="T:qshine.CallContextStore">
            <summary>
            Wrap .NET call context Logic data
            This context shared data cross threads, AppDomains, processes within logic execution path. 
            </summary>
        </member>
        <member name="M:qshine.CallContextStore.GetData(System.String)">
            <summary>
            Gets the context data.
            </summary>
            <returns>The data.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.CallContextStore.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:qshine.CallContextStore.FreeData(System.String)">
            <summary>
            Frees the data.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:qshine.CallContextStore.ContextType">
            <summary>
            Gets the name of the context type.
            </summary>
            <value>The name of the context type.</value>
        </member>
        <member name="T:qshine.LocalContextStore">
            <summary>
            This context shared data within thread.
            Do not use ThreadLocal. The ThreadLocal do not clean up previous thread context if the thread id is same.
            </summary>
        </member>
        <member name="M:qshine.LocalContextStore.GetData(System.String)">
            <summary>
            Gets the local thread context data.
            </summary>
            <returns>The data.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.LocalContextStore.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:qshine.LocalContextStore.FreeData(System.String)">
            <summary>
            Frees the data.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:qshine.LocalContextStore.ContextType">
            <summary>
            Gets the name of the context type.
            </summary>
            <value>The name of the context type.</value>
        </member>
        <member name="T:qshine.CallContext">
            <summary>
            CallContext implementation for NET CORE
            </summary>
        </member>
        <member name="M:qshine.CallContext.SetData``1(System.String,``0)">
            <summary>
            Set data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="data"></param>
        </member>
        <member name="M:qshine.CallContext.GetData(System.String)">
            <summary>
            Get data
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.CallContext.LogicalGetData(System.String)">
            <summary>
            Get data for logical context
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.CallContext.LogicalSetData(System.String,System.Object)">
            <summary>
            Set data for logical data
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:qshine.CallContext.FreeNamedDataSlot(System.String)">
            <summary>
            Release context named slot
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:qshine.IContextStore">
            <summary>
            Context store interface
            </summary>
        </member>
        <member name="M:qshine.IContextStore.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">Name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:qshine.IContextStore.GetData(System.String)">
            <summary>
            Gets the data.
            </summary>
            <returns>The data.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.IContextStore.FreeData(System.String)">
            <summary>
            Frees the data.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:qshine.IContextStore.ContextType">
            <summary>
            Get context type
            </summary>
        </member>
        <member name="T:qshine.IProvider">
            <summary>
            Pluggable provider component.
            The provider usually implemented factory pattern to create instance.
            </summary>
        </member>
        <member name="T:qshine.Check">
            <summary>
            Valifies conditions and throw exception when the confition failed.
            </summary>
        </member>
        <member name="M:qshine.Check.HaveValue(System.String,System.String)">
            <summary>
            Ensure the value is not null or empty.
            Throw ArgumentNullException exception with the parameter name if the given string object 
            is null or empty.
            </summary>
            <param name="value">The given value should not be null or empty.</param>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:qshine.Check.HaveValue(System.Object,System.String)">
            <summary>
            Ensure the object value is not null.
            Throw ArgumentNullException exception with the parameter name if the given object is null.
            </summary>
            <param name="value">The given value should not be null.</param>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:qshine.Check.Assert``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Check for a condition and ensure the condition is true.
            Throw a new type of exception with proper error message if the condition is false.
            </summary>
            <param name="condition">Ensure the condition is true.</param>
            <param name="format">Error message format.</param>
            <param name="args">Error message arguments.</param>
            <typeparam name="T">The Exception to be thrown if the condition failed.</typeparam>
        </member>
        <member name="T:qshine.DbClient">
            <summary>
            Provide database access service.
            DbClient is not a thread safe class. 
            
            </summary>
        </member>
        <member name="F:qshine.DbClient._interceptor">
            <summary>
            The interceptor must be a static instance (singleton).
            </summary>
        </member>
        <member name="M:qshine.DbClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbClient"/> class for default configued database.
            The default default configured database is set by environment configuration default database connection string.
            </summary>
        </member>
        <member name="M:qshine.DbClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbClient"/> class with given database provider name and connection string.
            Same database context will be reused within same call context.
            </summary>
            <param name="providerName">database provider name</param>
            <param name="connectionString">database connection string</param>
        </member>
        <member name="M:qshine.DbClient.#ctor(qshine.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbClient"/> class for a given database instance.
            Same database context will be reused within same call context.
            </summary>
            <param name="database">Database instance.</param>
        </member>
        <member name="M:qshine.DbClient.#ctor(qshine.DbSession)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbClient"/> class for a given database context.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:qshine.DbClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:qshine.DbClient.Session">
            <summary>
            DBClient session
            </summary>
        </member>
        <member name="M:qshine.DbClient.ExecuteNonQuery(System.Data.CommandType,System.String,qshine.DbParameters)">
            <summary>
            Execute Sql statement or a stored procedure and return number of rows affected.
            </summary>
            <param name="commandType">A CommandType object to indicate a Sql command or a storedprocedure command</param>
            <param name="commandString">SQL statement or stored procedure</param>
            <param name="parameters">input parameters and output parameters</param>
        </member>
        <member name="M:qshine.DbClient.ExecuteScalar(System.Data.CommandType,System.String,qshine.DbParameters)">
            <summary>
            Execute Sql statement or a stored procedure and return first value selected from the sql.
            </summary>
            <param name="commandType">A CommandType object to indicate a Sql command or a storedprocedure command</param>
            <param name="commandString">SQL statement or stored procedure</param>
            <param name="parameters">input parameters and output parameters</param>
            <returns>Return first selected value from query</returns>
            <example>
            <![CDATA[
                ExecuteScalar(CommandType.Text,
                    "select 1 from tb1 where name=:p1 and age=:p2", 
                    DbParameters.New.Input("p1",name).Input("p2",age).Output<int>("p3"))
            ]]>
            </example>
        </member>
        <member name="M:qshine.DbClient.ExecuteReader(System.Action{System.Data.IDataReader},System.Data.CommandType,System.String,qshine.DbParameters)">
            <summary>
            Execute a SQL statement or StoredProcedure and retrieve batch data from IDataReader through callback method.
            The callback method need deal with data reader for each record.
            </summary>
            <param name="readerData">A function to process data reader. The reader will be dispose after process completed</param>
            <param name="commandType">A CommandType object to indicate a Sql command or a storedprocedure command</param>
            <param name="commandString">SQL statement or stored procedure</param>
            <param name="parameters">input parameters and output parameters</param>
        </member>
        <member name="M:qshine.DbClient.Sql(System.String,qshine.DbParameters)">
            <summary>
            Execute a SQL statement with parameters
            </summary>
            <param name="commandString">SQL statement</param>
            <param name="parameters">input and output parameters for SQL statement.</param>
            <returns>Return rows affected</returns>
        </member>
        <member name="M:qshine.DbClient.Sql(System.Collections.Generic.List{System.String},qshine.Specification.Validator)">
            <summary>
            Execute a SQL statements with parameters
            </summary>
            <param name="batchStatements">sql statement</param>
            <param name="results">Receives validation results
            It also receives batch exception if some sqls failed.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.Sql(qshine.DbSqlStatement)">
            <summary>
            Execute a Sql statement
            </summary>
            <param name="sql">sql statement with parameters</param>
            <returns>result of the sql statement</returns>
        </member>
        <member name="M:qshine.DbClient.Sql(System.Collections.Generic.List{qshine.DbSqlStatement},qshine.Specification.Validator)">
            <summary>
            Execute a batch Sql statements
            </summary>
            <param name="batchStatements">sql statements</param>
            <param name="results">Receive validation results</param>
            <returns>True to indicate success.</returns>
        </member>
        <member name="M:qshine.DbClient.Sql(qshine.ConditionalSql,qshine.Specification.Validator)">
            <summary>
            Execute sql when condition satisfied
            </summary>
            <param name="sql">conditional sql instance.</param>
            <param name="results">Receive validation results</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.Sql(System.Collections.Generic.List{qshine.ConditionalSql})">
            <summary>
            Execute condition sqls
            </summary>
            <param name="batchSqls">a list of condition sql</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.Sql(System.Collections.Generic.List{qshine.ConditionalSql},qshine.Specification.Validator)">
            <summary>
            Execute conditional sqls.
            </summary>
            <param name="batchSqls">conditional sqls</param>
            <param name="results">Receive validation results</param>
            <returns>true if no any exception.</returns>
        </member>
        <member name="M:qshine.DbClient.StoredProcedure(System.String,qshine.DbParameters)">
            <summary>
            Execute a stored procedure
            </summary>
            <param name="storedProcedure">Stored procedure name</param>
            <param name="parameters">input and output parameters for stored procedure </param>
            <remarks>
            Using output parameter object to retrieve data from a stored procedure
            </remarks>
        </member>
        <member name="M:qshine.DbClient.SqlSelect(System.String,qshine.DbParameters)">
            <summary>
            Execute a SQL statement
            </summary>
            <param name="commandString">SQL statement</param>
            <param name="parameters">input and output parameters for SQL statement.</param>
            <returns>Return rows affected</returns>
        </member>
        <member name="M:qshine.DbClient.SqlReader(System.Action{System.Data.IDataReader},System.String,qshine.DbParameters)">
            <summary>
            Execute a SQL statement and retrieve batch data from IDataReader
            </summary>
            <param name="readerData">A function to process data reader. The reader will be dispose after process completed</param>
            <param name="commandString">SQL statement</param>
            <param name="parameters">input parameters for SQL statement.</param>
        </member>
        <member name="M:qshine.DbClient.SqlDataTable(System.String,qshine.DbParameters)">
            <summary>
            Execute SQL and read data into data table and allow data work offline.
            </summary>
            <param name="commandString">Sql statement</param>
            <param name="parameters">arguments for Sql statement</param>
            <returns>A data table that hold a set of records retrieved from Sql</returns>
        </member>
        <member name="M:qshine.DbClient.Retrieve``1(System.Func{System.Data.IDataReader,``0},System.String,qshine.DbParameters)">
            <summary>
            Retrieve a list of entity from a sql statement
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="ParseObjectFromReader">Callback function to parse data reader into an entity object</param>
            <param name="commandString">SQL statement</param>
            <param name="parameters">input parameters for SQL statement.</param>
            <returns>A list of entity object</returns>
        </member>
        <member name="M:qshine.DbClient.ToBoolean(System.Object)">
            <summary>
            Convert common text to boolean type value
            </summary>
            <param name="value">Common boolean text such as
            1, -1, "t", "y"
            </param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.Insert(System.String,System.String,System.Object[])">
            <summary>
            Build insert statement and execute sql
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.ParameterName(System.String)">
            <summary>
            generate sql parameter name with a prefix
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.DbClient.CreateCommand">
            <summary>
            Get an opened database connection
            </summary>
        </member>
        <member name="M:qshine.DbClient.MapParameterToNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map a common data parameter to a provider specific native data parameter
            </summary>
            <param name="common">common parameter</param>
            <param name="native">database native parameter</param>
        </member>
        <member name="M:qshine.DbClient.MapParameterFromNative(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Map a data provider specific native data parameter to a common data parameter
            </summary>
            <param name="common">common parameter</param>
            <param name="native">database native parameter</param>
        </member>
        <member name="T:qshine.DbClientExtension">
            <summary>
            DbClient extension
            </summary>
        </member>
        <member name="M:qshine.DbClientExtension.SqlSelect``1(System.String,qshine.DbParameters)">
            <summary>
            Shortcut of SqlSelect
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandString"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.Interceptor">
            <summary>
            Interceptor class used to intercept a method executing.
            It is a simple way for AOP.
            Join point: add join point around a method to intercept method information. The method call information (include method name, parameters and return value) will be pass to intercept handler.
            Like AOP Advice, the interceptor handler can implement crosscutting behavior for given join point.
            Not like AOP Point cut, the interceptor do not need define Point cut. The event handler can determine join point method by method name and arguments directly.
            Using generic T to monitor which class to be intercept.
            The first argument of event handler always be a target object which is the executing method object instance.
            The second argument of event handler (InterceptorEventArgs) will contain method name, arguments and return value. 
            No AOP proxy in this simple implementation. add join point in method directly to intercept method data.
            </summary>
        </member>
        <member name="M:qshine.Interceptor.Get(System.Type)">
            <summary>
            Get an interceptor instance of a class.
            Each class only has one interceptor instance.
            
            Use interceptor instance to capture class method execution stage events (enter/exit/exception/complete).
            </summary>
            <returns>interceptor instance</returns>
            <param name="type">The type of class which have methods to be intercepted</param>
        </member>
        <member name="M:qshine.Interceptor.Get``1">
            <summary>
            Get an interceptor instance of a class.
            </summary>
            <typeparam name="T">type of a class</typeparam>
            <returns>interceptor instance</returns>
        </member>
        <member name="M:qshine.Interceptor.LoadInterceptors">
            <summary>
            Load all interceptors from default app domain and pluggable assemblies
            </summary>
        </member>
        <member name="M:qshine.Interceptor.RegisterHandlerType(System.Type)">
            <summary>
            Registers interceptor handler which implemented IInterceptorHandler.
            </summary>
            <returns><c>true</c>, if handler was registered, <c>false</c> otherwise.</returns>
            <param name="interceptorHandlerType">Handler type to process registered interceptor"/> "/> .</param>
        </member>
        <member name="F:qshine.Interceptor._typeRegistry">
            <summary>
            The registry of all interceptors.
            One registry per type.
            </summary>
        </member>
        <member name="F:qshine.Interceptor._handlerRegistry">
            <summary>
            The registry of all interceptor event handlers.
            One handler deal with one particular interceptor event.
            The plugin handler instance will be created automatically by ApplicationEnvironment.Build.
            </summary>
        </member>
        <member name="E:qshine.Interceptor.OnEnter">
            <summary>
            Event handler for enter into the function
            </summary>
        </member>
        <member name="E:qshine.Interceptor.OnSuccess">
            <summary>
            Event handler for the function completed without error exception
            </summary>
        </member>
        <member name="E:qshine.Interceptor.OnException">
            <summary>
            Event handler for the function throw exception
            </summary>
        </member>
        <member name="E:qshine.Interceptor.OnExit">
            <summary>
            Event handler for leave the function
            </summary>
        </member>
        <member name="E:qshine.Interceptor.OnForEach">
            <summary>
            Event handler for iterate over each element in the loops
            </summary>
        </member>
        <member name="M:qshine.Interceptor.#ctor">
            <summary>
            Ctor::
            </summary>
        </member>
        <member name="M:qshine.Interceptor.RaiseOnEnterEvent(System.Object,qshine.InterceptorEventArgs)">
            <summary>
            Raise an OnEnter event for entering the method.
            
            You can manually call RaiseOnEnterEvent() in the begin of the method to set a join point.
            </summary>
            <param name="sender">Usually is the caller instance object</param>
            <param name="eventArgs">InterceptorEventArgs type argument.</param>
            <returns>Indicates a StopExecution flag from event argument has been set.</returns>
        </member>
        <member name="M:qshine.Interceptor.RaiseOnSuccessEvent(System.Object,qshine.InterceptorEventArgs)">
            <summary>
            Raise an OnSuccess event when a method completed successfully without exception.
            
            You can manually call RaiseOnSuccessEvent() in end of the method to set a join point.
            </summary>
            <param name="sender">Usually is the caller instance object</param>
            <param name="eventArgs">InterceptorEventArgs type argument from source.</param>
            <returns>Returns true if </returns>
        </member>
        <member name="M:qshine.Interceptor.RaiseOnExceptionEvent(System.Object,qshine.InterceptorEventArgs)">
            <summary>
            Raise an OnException event when the method throw an exception.
            
            You can manually call RaiseOnExceptionEvent() in the exception catch block to set a join point.
            
            The event handler can pass a flag back to stop raise exception.
            </summary>
            <param name="sender">Usually is the caller instance object</param>
            <param name="eventArgs">InterceptorEventArgs type argument from source.</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Interceptor.RaiseOnExitEvent(System.Object,qshine.InterceptorEventArgs)">
            <summary>
            Raise an OnExit event when the method exit.
            
            You can manually call RaiseOnExitEvent() in the end of the method or end of exception to set a join point.
            </summary>
            <param name="sender">Usually is the caller instance object</param>
            <param name="eventArgs">InterceptorEventArgs type argument from source.</param>
        </member>
        <member name="M:qshine.Interceptor.JoinPoint``1(System.Func{``0},System.Object,System.String,System.Object[])">
            <summary>
            Method intercept. It add joinpoint in method enrty/exit, execution and exception handler.
            Use OnXXX events to inject "advice procedure" into joinpoint to perform additional function.
            </summary>
            <returns>The return value from the method. The "advice procedure may modify the return value.</returns>
            <param name="method">The base code method which has a set of join points.</param>
            <param name="sender">Sender. It is usually is the method class instance</param>
            <param name="methodName">The method name.</param>
            <param name="args">The method argument.</param>
            <typeparam name="T">The return value type. For void method(), you can return any value.</typeparam>
        </member>
        <member name="M:qshine.Interceptor.ForEach``1(``0)">
            <summary>
            Inspect each iterated element.
            </summary>
            <typeparam name="T">type of the element</typeparam>
            <param name="element">element instance</param>
            <example>
            <![CDATA[
            foreach(var e in list){
                inspector.ForEach(e);
                base code here...
            }
            ]]>
            </example>
        </member>
        <member name="T:qshine.InterceptorEventArgs`1">
            <summary>
            Interceptor event arguments for particular intercept class
            </summary>
            <typeparam name="T">Interceptor event for specific type of class</typeparam>
        </member>
        <member name="M:qshine.InterceptorEventArgs`1.#ctor(System.Func{`0},System.String,System.Object[])">
            <summary>
            Ctor::
            </summary>
            <param name="internalMethod">Method is being called and captured by the interceptor</param>
            <param name="methodName">method name</param>
            <param name="args">method argus</param>
        </member>
        <member name="P:qshine.InterceptorEventArgs`1.InternalMethod">
            <summary>
            Current calling method.
            </summary>
        </member>
        <member name="T:qshine.InterceptorEventArgs">
            <summary>
            Interceptor event arguments
            </summary>
        </member>
        <member name="M:qshine.InterceptorEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            Interceptor arguments
            </summary>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="P:qshine.InterceptorEventArgs.EnterTime">
            <summary>
            The time the method being enter
            </summary>
        </member>
        <member name="P:qshine.InterceptorEventArgs.ExitTime">
            <summary>
            The time the method being exit.
            </summary>
        </member>
        <member name="P:qshine.InterceptorEventArgs.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:qshine.InterceptorEventArgs.Args">
            <summary>
            Gets the method arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:qshine.InterceptorEventArgs.Exception">
            <summary>
            Gets the exception from calling method.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:qshine.InterceptorEventArgs.StopExecution">
            <summary>
            Flag to indictae whether a method should be stop execution.
            In case of Exception event it can stop exception to be thrown.
            </summary>
            <value><c>true</c> if stop execution; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:qshine.InterceptorEventArgs.Result">
            <summary>
            Gets the return value from the method.
            </summary>
            <value>The returned value from the method.</value>
        </member>
        <member name="P:qshine.InterceptorEventArgs.DataBag">
            <summary>
            A generic data bag could be used as communication data between each events.
            </summary>
        </member>
        <member name="T:qshine.IInterceptorHandler`1">
            <summary>
            Interface of interceptor event handler for particular type of class.
            </summary>
        </member>
        <member name="T:qshine.IInterceptorHandler">
            <summary>
            Interface of interceptor event handler
            </summary>
        </member>
        <member name="M:qshine.IInterceptorHandler.LoadInterceptorHandler">
            <summary>
            Register interceptor handler
            </summary>
        </member>
        <member name="T:qshine.DbParameters">
            <summary>
            Define Sql parameters
            </summary>
        </member>
        <member name="P:qshine.DbParameters.New">
            <summary>
            instantiate a DbParameters instance
            </summary>
            <value>The new.</value>
        </member>
        <member name="M:qshine.DbParameters.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:qshine.DbParameters.AutoParameterName">
            <summary>
            Auto generate a parameter name
            </summary>
        </member>
        <member name="M:qshine.DbParameters.AutoParameter(System.Object)">
            <summary>
            Create an auto common data parameter for a parameter value.
            </summary>
            <param name="value">Sql parameter value. If the value is a IDbDataParameter, it will be return directly with an auto generated name.</param>
            <returns>Return a common data parameter based on data value</returns>
        </member>
        <member name="P:qshine.DbParameters.Params">
            <summary>
            Get all sql common parameters
            </summary>
        </member>
        <member name="M:qshine.DbParameters.Input``1(System.String,``0)">
            <summary>
            Add an input parameter with given name and value
            </summary>
            <typeparam name="T">The parameter value type.</typeparam>
            <param name="name">The parameter name</param>
            <param name="value">The parameter value.</param>
            <returns>The instance self.</returns>
        </member>
        <member name="M:qshine.DbParameters.Input``1(System.String,``0,System.Data.DbType)">
            <summary>
            Add and input parameter with given name, type and data type
            </summary>
            <typeparam name="T">The parameter value type.</typeparam>
            <param name="name">The parameter name</param>
            <param name="value">The parameter value.</param>
            <param name="dbType">The data Db type</param>
            <returns>The instance self.</returns>
        </member>
        <member name="M:qshine.DbParameters.Output``1(System.String,System.Int32)">
            <summary>
            Add an output parameter with given name and data size. 
            </summary>
            <typeparam name="T">Type of data to be output from sql result</typeparam>
            <param name="name">The parameter name</param>
            <param name="size">The parameter data buffer size. The default size is -1. </param>
            <returns>The instance self.</returns>
        </member>
        <member name="M:qshine.DbParameters.Output(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Add an output parameter with given parameter name, data DB type and size.
            </summary>
            <param name="name">The parameter name</param>
            <param name="dbType">The data common type</param>
            <param name="size">The parameter data buffer size. The default size is -1. </param>
            <returns>The instance self.</returns>
        </member>
        <member name="M:qshine.DbParameters.Return(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Add a sql return value parameter with given name, data DB type and size.
            </summary>
            <param name="name">The parameter name</param>
            <param name="dbType">The data common type</param>
            <param name="size">The parameter data buffer size. The default size is -1. </param>
            <returns>The instance self.</returns>
        </member>
        <member name="M:qshine.DbParameters.MapFrom(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Maps from.
            </summary>
            <param name="p">P.</param>
            <param name="parameter">Parameter.</param>
        </member>
        <member name="T:qshine.CommonDbParameter">
            <summary>
            A generic database parameter.
            It simply inherited from DbParameter.
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.DbType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.Direction">
            <summary>
            Parameter direction. In/Out/InOut/Return
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.IsNullable">
            <summary>
            IsNullable
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.ParameterName">
            <summary>
            name
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.SourceColumn">
            <summary>
            SourceColumn
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.SourceColumnNullMapping">
            <summary>
            SourceColumnNullMapping
            </summary>
        </member>
        <member name="P:qshine.CommonDbParameter.Value">
            <summary>
            Get/Set value
            </summary>
        </member>
        <member name="M:qshine.CommonDbParameter.ResetDbType">
            <summary>
            Reset DbType to original.
            Not implemented
            </summary>
        </member>
        <member name="T:qshine.DataReaderExtension">
            <summary>
            Data reader extension.
            The extension Read method can read DbNull, string or database type value to object type value.
            If the column is DBNull it returns type default value.
            If the column is text type, it returns a converted type value or throw exception.
            </summary>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadString(System.Data.IDataReader,System.Int32)">
            <summary>
            Read string type value by index
            </summary>
            <param name="reader">data reader</param>
            <param name="index">Index of the column</param>
            <returns>The string value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the int16 by column index.
            </summary>
            <returns>The int16.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the int32 by column index.
            </summary>
            <returns>The int32.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the int64 by column index.
            </summary>
            <returns>The int64.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the decimal by column index.
            </summary>
            <returns>The decimal value.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadFloat(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the float by column index.
            </summary>
            <returns>The float value.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDouble(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the double by column index.
            </summary>
            <returns>The double value.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the DateTime by column index.
            </summary>
            <returns>The DateTime value.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadBytes(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads the BLOB data by column index.
            </summary>
            <returns>The byte array value.</returns>
            <param name="reader">Reader.</param>
            <param name="index">Index of the column</param>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable integer value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable 32 bits integer value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable 64 bits integer value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable decimal value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableFloat(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable float type value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDouble(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable double type value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            Read nullable date and time value
            </summary>
            <param name="reader">data reader</param>
            <param name="index">column index</param>
            <returns></returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt16(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable 16 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt32(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable 32 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableInt64(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable 64 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable decimal value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableFloat(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable float value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDouble(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable double value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadNullableDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Read nullable date and time value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>nullable value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadString(System.Data.IDataReader,System.String)">
            <summary>
            Read string value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt16(System.Data.IDataReader,System.String)">
            <summary>
            Read 16 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt32(System.Data.IDataReader,System.String)">
            <summary>
            Read 32 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadInt64(System.Data.IDataReader,System.String)">
            <summary>
            Read 64 bits integer value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Read decimal value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadFloat(System.Data.IDataReader,System.String)">
            <summary>
            Read float value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDouble(System.Data.IDataReader,System.String)">
            <summary>
            Read double type value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Read date and time value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadBytes(System.Data.IDataReader,System.String)">
            <summary>
            Read all binary data by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadGuid(System.Data.IDataReader,System.String)">
            <summary>
            Read Guid value by column name
            </summary>
            <param name="reader">data reader</param>
            <param name="columnName">column name</param>
            <returns>Column value</returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadBoolean(System.Data.IDataReader,System.Int32)">
            <summary>
            Read a boolean value by column index
            </summary>
            <param name="reader">data reader</param>
            <param name="index">index of column</param>
            <returns>return boolean value. 
            The boolean true could be:
               1, -1, Y, T
            </returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ReadBoolean(System.Data.IDataReader,System.String)">
            <summary>
            Reads the boolean by columnc name.
            </summary>
            <param name="reader">Reader.</param>
            <param name="columnName">Column name.</param>
            <returns>return boolean value. 
            The boolean true could be:
               1, -1, Y, T
            </returns>
        </member>
        <member name="M:qshine.DataReaderExtension.ToDateTime(System.Object)">
            <summary>
            Cast any type converable date and time value to DateTime type value.
                null ==> default(DateTime)
                timespan ==> default(DateTime) + timespan
                datetimeoffset ==> utc time
                string datetime ==> date and time
                integer ==> year.
            </summary>
            <param name="value">date and type object value</param>
            <returns>DateTime type value or throw exception</returns>
            
        </member>
        <member name="T:qshine.Database">
            <summary>
            Relational database provider.
            </summary>
        </member>
        <member name="M:qshine.Database.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.Database"/> class by given provider and connection string.
            </summary>
            <param name="providerName">Database provider name.</param>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:qshine.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.Database"/> class from default configure setting.
            </summary>
        </member>
        <member name="M:qshine.Database.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.Database"/> class from configure setting.
            </summary>
            <param name="configedConnectionName">Configed connection name from environment config files.</param>
            <remarks>
             Find a given named connection string setting from configure file. The search path is:
                a. The named connection string.
                b. The "default" name connection string if name is not present
                c. The first connection string if name is not present
                d. throw exception if no any connection string found.
            </remarks>
        </member>
        <member name="M:qshine.Database.GetHashCode">
            <summary>
            Override instance hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:qshine.Database.ParameterPrefix">
            <summary>
            Get database parameterPrefix
            </summary>
        </member>
        <member name="P:qshine.Database.CommandBuilder">
            <summary>
            The command builder will be available after DbProviderFactory set;
            </summary>
        </member>
        <member name="P:qshine.Database.DbProviderFactory">
            <summary>
            Get database provider factory
            </summary>
        </member>
        <member name="P:qshine.Database.ProviderName">
            <summary>
            Gets the name of database provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:qshine.Database.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:qshine.Database.DataSource">
            <summary>
            Get data source name
            </summary>
        </member>
        <member name="P:qshine.Database.IsValid">
            <summary>
            Check the database provider and connection string format correct
            </summary>
        </member>
        <member name="P:qshine.Database.ConnectionStringBuilder">
            <summary>
            Get given database connection string builder.
            </summary>
        </member>
        <member name="P:qshine.Database.IsAlive">
            <summary>
            Check the database instance alive
            </summary>
        </member>
        <member name="M:qshine.Database.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:qshine.Database.CreateAdapter">
            <summary>
            Create a data adapter
            </summary>
            <returns></returns>
        </member>
        <member name="P:qshine.Database.DbTypeMappers">
            <summary>
            Map database dbtype
            </summary>
        </member>
        <member name="M:qshine.Database.IsMatchProvider(System.String)">
            <summary>
            Check the tags match to database provider
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.Database.RegisterDbTypeMapper(qshine.IDbTypeMapper)">
            <summary>
            Register a database DBType mapper.
            </summary>
            <param name="mapper"></param>
        </member>
        <member name="T:qshine.IBus">
            <summary>
            Indicate a message bus
            </summary>
        </member>
        <member name="T:qshine.IMessage">
            <summary>
            message interface
            </summary>
        </member>
        <member name="T:qshine.IMessageHandler">
            <summary>
            message handler interface
            </summary>
        </member>
        <member name="T:qshine.ICommandBus">
            <summary>
            Command bus interface:
            Command bus is used to send a command request to command handler. The command message has only a single endpoint.
            1. commandBus.Send()
            	Send command message synchronously and wait command process complete.
            	Synchronous messaging is a bi-direction communication. The sender will receive the result immediately. 
            	An exception may throw when command failed to process.
            
            2. commandBus.SendAsync()
            	Send command asynchronously and return immedidately without waiting command handler completely.
            	It is a one way communication.
            
            </summary>
        </member>
        <member name="M:qshine.ICommandBus.Send``1(``0)">
            <summary>
            Send a specified command to the queue and waiting for message process completely.
            </summary>
            <returns>The send.</returns>
            <param name="command">Command.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:qshine.ICommandBus.SendAsync``1(``0)">
            <summary>
            Send a specified command to the queue and do not waiting message process.
            </summary>
            <param name="command">Command.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:qshine.ICommandMessage">
            <summary>
            Command message interface.
            </summary>
        </member>
        <member name="T:qshine.IEventBus">
            <summary>
            Event bus interface. (publish/subscribe pattern)
            Event bus is used to deliever a message to zero or many event subscribers. Each endpoint can process the message in different way without depend each other.
            1. eventBus = new EventBus(busName)
                Create a named event bus. each named event bus could have different implementation, but the end result is same.  
                
            2. eventBus.Publish(event)
            	A event message published through the event bus. The event message will be delivered to all endpoints.
            	Exception will be thrown if the message delivery is failed.
            
            2. eventBus.PublishAsync(event, callback)
            	A event message published through the event bus in asynchronous way. 
            	Call the callback method when event delivered.
            
            3. eventBus.Subscriber(string endpoint);
            	Subscriber a specified event from one endpoint.
            	
            </summary>
        </member>
        <member name="M:qshine.IEventBus.Publish``1(``0)">
            <summary>
            Publish the specified event message to event queue and deliever the event message to each event subscriber.
            </summary>
            <returns>The publish.</returns>
            <param name="eventMessage">Event message.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:qshine.IEventBus.Subscribe``1(System.String,qshine.Messaging.IHandler{``0})">
            <summary>
            Subscribe the specified event message for one message handler in a given endpoint.
            </summary>
            <param name="endpoint">Event bus endpoint. The event message will be publish to all endpoints</param>
            <param name="handler">event message handler.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:qshine.IEventBus.Unsubscribe(System.String)">
            <summary>
            Unsubscribe the specified handler.
            </summary>
            <returns>The unsubscribe.</returns>
            <param name="endpoint">endpoint.</param>
        </member>
        <member name="T:qshine.IEventMessage">
            <summary>
            event message interface
            </summary>
        </member>
        <member name="P:qshine.IEventMessage.Id">
            <summary>
            unique event message Id
            </summary>
        </member>
        <member name="T:qshine.ICommandBusFactory">
            <summary>
            Interface of ommand bus factory.
            </summary>
        </member>
        <member name="M:qshine.ICommandBusFactory.Create">
            <summary>
            Create a command bus instance.
            </summary>
            <returns>The create.</returns>
        </member>
        <member name="T:qshine.InvalidProviderException">
            <summary>
            Invalid provider exception
            </summary>
        </member>
        <member name="M:qshine.InvalidProviderException.#ctor(System.String)">
            <summary>
            Ctro::
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:qshine.DefaultCommandBusFactory">
            <summary>
            Default command bus factory
            </summary>
        </member>
        <member name="M:qshine.DefaultCommandBusFactory.Create">
            <summary>
            Create a command bus
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.NetCommandBus">
            <summary>
            Tcp/ip based command bus. 
            </summary>
        </member>
        <member name="F:qshine.NetCommandBus.defaulPort">
            <summary>
            default command bus port.
            </summary>
        </member>
        <member name="M:qshine.NetCommandBus.#ctor">
            <summary>
            Ctor::
            </summary>
        </member>
        <member name="M:qshine.NetCommandBus.#ctor(System.String,System.Int32)">
            <summary>
            Ctor:: by given ip and port
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:qshine.NetCommandBus.SendAsync``1(``0)">
            <summary>
            Send command in async. 
            </summary>
            <typeparam name="T">Command type</typeparam>
            <param name="command">command message</param>
        </member>
        <member name="T:qshine.MessageEnvelope">
            <summary>
            message envelope for message delivery
            </summary>
        </member>
        <member name="M:qshine.MessageEnvelope.#ctor(System.Object)">
            <summary>
            Ctor::
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:qshine.MessageEnvelope.AssemblyQualifiedName">
            <summary>
            assembly qualified name
            </summary>
        </member>
        <member name="P:qshine.MessageEnvelope.Body">
            <summary>
            message body
            </summary>
        </member>
        <member name="P:qshine.MessageEnvelope.Source">
            <summary>
            sender application
            </summary>
        </member>
        <member name="P:qshine.MessageEnvelope.SendTime">
            <summary>
            When the message send out
            </summary>
        </member>
        <member name="T:qshine.IJsonProvider">
            <summary>
            Json provider interface.
            </summary>
        </member>
        <member name="M:qshine.IJsonProvider.Create">
            <summary>
            Create a json serializer instance.
            </summary>
            <returns>The json serializer.</returns>
        </member>
        <member name="T:qshine.IJsonSerializer">
            <summary>
            Json serializer interface.
            </summary>
        </member>
        <member name="M:qshine.IJsonSerializer.Serialize(System.Object,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Serialize the specified instance to formatted json string.
            </summary>
            <returns>The serialized json string.</returns>
            <param name="instance">Instance of object</param>
            <param name="jsonFormat">Json format.</param>
            <param name="setting">Json custom format.</param>
        </member>
        <member name="M:qshine.IJsonSerializer.Deserialize(System.String,System.Type,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a specified formatted jsonString to a typed object.
            </summary>
            <returns>The deserialized object.</returns>
            <param name="jsonString">Json string.</param>
            <param name="type">Type of the result object.</param>
            <param name="jsonFormat">Json format.</param>
            <param name="setting">Json custom format.</param>
        </member>
        <member name="M:qshine.IJsonSerializer.DeserializeDictionary(System.String,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a json string to a name-value dictionary.
            The dictionary key is the property name and the value is the property value.
            The value will be converted to:
                string => string
                number => decimal
                array/list => list
                class object => Dictionary [string, object]
                dictionary => Dictionary [string, object]
                Date => Date (depends on JsonFormat)
            </summary>
            <param name="jsonString">json format string</param>
            <param name="jsonFormat">Json format.</param>
            <param name="setting">Json custom format.</param>
            <returns>Dictionary instance</returns>
        </member>
        <member name="T:qshine.DotNetJsonSerializerProvider">
            <summary>
            Dotnet json serializer provider
            </summary>
        </member>
        <member name="M:qshine.DotNetJsonSerializerProvider.Create">
            <summary>
            Create a json serializer
            </summary>
            <returns></returns>
        </member>
        <member name="T:qshine.DotNetJsonSerializer">
            <summary>
            Dotnet json serializer
            </summary>
        </member>
        <member name="M:qshine.DotNetJsonSerializer.Deserialize(System.String,System.Type,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize the specified jsonString to a typed object.
            </summary>
            <returns>The deserialized object</returns>
            <param name="jsonString">Json string.</param>
            <param name="type">Type of the instance.</param>
            <param name="jsonFormat">Json format</param>
            <param name="setting">Json format setting</param>
        </member>
        <member name="M:qshine.DotNetJsonSerializer.Serialize(System.Object,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Serialize the specified instance.
            </summary>
            <returns>The serialize.</returns>
            <param name="instance">Instance.</param>
            <param name="jsonFormat">Json format</param>
            <param name="setting">Json format setting</param>
        </member>
        <member name="M:qshine.DotNetJsonSerializer.DeserializeDictionary(System.String,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a json string to a name-value dictionary.
            The dictionary key is the property name and the value is the property value.
            The value will be converted to:
                string => string
                number => decimal
                array/list => list
                class object => Dictionary [string, object]
                dictionary => Dictionary [string, object]
                Date => Date (depends on JsonFormat)
            </summary>
            <param name="jsonString">json format string</param>
            <param name="jsonFormat">Json format.</param>
            <param name="setting">Json format setting</param>
            <returns>Dictionary instance</returns>
        </member>
        <member name="F:qshine.DotNetJsonSerializer._jsonBasicType">
            <summary>
            Json basic types
            </summary>
        </member>
        <member name="T:qshine.DotNetJsonSerializer.__JDate">
            <summary>
            internal use only
            It must be a public property which allow serialize/deserialize
            </summary>
        </member>
        <member name="P:qshine.DotNetJsonSerializer.__JDate.V">
            <summary>
            Using DateTime type for json date
            </summary>
        </member>
        <member name="T:qshine.JsonFormat">
            <summary>
            Json format
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.Default">
            <summary>
            default format
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.MicrosoftDateFormat">
            <summary>
            The microsoft date format.
            	\/Date(946645200000)\/ (Utc)
            	\/Date(946645200000+1100)\/ (Local and Unspecified)
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.ISO8601DateFormat">
            <summary>
            The ISO 8601 date format.
            	2012-04-23T18:25:43 (Unspecified)
            	2012-04-23T18:25:43Z (Utc)
            	2012-04-23T18:25:43-05:00 (Local)
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.ISO8601RoundtripDateFormat">
            <summary>
            The ISO 8601 roundtrip date format.
            	2012-04-23T18:25:43.1234567 (Unspecified)
            	2012-04-23T18:25:43.1234567Z, (UTC)
            	2012-04-23T18:25:43.1234567-05:00 (local)
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.ISO8601JavascriptDateFormat">
            <summary>
            The ISO 8601 javascript JSON.stringify date format.
            	2012-04-23T18:25:43.123 (Unspecified)
            	2012-04-23T18:25:43.007Z, (Utc)
            	2012-04-23T18:25:43.007-05:00, (local)
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.JavascriptDateFormat">
            <summary>
            Convert below type javascript date format.
            	new Date(976918263055)
            	new Date(2012,04)
            	new Date(2012,04,23)
            	new Date(2012,04,23,18)
            	new Date(2012,04,23,18,25)
            	new Date(2012,04,23,18,25,43)
            	new Date(2012,04,23,18,25,43,100)
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.CustomDateFormat">
            <summary>
            Custom Date format
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.UseDictionaryFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.EmitTypeAlways">
            <summary>
            
            </summary>
        </member>
        <member name="F:qshine.JsonFormat.EmitTypeAsNeeded">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.JsonFormatSetting">
            <summary>
            Special custom json format setting
            </summary>
        </member>
        <member name="P:qshine.JsonFormatSetting.DateTimeFormat">
            <summary>
            Custom date time format
            </summary>
        </member>
        <member name="T:qshine.Json">
            <summary>
            Extension methods for JSON serialization
            </summary>
        </member>
        <member name="P:qshine.Json.CurrentSerializer">
            <summary>
            Gets or sets the current json serializer.
            </summary>
            <value>The current serializer.</value>
        </member>
        <member name="P:qshine.Json.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:qshine.Json.Serialize(System.Object,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Serializes object into JSON string
            </summary>
            <param name="instance"></param>
            <param name="jsonFormat">json format</param>
            /// <param name="setting">json format setting</param>
            <returns></returns>
        </member>
        <member name="M:qshine.Json.Deserialize``1(System.String,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a JSON string to a given type of object
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="jsonString">JSON string</param>
            <param name="jsonFormat">json format</param>
            /// <param name="setting">json format setting</param>
            <returns>Returns a given type of instance.</returns>
            <remarks>
            The given type properties name must exist in serialized json string. Otherwise, it will throw exception
            </remarks>
        </member>
        <member name="M:qshine.Json.Deserialize(System.String,System.Type,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a json string to a given type of object
            </summary>
            <param name="jsonString">json string</param>
            <param name="type">Target object type</param>
            <param name="jsonFormat">json format</param>
            /// <param name="setting">json format setting</param>
            <returns>Returns a given type of instance.</returns>
            <remarks>
            The given type properties name must exist in serialized json string. Otherwise, it will throw exception
            </remarks>
        </member>
        <member name="M:qshine.Json.Deserialize(System.String,System.String,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a json string to a given type of object by type name.
            </summary>
            <param name="jsonString">json string</param>
            <param name="typeName">Type name of the target object. It could be a object name, full name or a qualified object name.
            The type name could be a type in plugable component assembly</param>
            <returns>Returns a given type of instance.</returns>
            <param name="jsonFormat">json format</param>
            /// <param name="setting">json format setting</param>
            <remarks>
            The given type properties name must exist in serialized json string. Otherwise, it will throw exception.
            </remarks>
        </member>
        <member name="M:qshine.Json.DeserializeDictionary(System.String,qshine.JsonFormat,qshine.JsonFormatSetting)">
            <summary>
            Deserialize a json string to a name-value dictionary.
            The dictionary key is the property name and the value is the property value.
            The value will be converted to:
                string => string
                number => decimal
                array/list => list
                class object => Dictionary [string, object]
                dictionary => Dictionary [string, object]
                Date => Date (depends on JsonFormat)
            </summary>
            <param name="jsonString">json format string</param>
            <param name="jsonFormat">Json format.</param>
            /// <param name="setting">json format setting</param>
            <returns>returns dictionary instance which contains all property names and values</returns>
        </member>
        <member name="T:qshine.CommandBusBase">
            <summary>
            Command Bus base building block
            </summary>
        </member>
        <member name="M:qshine.CommandBusBase.Send``1(``0)">
            <summary>
            Send the specified command to command handler.
            </summary>
            <returns>The send.</returns>
            <param name="command">Command message.</param>
            <typeparam name="T">The type of command message.</typeparam>
        </member>
        <member name="M:qshine.CommandBusBase.Send(qshine.ICommandMessage)">
            <summary>
            Send the specified command without declare command type explicitly.
            </summary>
            <returns>The send.</returns>
            <param name="command">Command message.</param>
        </member>
        <member name="M:qshine.CommandBusBase.SendAsync``1(``0)">
            <summary>
            Send command in async way
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
        </member>
        <member name="M:qshine.CommandBusBase.ProcessGenericHandler(System.Object)">
            <summary>
            Processes the generic command handler.
            </summary>
            <returns><c>true</c>, if generic handler was processed, <c>false</c> otherwise.</returns>
            <param name="command">Command.</param>
            <example>
            	public class CreateEntityHandler[T]:ICommandHandler[T]
            	{
            	}
            
            </example>
        </member>
        <member name="T:qshine.ICommandHandler`1">
            <summary>
            Command handler class.
            </summary>
        </member>
        <member name="M:qshine.ICommandHandler`1.Handle(`0)">
            <summary>
            Command handler
            </summary>
            <param name="commandMessage"></param>
        </member>
        <member name="T:qshine.ICommandHandler">
            <summary>
            Command handler interface
            </summary>
        </member>
        <member name="T:qshine.ObjectExtension">
            <summary>
            Object extension
            </summary>
        </member>
        <member name="M:qshine.ObjectExtension.Using(System.Object,System.Action)">
            <summary>
            Provides a convenient way to dispose objects after execute the object action.
            It only dispose the object which implemented IDisposable
            </summary>
            <param name="instance">Instance.</param>
            <param name="action">Action.</param>
        </member>
        <member name="M:qshine.ObjectExtension.Using``1(System.Object,System.Func{``0})">
            <summary>
            Provides a convenient way to dispose objects after execute the object method.
            It only dispose the object which implemented IDisposable
            </summary>
            <returns>The value from the method.</returns>
            <param name="instance">Instance.</param>
            <param name="method">Method.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <example>
            	instance.Using(()=>{
            	});
            </example>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall``1(System.Type,``0@,System.String,System.Object[])">
            		 * Call public static method by name:
            		 * 		type.TryCall(out result, "methodName", arg1,arg2,..);
            		 * 
                     * Call public static void method by name:
            		 * 		type.TryCall("methodName", arg1, arg2,..);
            		 * 
                     * Call public method by name:
            		 * 		instance.TryCall(out result, "methodName", arg1, arg2,..);
            		 * 
            		 * Call public void method by name:
            		 * 		instance.TryCall("methodName", arg1, arg2,..);
                     * 		instance.AsDynamic().methodName(arg1,arg2...);
            		 * 
                     * Call public method by name and explicitly provide types:
            		 * 		instance.TryCall(out result, Types[] argumentTypes, "methodName", arg1, arg2,..);
            		 * 
                     * Call public void method by name and explicitly provide types:
            		 * 		instance.TryCall(Types[] argumentTypes, "methodName", arg1, arg2,..);
            		 * 
                     * Call public generic method by name and explicitly provide generic types and argument types:
            		 * 		instance.TryCall(out result, Types[] genericTypes, Types[] argumentTypes, "methodName", arg1, arg2,..);
            		 *
            		*
            <summary>
            Tries to call a public static method by method name.
            </summary>
            <param name="type">Type of class which contains specific static method</param>
            <returns><c>true</c>, if call was tryed, <c>false</c> method not found or wrong argument type or numbers.</returns>
            <param name="result">output the method return value</param>
            <param name="methodName">static method name</param>
            <param name="args">The method arguments</param>
            <typeparam name="T">The type of the method return value.</typeparam>
            <example>
            	int result;
            	var hasMethod = type.TryCall(out result,"StaticMethod", 1,2);
            </example>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall(System.Type,System.String,System.Object[])">
            <summary>
            Tries to call a public static void method by method name.
            </summary>
            <returns><c>true</c>, if call was tryed, <c>false</c> method not found or wrong argument type or numbers.</returns>
            <param name="type">Type of class which contains specific static method</param>
            <param name="methodName">static method name.</param>
            <param name="args">The method arguments</param>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall``1(System.Object,``0@,System.String,System.Object[])">
            <summary>
            Tries to call a public method by the method name.
            </summary>
            <param name="instance">a class instance.</param>
            <returns><c>true</c>, if call was tryed, <c>false</c> method not found or wrong argument type or numbers.</returns>
            <param name="result">output the method return value</param>
            <param name="methodName">The method name.</param>
            <param name="args">The method arguments</param>
            <typeparam name="T">The type of the method return value.</typeparam>
            <example>
            	int result;
            	var hasMethod = instance.TryCall(out result, "MethodName", 1,"2");
            </example>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall(System.Object,System.String,System.Object[])">
            <summary>
            Tries to call a public void method by the method name.
            </summary>
            <returns><c>true</c>, if call was tryed, <c>false</c> otherwise.</returns>
            <param name="instance">Instance.</param>
            <param name="methodName">Method name.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall(System.Object,System.Type[],System.String,System.Object[])">
            <summary>
            Tries to call a public void method by the method name and provide method arguments types explicitly.
            </summary>
            <returns><c>true</c>, if call was tryed, <c>false</c> otherwise.</returns>
            <param name="instance">Instance.</param>
            <param name="argumentTypes">Types.</param>
            <param name="methodName">Method name.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall``1(System.Object,``0@,System.Type[],System.String,System.Object[])">
            <summary>
            Tries to call a public method by the method name and provide method arguments types explicitly.
            </summary>
            <returns><c>true</c>, if call was tryed, <c>false</c> method not found or wrong argument type or numbers.</returns>
            <param name="instance">Instance.</param>
            <param name="result">output the method return value</param>
            <param name="argumentTypes">Types of method arguments.</param>
            <param name="methodName">The method name.</param>
            <param name="args">The method arguments</param>
            <typeparam name="T">The type of the method return value.</typeparam>
        </member>
        <member name="M:qshine.ObjectExtension.TryCallNonPublic``1(System.Object,``0@,System.Type[],System.String,System.Object[])">
            <summary>
            Call non-public method using reflection.
            It is available internal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="result"></param>
            <param name="argumentTypes"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:qshine.ObjectExtension.TryCall``1(System.Object,``0@,System.Type[],System.Type[],System.String,System.Object[])">
            <summary>
            Tries to call a public generic method by method name and provide method arguments types explicitly.
            </summary>
            <returns>The generic if any.</returns>
            <param name="instance">Instance.</param>
            <param name="result">returns call result.</param>
            <param name="methodName">Method name.</param>
            <param name="genericTypes">Generic type arguments of the method.</param>
            <param name="argumentTypes">Method argument types.</param>
            <param name="args">Method arguments.</param>
            <example>
            <![CDATA[
            	Assume class SampleClass has following method signature
            		public class SampleClass {
            			int GetTicket<T1,T2,T3> (int arg1, T2 arg2, T3 arg3){...}
            		}
            	int result;
            	var hasMethod = instance.TryCall<int>(out result, new [] {typeof(T1), typeof (T2), typeof(T3)}, new [] {typeof(int)}, "GetTicket", arg1);
            	]]>
            </example>
            <remarks>
            	This method is not accurate to determine the method match. If more than two methods found, it will through exception.
            </remarks>
        </member>
        <member name="M:qshine.ObjectExtension.ToParametersArrary(System.Object[])">
            <summary>
            Force to convert parameter array to object array
            </summary>
            <param name="args">Parameter array</param>
            <returns>An object array</returns>
        </member>
        <member name="M:qshine.ObjectExtension.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes the method by method info.
            </summary>
            <returns>The method.</returns>
            <param name="method">Method.</param>
            <param name="instance">Instance.</param>
            <param name="parms">Parms.</param>
        </member>
        <member name="M:qshine.ObjectExtension.GetOpenGenericTypes(System.Type,System.Type)">
            <summary>
            Get type arguments from an open generic type.
            IOpenGenericType[TA1, TA2]
            </summary>
            <param name="implementationType">The type that implemented an open generic type</param>
            <param name="openGenericType">Open generic type</param>
            <returns></returns>
        </member>
        <member name="M:qshine.ObjectExtension.TryCreateInstance(System.Type,System.Object[])">
            <summary>
            Try to create a new instance by given constructor arguments.
            </summary>
            <param name="type">The type of class.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance created. 
            It will return null if the given arguments types are not match to constructor.</returns>
        </member>
        <member name="M:qshine.ObjectExtension.AreEqual(System.String,System.String)">
            <summary>
            Compare nullable string
            </summary>
            <returns><c>true</c>, if equal was ared, <c>false</c> otherwise.</returns>
            <param name="a">The a string.</param>
            <param name="b">The b string.</param>
        </member>
        <member name="M:qshine.ObjectExtension.AreEqual(System.Object,System.String)">
            <summary>
            Are object and string component equal.
            </summary>
            <returns><c>true</c>, if equal, <c>false</c> otherwise.</returns>
            <param name="a">The a component.</param>
            <param name="b">The b component.</param>
        </member>
        <member name="T:qshine.IUnitOfWork">
            <summary>
            Interface of Unit of work.
            Unit of work maintains a list of objects affected by a business transaction.
            The unit of work may contains many other unit of works, all child unit of work will be merged into one transaction.
            Any uncompleted unit of work will cause whole transaction rollback before persistent the data. 
            </summary>
        </member>
        <member name="M:qshine.IUnitOfWork.Complete">
            <summary>
            Complete the unit of work.
            Completed unit of work must be done before end of the scope.
            </summary>
        </member>
        <member name="T:qshine.IUnitOfWorkProvider">
            <summary>
            UnitOfwork provider interface
            </summary>
        </member>
        <member name="M:qshine.IUnitOfWorkProvider.Create(qshine.UnitOfWorkOption)">
             <summary>
             Create a given type scope of unit of work.
             </summary>
             <returns>Create a new unit of work instance</returns>
             <param name="option">A transaction scope option for the unit of work.
             The concept of transaction scope option is similar as TransactionScopeOption.
             See reference 
             <see href="https://github.com/dotnet/docs/blob/master/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md">
             </see>
                 Required: Join the ambient transaction, or create a new one if one does not exist.
                 RequiresNew: Be a new root scope, that is, start a new unit of work transaction and have that transaction be the new ambient transaction inside its own scope.
                 Suppress: New connection but not take part in a transaction at all. There is no ambient transaction as a result.
            </param>
        </member>
        <member name="T:qshine.UnitOfWork">
            <summary>
            Manages Unit of Work for all UnitOfWork providers.
            Each unit of work provider can create UnitOfWork instance for transaction management.
            </summary>
        </member>
        <member name="P:qshine.UnitOfWork.Providers">
            <summary>
            Gets or sets a list of UoW providers.
            Single UoW may contain many UoW transaction implementations for differnt database, transaction process.
            Each UoW transaction implementation different UoW provider.
            The UoW can be injected by DI or configuration.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:qshine.UnitOfWork.#ctor(qshine.UnitOfWorkOption)">
            <summary>
            Create a UoW instance
            </summary>
            <param name="option"></param>
        </member>
        <member name="F:qshine.UnitOfWork.disposed">
            <summary>
            Dispose UoW
            </summary>
        </member>
        <member name="M:qshine.UnitOfWork.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:qshine.UnitOfWork.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:qshine.UnitOfWork.Complete">
            <summary>
            Indicates all operations within scope are completed sucessfully.
            Note: The UoW will be abort if the Complete() havn't been called in end of UoW.
            </summary>
        </member>
        <member name="T:qshine.DbUnitOfWorkProvider">
            <summary>
            provides a simple database transaction unit of work.
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWorkProvider.Create(qshine.UnitOfWorkOption)">
            <summary>
            Create a given type scope of unit of work.
            </summary>
            <returns>Create a new unit of work instance</returns>
            <param name="scope">scope of the uow. 
            It will create a new transaction which is independent from others </param>		
        </member>
        <member name="T:qshine.DbUnitOfWork">
            <summary>
            Manages each database independantly. The trasactions under same database can be merged into one trasaction as one unit of work.
            For multiple databases operations, a unit of work maintains all database transactions in same UoW, one transaction per database.
            Any uncompleted operation could cause all transactions rollback in a unit of work.
            Note: multi-databases operations within single UoW may not work properly if an exception throw in UoW Dispose() moment.
            
            The Unit of Work may not work for cross processor transaction and DTC (distributed transaction coordinator).
            Use TrasactionScopeUnitOfWork() for DTC if it is required.
            
            The UoW transaction is logical context based ambiente translation. It works in multi-threads environment. 
             
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbUnitOfWork"/> class.
            Join the ambient transaction, or create a new one if one does not exist.
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWork.#ctor(qshine.UnitOfWorkOption)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.DbUnitOfWork"/> class .
            Create a new scope of unit of work
            </summary>
            <param name="scopeOption">Scope of the unit of work</param>
        </member>
        <member name="M:qshine.DbUnitOfWork.Complete">
            <summary>
            Complete the unit of work and commit the transaction.
            </summary>
        </member>
        <member name="P:qshine.DbUnitOfWork.ScopeOption">
            <summary>
            Gets unit of work transaction scope
            </summary>
        </member>
        <member name="P:qshine.DbUnitOfWork.ParentUoW">
            <summary>
            Parent UoW
            </summary>
        </member>
        <member name="P:qshine.DbUnitOfWork.CurrentUnitOfWork">
            <summary>
            Get current unit of work
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWork.Rollback">
            <summary>
            Rollback this instance.
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWork.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:qshine.DbUnitOfWork.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:qshine.TransactionScopeUnitOfWorkProvider">
            <summary>
            Transaction scope UoW provider
            </summary>
        </member>
        <member name="M:qshine.TransactionScopeUnitOfWorkProvider.Create(qshine.UnitOfWorkOption)">
            <summary>
            Create unit of work instance
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:qshine.TransactionScopeUnitOfWork">
            <summary>
            Transaction scope Unit of Work
            </summary>
        </member>
        <member name="M:qshine.TransactionScopeUnitOfWork.#ctor(qshine.UnitOfWorkOption)">
            <summary>
            Ctor::
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:qshine.TransactionScopeUnitOfWork.Complete">
            <summary>
            Complete the transaction
            </summary>
        </member>
        <member name="M:qshine.TransactionScopeUnitOfWork.Dispose">
            <summary>
            Dispose the resource.
            If scope hasn't completed,  rollback the unit of work.
            </summary>
        </member>
        <member name="T:qshine.DbSession">
            <summary>
            Database session
            </summary>
        </member>
        <member name="M:qshine.DbSession.#ctor(qshine.Database)">
            <summary>
            Create a database session.
            A session is a database connection and uow transaction.
            </summary>
            <param name="database">database instance</param>
        </member>
        <member name="P:qshine.DbSession.Database">
            <summary>
            Database instance
            </summary>
        </member>
        <member name="P:qshine.DbSession.Connection">
            <summary>
            Database connection
            </summary>
        </member>
        <member name="P:qshine.DbSession.Transaction">
            <summary>
            Database transaction
            </summary>
        </member>
        <member name="M:qshine.DbSession.CreateCommand">
            <summary>
            Create a Sql command
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.DbSession.CreateTransaction">
            <summary>
            Create a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.DbSession.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:qshine.DbSession.GetCurrentTransactionSession(qshine.Database)">
            <summary>
            Get current transaction session if exists
            </summary>
            <param name="database">database instance</param>
            <returns>return a uow transaction session</returns>
        </member>
        <member name="P:qshine.DbSession.ActiveConnection">
            <summary>
            Gets the active connection for current database.
            </summary>
            <value>The active connection.</value>
        </member>
        <member name="T:qshine.Compiler.ScriptCompiler">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:qshine.Compiler.ScriptCompiler.Parse(System.String)">
            <summary>
            Parse the specified input.
            </summary>
            <returns>The parse.</returns>
            <param name="input">Input.</param>
        </member>
        <member name="T:qshine.Compiler.BlockSection">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.Compiler.BlockSection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.Compiler.BlockSection.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:qshine.Compiler.BlockSection.SkipWhiteSpace">
            <summary>
            Skips the white space, but not new line.
            </summary>
        </member>
        <member name="P:qshine.Compiler.BlockSection.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.BlockSection.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.BlockSection.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.BlockSection.HasText">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.BlockSection.HasVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.Compiler.ScriptBuilder">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:qshine.Compiler.ScriptBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:qshine.Compiler.ScriptBuilder.Render">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:qshine.Compiler.ScriptBuilder.AddOutputText(System.String)">
            <summary>
            
            </summary>
            <param name="outputText"></param>
        </member>
        <member name="M:qshine.Compiler.ScriptBuilder.AddCodeBlock(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:qshine.Compiler.ScriptBuilder.AddVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variable"></param>
        </member>
        <member name="T:qshine.Compiler.ScriptBlockType">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:qshine.Compiler.ScriptBlockType.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:qshine.Compiler.ScriptBlockType.Code">
            <summary>
            
            </summary>
        </member>
        <member name="F:qshine.Compiler.ScriptBlockType.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.Compiler.ScriptBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.ScriptBlock.Sequence">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.ScriptBlock.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:qshine.Compiler.ScriptBlock.BlockType">
            <summary>
            
            </summary>
        </member>
        <member name="T:qshine.CommandBus">
            <summary>
            Command bus class.
            
            The default command bus is built from command bus provider.
            
            </summary>
        </member>
        <member name="F:qshine.CommandBus._factories">
            <summary>
            Register all command bus factories.
            </summary>
        </member>
        <member name="M:qshine.CommandBus.#ctor">
            <summary>
            default command bus from default bus factory
            </summary>
        </member>
        <member name="M:qshine.CommandBus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.CommandBus"/> class by a given bus name.
            The bus name specifies a type of command bus configued in environment config file.
            </summary>
            <param name="busName">Bus name.</param>
        </member>
        <member name="M:qshine.CommandBus.#ctor(qshine.ICommandBusFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:qshine.CommandBus"/> by a given bus factory.
            </summary>
            <param name="busFactory">Bus provider.</param>
        </member>
        <member name="M:qshine.CommandBus.GetFactory(System.String)">
            <summary>
            Gets command bus factory by factory provider name.
            The bus factory must implement ICommandBusFactory
            </summary>
            <returns>The factory.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:qshine.CommandBus.Send``1(``0)">
            <summary>
            Send the specified command.
            </summary>
            <returns>The send.</returns>
            <param name="command">Command.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:qshine.CommandBus.SendAsync``1(``0)">
            <summary>
            Sends the async command message.
            </summary>
            <param name="command">Command.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="F:qshine.CommandBus._commandHandlers">
            <summary>
            Register all command handler
            </summary>
        </member>
        <member name="M:qshine.CommandBus.GetHandler(System.Type)">
            <summary>
            Get command handler by command type
            </summary>
            <returns>The handler.</returns>
            <param name="commandType">Command type.</param>
            <remarks>
            The first ommand will load all command handler for later use.
            </remarks>
        </member>
        <member name="T:qshine.StateObject`2">
            <summary>
            Represents an object in different state.
            The state could be a boolean, enum or others to indicate different state of the object.
            The object could be any type object.
            </summary>
        </member>
        <member name="M:qshine.StateObject`2.#ctor(`0,`1)">
            <summary>
            Ctor::
            </summary>
            <param name="state"></param>
            <param name="objectData"></param>
        </member>
        <member name="P:qshine.StateObject`2.State">
            <summary>
            Presents a state
            </summary>
        </member>
        <member name="P:qshine.StateObject`2.ObjectData">
            <summary>
            Presents a state object
            </summary>
        </member>
        <member name="T:qshine.XmlSection">
            <summary>
            Defines a configuration XML Section.
            Work with XmlHelper to load config section from config file
            <![CDATA[
                <system.data>
                   <!-- !!!!!   -->
                   <DbProviderFactories>
                       <!--Sqlite Data provider-->
                       <remove invariant="System.Data.SQLite.EF6"/>
                       <add name = "SQLite Data Provider (Entity Framework 6)" 
                             invariant = "System.Data.SQLite.EF6"
                             description = ".NET Framework Data Provider for SQLite (Entity Framework 6)"
                             type = "System.Data.SQLite.EF6.SQLiteProviderFactory, System.Data.SQLite.EF6" />
                      <remove invariant = "System.Data.SQLite" />
                      <add name = "SQLite Data Provider" invariant = "System.Data.SQLite"
                             type = "System.Data.SQLite.SQLiteFactory, System.Data.SQLite" />
                      <!--MySQL Data provider-->Text Value
                   </DbProviderFactories >
                </system.data >
            ]]>
            </summary>
        </member>
        <member name="M:qshine.XmlSection.#ctor">
            <summary>
            Ctor::
            </summary>
        </member>
        <member name="M:qshine.XmlSection.#ctor(System.String)">
            <summary>
            Ctor::
            </summary>
            <param name="rawXml"></param>
        </member>
        <member name="P:qshine.XmlSection.Name">
            <summary>
            Get/Set name attribute
            </summary>
        </member>
        <member name="P:qshine.XmlSection.Value">
            <summary>
            Get/set value attribute
            </summary>
        </member>
        <member name="P:qshine.XmlSection.Items">
            <summary>
            Get/Set items
            </summary>
        </member>
        <member name="P:qshine.XmlSection.Count">
            <summary>
            This property returns the number of elements in the inner dictionary.
            </summary>
        </member>
        <member name="P:qshine.XmlSection.Item(System.String)">
            <summary>
            Get value by the name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TinyIoC.SafeDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:TinyIoC.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a generic method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Source type</param>
            <param name="bindingFlags">Binding flags</param>
            <param name="methodName">Name of the method</param>
            <param name="genericTypes">Generic types to use to make the method generic</param>
            <param name="parameterTypes">Method parameters</param>
            <returns>MethodInfo or null if no matches found</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TinyIoC.NamedParameterOverloads">
            <summary>
            Name/Value pairs for specifying "user" parameters when resolving
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:TinyIoC.ResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.RegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{TinyIoC.TinyIoCContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.MultiRegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">MultiRegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>MultiRegisterOptions</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type)">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type)">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister``1">
            <summary>
            Remove a container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister``1(System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister(System.Type)">
            <summary>
            Remove a container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister(System.Type,System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type)">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(``0@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type)">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object)">
            <summary>
            Attempts to resolve all public property dependencies on the given object.
            </summary>
            <param name="input">Object to "build up"</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object,TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory successfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ObjectFactoryBase.GetObject(System.Type,TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
    </members>
</doc>
